/*DERBY_SERIALIZED_VIEWS*/
module.exports = function (derbyTemplates, views) {
  var expressions = derbyTemplates.expressions;
  var templates = derbyTemplates.templates;
  views.register('TitleElement').template = new templates.Template([new templates.Element('title', void 0, [new templates.DynamicViewInstance(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('Title')]), {})], void 0, false)]);
  views.register('BodyElement').template = new templates.Template([new templates.Element('body', {'class': new templates.DynamicAttribute(new expressions.FnExpression(['$bodyClass'], [new expressions.PathExpression(['$render', 'ns'])], void 0, new expressions.ExpressionMeta('$bodyClass($render.ns)')))}, [new templates.DynamicViewInstance(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('Body')]), {})], void 0, false, true)]);
  views.register('Title').template = new templates.Template([new templates.Text('Lever Hire')]);
  views.register('Head').template = new templates.Template([new templates.ViewInstance('meta', {})]);
  views.register('Body').template = new templates.Template([new templates.ViewInstance('page', {'pageNav': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('page-nav')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.home')], void 0, new expressions.ExpressionMeta('url(\'hire.home\')'))), 'class': new templates.Attribute('selected')}, [new templates.ViewInstance('icon-mine-list', {}), new templates.Text('Candidates')], void 0, false), new templates.ViewInstance('add-candidate', {}), new templates.ViewInstance('drafts', {})], void 0, false)]))}), new templates.ViewInstance('listeners', {}, [new templates.MarkupAs(['page', 'listeners'])])]);
  views.register('Tail').template = new templates.Template([new templates.ViewInstance('track', {})]);
  views.register('d-connection-alert:index').template = new templates.Template([new templates.Comment('d-connection-alert:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.OperatorExpression('!==', [new expressions.AliasPathExpression('#root', ['$connection', 'state']), new expressions.LiteralExpression('connected')], void 0, new expressions.ExpressionMeta('if #root.$connection.state !== \'connected\'', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('connection')}, [new templates.Element('p', {'class': new templates.Attribute('alert alert-warning')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$connection', 'state']), new expressions.LiteralExpression('stopped')], void 0, new expressions.ExpressionMeta('if #root.$connection.state === \'stopped\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Text('Unable to reconnect – '), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Reload')], [new templates.ElementOn('click', new expressions.FnExpression(['reload'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
      [new templates.DynamicText(new expressions.FnExpression(['sentenceCase'], [new expressions.AliasPathExpression('#root', ['$connection', 'state'])], void 0, new expressions.ExpressionMeta('sentenceCase(#root.$connection.state)'))), new templates.ConditionalBlock([new expressions.PathExpression(['hideReconnect'], new expressions.ExpressionMeta('unless hideReconnect', 'unless'))], [
        [new templates.Text(' – '), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Reconnect')], [new templates.ElementOn('click', new expressions.FnExpression(['reconnect'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
      ])]
    ])], void 0, false)], void 0, false)]
  ])]);
  views.register('d-before-unload').template = new templates.Template([]);
  views.register('l-calendar:icon-single-caret-left:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-single-caret-left')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M4.91424469,7.41815094 L4.5606913,7.77170433 L4.91424469,8.12525772 L9.85380275,13.0648158 L10.5609095,12.357709 L5.97815815,7.76845104 L10.6213515,3.12525772 L9.91424469,2.41815094 L4.91424469,7.41815094 Z M4.91424469,7.41815094'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-calendar:icon-single-caret-right:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-single-caret-right')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M11.6213515,8.06481578 L11.9749049,7.71126239 L11.6213515,7.357709 L6.68179341,2.41815094 L5.97468662,3.12525772 L10.5764289,7.69552479 L5.91424469,12.357709 L6.62135147,13.0648158 L11.6213515,8.06481578 Z M11.6213515,8.06481578'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-calendar:index', null, {'element': 'l-calendar'}).template = new templates.Template([new templates.Comment('l-calendar:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('calendar '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.Element('nav', {'class': new templates.Attribute('small')}, [new templates.Element('button', {'class': new templates.Attribute('calendar-btn btn today'), 'type': new templates.Attribute('button')}, [new templates.Text('Today')], [new templates.ElementOn('click', new expressions.FnExpression(['selectToday'], []))], false), new templates.Element('div', {'class': new templates.Attribute('button-group')}, [new templates.Element('button', {'class': new templates.Attribute('calendar-btn btn previous icon-only'), 'type': new templates.Attribute('button')}, [new templates.ViewInstance('l-calendar:icon-single-caret-left', {})], [new templates.ElementOn('click', new expressions.FnExpression(['previousMonth'], []))], false), new templates.Element('button', {'class': new templates.Attribute('calendar-btn btn next icon-only'), 'type': new templates.Attribute('button')}, [new templates.ViewInstance('l-calendar:icon-single-caret-right', {})], [new templates.ElementOn('click', new expressions.FnExpression(['nextMonth'], []))], false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('month-title')}, [new templates.DynamicText(new expressions.PathExpression(['month'], new expressions.ExpressionMeta('month')))], void 0, false), new templates.Element('table', void 0, [new templates.Element('thead', void 0, [new templates.Element('tr', void 0, [new templates.EachBlock(new expressions.PathExpression(['days'], new expressions.ExpressionMeta('each days as #dayTitle', 'each', void 0, '#dayTitle')), [new templates.Element('th', {'class': new templates.Attribute('day-title')}, [new templates.DynamicText(new expressions.AliasPathExpression('#dayTitle', [], new expressions.ExpressionMeta('#dayTitle')))], void 0, false)])], void 0, false)], void 0, false), new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['grid'], new expressions.ExpressionMeta('each grid as #week', 'each', void 0, '#week')), [new templates.Element('tr', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#week', ['days'], new expressions.ExpressionMeta('each #week.days as #day', 'each', void 0, '#day')), [new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#day', ['class'], new expressions.ExpressionMeta('#day.class'))), new templates.Text(' dates')]))}, [new templates.DynamicText(new expressions.AliasPathExpression('#day', ['date'], new expressions.ExpressionMeta('#day.date')))], [new templates.ElementOn('click', new expressions.FnExpression(['select'], [new expressions.AliasPathExpression('#day', ['ms'])]))], false)])], void 0, false)])], void 0, false)], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-card:fields:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:icon-radio-button:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-radio-button')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewbox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'id': new templates.Attribute('Oval-2-copy-2'), 'sketch:type': new templates.Attribute('MSShapeGroup'), 'd': new templates.Attribute('M15.98,7.99C15.98,3.578,12.402,0,7.99,0S0,3.578,0,7.99\ns3.578,7.99,7.99,7.99S15.98,12.402,15.98,7.99L15.98,7.99z M0.888,7.99c0-3.922,3.18-7.103,7.103-7.103\nc3.923,0,7.103,3.18,7.103,7.103c0,3.923-3.18,7.103-7.103,7.103C4.068,15.093,0.888,11.913,0.888,7.99L0.888,7.99z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:icon-checkbox:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-checkbox')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,3.009v9.981C0,14.652,1.336,16,3.009,16h9.981\nc1.662,0,3.01-1.336,3.01-3.01V3.009C16,1.347,14.664,0,12.99,0H3.009C1.347,0,0,1.336,0,3.009z M12.99,1\nC14.107,1,15,1.896,15,3.009v9.981c0,1.117-0.896,2.01-2.01,2.01H3.009C1.893,15,1,14.104,1,12.99V3.009C1,1.893,1.896,1,3.009,1\nH12.99z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:icon-text-input:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-text-input')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewbox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M4,11.158V12h2v-0.842V4.842V4H4v0.842V11.158L4,11.158z M6.667,13H7\nv-1H6.667H6.333H6v1h0.333H6.667L6.667,13z M3.667,13H4v-1H3.667H3.333H3v1h0.333H3.667L3.667,13z M7,3H6v1h1V3L7,3z M4,3H3v1h1V3\nL4,3z M0,2.824v10.352C0,14.736,1.255,16,2.824,16h10.352C14.736,16,16,14.744,16,13.176V2.824C16,1.264,14.744,0,13.176,0H2.824\nC1.264,0,0,1.255,0,2.824L0,2.824L0,2.824z M15.059,2.824v10.352c0,1.045-0.84,1.883-1.883,1.883H2.824\nc-1.045,0-1.882-0.839-1.882-1.883V2.824c0-1.045,0.839-1.882,1.882-1.882h10.352C14.221,0.941,15.059,1.78,15.059,2.824\nL15.059,2.824z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:icon-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.557,8.255h-0.539c0.572-0.059,1.149-0.65,1.082-1.305 c-0.066-0.655-0.584-1.138-1.158-1.081L8.233,6.351L7.564,6.36c0,0,0.967-0.438,0.224-3.936c-0.74-3.496-2.7-2.184-2.7-2.184\nS5.062,3.228,4.957,3.652C4.852,4.076,2.554,8.545,2.554,8.545c0,0.236-1.423,0.473-1.422,0.712c0.017,2.056,0,3.814,0,5.944\nC2.658,14.803,3.501,16,6.762,16c1.064,0,2.369-0.174,3.491-0.358l2.935-0.3c0.51-0.053,0.794-0.572,0.803-1.279\nc-0.004-0.812-0.607-0.942-0.973-1.078c0,0,1.712,0.113,1.564-1.292c0-0.868-0.646-0.989-1.125-1.064h0.34\nc0.656-0.067,1.132-0.653,1.065-1.308C14.795,8.666,14.211,8.189,13.557,8.255z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:default4:show').template = new templates.Template([new templates.ViewInstance('l-card:fields:show', {})]);
  views.register('l-card:fields:default4:edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.Element('div', {'class': new templates.Attribute('text')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('if #field.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('#field.description')))], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.ViewInstance('l-score-thumbs', {'score': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value'))), new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))})], void 0, false)]);
  views.register('l-card:fields:default4:callout').template = new templates.Template([new templates.ViewInstance('l-card:fields:score-system:callout', {})]);
  views.register('l-card:fields:dropdown:show').template = new templates.Template([new templates.ViewInstance('l-card:fields:show', {})]);
  views.register('l-card:fields:dropdown:edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.Element('div', {'class': new templates.Attribute('text')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('if #field.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('#field.description')))], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.ViewInstance('l-dropdown', {'width': 'fit', 'class': 'tall-option caps-option', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#field', ['options'], new expressions.ExpressionMeta('#field.options'))), new expressions.AliasPathExpression('#field', ['options'], new expressions.ExpressionMeta('#field.options'))), 'prompt': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#field', ['prompt'], new expressions.ExpressionMeta('#field.prompt'))), new expressions.AliasPathExpression('#field', ['prompt'], new expressions.ExpressionMeta('#field.prompt'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value'))), new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))})], void 0, false)]);
  views.register('l-card:fields:dropdown:editor').template = new templates.Template([new templates.ViewInstance('l-card:fields:editor-prompt', {}), new templates.Element('div', {'class': new templates.Attribute('card-prompt-edit dropdown')}, [new templates.Element('div', {'class': new templates.Attribute('card-dropdown-prompt')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#field', ['prompt'], new expressions.ExpressionMeta('#field.prompt'))), 'placeholder': new templates.Attribute('Add a dropdown prompt... (optional)')}, null, void 0, false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('dropdown-editor-wrapper')}, [new templates.Element('i', {'class': new templates.Attribute('dropdown-caret')}, [], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('profile-card-form-field')}, [new templates.EachBlock(new expressions.AliasPathExpression('#field', ['options'], new expressions.ExpressionMeta('each #field.options as #option', 'each', void 0, '#option')), [new templates.Element('li', {'class': new templates.Attribute('form-field-option dropdown')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), 'placeholder': new templates.Attribute('Enter option text')}, null, void 0, false), new templates.Element('a', {'class': new templates.Attribute('remove-choice has-tip'), 'title': new templates.Attribute('Remove'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('l-card:fields:icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['deleteOption'], [new expressions.AliasPathExpression('#field', []), new expressions.AliasPathExpression('#option', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false), new templates.Element('a', {'class': new templates.Attribute('form-field-add-option'), 'href': new templates.Attribute('#')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input disabled'), 'disabled': new templates.Attribute(true), 'placeholder': new templates.Attribute('Add option')}, null, void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['addOption'], [new expressions.AliasPathExpression('#field', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]);
  views.register('l-card:fields:dropdown:summary').template = new templates.Template([new templates.ViewInstance('l-card:fields:summary', {})]);
  views.register('l-card:fields:file-upload:icon-paperclip:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-paperclip')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'fill': new templates.Attribute('#3F484B'), 'd': new templates.Attribute('M3.036,14.696c-0.614,0-1.219-0.284-1.788-0.853l-0.083-0.082c-0.586-0.578-2.305-2.956,0.008-5.391 c1.165-1.226,2.771-2.813,4.471-4.493C6.558,2.976,7.509,2.036,8.455,1.09c1.708-1.707,2.958-1.317,4.894,0.528 c2.288,2.178,2.707,4.322,1.718,5.463c-1.314,1.515-6.285,6.488-6.496,6.699c-0.278,0.279-0.729,0.279-1.008,0 c-0.278-0.278-0.278-0.729,0-1.008c0.051-0.051,5.146-5.148,6.427-6.625c0.294-0.339,0.339-1.629-1.624-3.498 c-1.13-1.076-1.465-1.989-2.902-0.551c-0.948,0.948-1.901,1.89-2.817,2.793C4.954,6.564,3.355,8.144,2.207,9.353 c-1.349,1.421-0.656,2.788-0.041,3.395l0.089,0.088c0.524,0.523,0.952,0.665,1.718-0.102c0.213-0.213,0.656-0.644,1.213-1.185 C6.729,10.05,9.6,7.26,10.18,6.534c0.184-0.23,0.452-0.787,0.196-1.011c-0.353-0.31-1.002,0.315-1.192,0.514 c-2.012,2.112-4.64,4.643-4.666,4.667c-0.283,0.273-0.734,0.265-1.007-0.02c-0.273-0.284-0.265-0.734,0.019-1.007 c0.026-0.025,2.633-2.535,4.622-4.624c1.291-1.356,2.48-1.201,3.162-0.604c0.832,0.727,0.636,2.154-0.021,2.974 c-0.586,0.734-2.847,2.945-5.113,5.146c-0.55,0.536-0.988,0.96-1.199,1.171C4.346,14.378,3.686,14.696,3.036,14.696L3.036,14.696z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:file-upload:show').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('if #field.value', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.RelativePathExpression(['id']), new expressions.LiteralExpression('fileName'), new expressions.RelativePathExpression(['name'])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', {accountId: #root._session.accountId, userId: #root._session.userId, fileId: this.id, fileName: this.name})'))), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.RelativePathExpression(['name'], new expressions.ExpressionMeta('this.name')))], void 0, false)],
    [new templates.Element('span', {'class': new templates.Attribute('card-value-empty')}, [new templates.Text('Not provided')], void 0, false)]
  ])], void 0, false)]);
  views.register('l-card:fields:file-upload:edit').template = new templates.Template([new templates.ViewInstance('l-card:fields:file-upload:show', {})]);
  views.register('l-card:fields:file-upload:editor').template = new templates.Template([new templates.ViewInstance('l-card:fields:editor', {}), new templates.Element('div', {'class': new templates.Attribute('card-response-preview')}, [new templates.Element('a', {'class': new templates.Attribute('btn has-icon disabled')}, [new templates.ViewInstance('l-card:fields:file-upload:icon-paperclip', {}), new templates.Text('Upload file')], void 0, false)], void 0, false)]);
  views.register('l-card:fields:file-upload:summary').template = new templates.Template([new templates.ViewInstance('l-card:fields:summary', {})]);
  views.register('l-card:fields:multiple-choice:show').template = new templates.Template([new templates.ViewInstance('l-card:fields:show', {})]);
  views.register('l-card:fields:multiple-choice:edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.Element('div', {'class': new templates.Attribute('text')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('if #field.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('#field.description')))], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#field', ['options'], new expressions.ExpressionMeta('each #field.options as #option', 'each', void 0, '#option')), [new templates.Element('li', void 0, [new templates.Element('label', void 0, [new templates.Element('input', {'disabled': new templates.DynamicAttribute(new expressions.AttributePathExpression('disabled', [], new expressions.ExpressionMeta('@disabled'))), 'type': new templates.Attribute('radio'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), 'checked': new templates.DynamicAttribute(new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#field', ['value']), new expressions.AliasPathExpression('#option', ['text'])], void 0, new expressions.ExpressionMeta('#field.value === #option.text')))}, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('application-answer-alternative')}, [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text')))], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#option', ['description'], new expressions.ExpressionMeta('if #option.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['description'], new expressions.ExpressionMeta('#option.description')))], void 0, false)]
  ])], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('l-card:fields:multiple-choice:editor').template = new templates.Template([new templates.ViewInstance('l-card:fields:editor-prompt', {}), new templates.Element('ul', {'class': new templates.Attribute('profile-card-form-field')}, [new templates.EachBlock(new expressions.AliasPathExpression('#field', ['options'], new expressions.ExpressionMeta('each #field.options as #option', 'each', void 0, '#option')), [new templates.Element('li', {'class': new templates.Attribute('form-field-option multiple-choice')}, [new templates.ViewInstance('l-card:fields:icon-radio-button', {}), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), 'placeholder': new templates.Attribute('Enter option text')}, null, void 0, false), new templates.Element('a', {'class': new templates.Attribute('remove-choice has-tip'), 'title': new templates.Attribute('Remove'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('l-card:fields:icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['deleteOption'], [new expressions.AliasPathExpression('#field', []), new expressions.AliasPathExpression('#option', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false), new templates.Element('a', {'class': new templates.Attribute('form-field-add-option'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('l-card:fields:icon-radio-button', {}), new templates.Element('input', {'class': new templates.Attribute('classic-input disabled'), 'disabled': new templates.Attribute(true), 'placeholder': new templates.Attribute('Add option')}, null, void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['addOption'], [new expressions.AliasPathExpression('#field', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-card:fields:multiple-choice:summary').template = new templates.Template([new templates.ViewInstance('l-card:fields:summary', {})]);
  views.register('l-card:fields:multiple-select:icon-checkbox:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-checkbox')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,3.009v9.981C0,14.652,1.336,16,3.009,16h9.981\nc1.662,0,3.01-1.336,3.01-3.01V3.009C16,1.347,14.664,0,12.99,0H3.009C1.347,0,0,1.336,0,3.009z M12.99,1\nC14.107,1,15,1.896,15,3.009v9.981c0,1.117-0.896,2.01-2.01,2.01H3.009C1.893,15,1,14.104,1,12.99V3.009C1,1.893,1.896,1,3.009,1\nH12.99z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:multiple-select:show').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('if #field.value', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.EachBlock(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('each #field.value as #value', 'each', void 0, '#value')), [new templates.Element('span', {'class': new templates.Attribute('card-value-joined')}, [new templates.DynamicText(new expressions.AliasPathExpression('#value', [], new expressions.ExpressionMeta('#value')))], void 0, false)])],
    [new templates.Element('span', {'class': new templates.Attribute('card-value-empty')}, [new templates.Text('Not specified')], void 0, false)]
  ])], void 0, false)]);
  views.register('l-card:fields:multiple-select:edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.Element('div', {'class': new templates.Attribute('text')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('if #field.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('#field.description')))], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#field', ['options'], new expressions.ExpressionMeta('each #field.options as #option', 'each', void 0, '#option')), [new templates.Element('li', void 0, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), 'checked': new templates.DynamicAttribute(new expressions.FnExpression(['contains'], [new expressions.AliasPathExpression('#field', ['value']), new expressions.AliasPathExpression('#option', ['text'])], void 0, new expressions.ExpressionMeta('contains(#field.value, #option.text)')))}, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('application-answer-alternative')}, [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text')))], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#option', ['description'], new expressions.ExpressionMeta('if #option.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['description'], new expressions.ExpressionMeta('#option.description')))], void 0, false)]
  ])], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('l-card:fields:multiple-select:editor').template = new templates.Template([new templates.ViewInstance('l-card:fields:editor-prompt', {}), new templates.Element('ul', {'class': new templates.Attribute('profile-card-form-field')}, [new templates.EachBlock(new expressions.AliasPathExpression('#field', ['options'], new expressions.ExpressionMeta('each #field.options as #option', 'each', void 0, '#option')), [new templates.Element('li', {'class': new templates.Attribute('form-field-option multiple-select')}, [new templates.ViewInstance('l-card:fields:multiple-select:icon-checkbox', {}), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), 'placeholder': new templates.Attribute('Enter option text')}, null, void 0, false), new templates.Element('a', {'class': new templates.Attribute('remove-choice has-tip'), 'title': new templates.Attribute('Remove'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('l-card:fields:icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['deleteOption'], [new expressions.AliasPathExpression('#field', []), new expressions.AliasPathExpression('#option', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false), new templates.Element('a', {'class': new templates.Attribute('form-field-add-option'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('l-card:fields:multiple-select:icon-checkbox', {}), new templates.Element('input', {'class': new templates.Attribute('classic-input disabled'), 'disabled': new templates.Attribute(true), 'placeholder': new templates.Attribute('Add option')}, null, void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['addOption'], [new expressions.AliasPathExpression('#field', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-card:fields:multiple-select:summary').template = new templates.Template([new templates.ViewInstance('l-card:fields:summary', {})]);
  views.register('l-card:fields:note:icon-strong-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-strong-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.33,1.97c0.596,2.841-0.118,2.932-0.118,2.932l0.536-0.008l3.77-0.391 c0.46-0.047,0.813,0.612,0.867,1.144s-0.408,1.013-0.867,1.061h0.432c0.523-0.054,0.992,0.334,1.046,0.865\nc0.054,0.532-0.328,1.007-0.854,1.062h-0.272c0.384,0.062,0.902,0.16,0.902,0.865c0.117,1.142-1.254,1.051-1.254,1.051\nc0.293,0.109,0.776,0.215,0.779,0.875c-0.007,0.574-0.234,0.997-0.643,1.039l-1.476,0.153c0.065-0.321,0.128-0.69,0.054-1.398\nc0-0.76,0.059-1.547,0-2.12c-0.059-0.572-0.238-1.232-0.298-1.805c-0.058-0.573-0.479-1.405-0.981-1.354L8.418,6.222\nc0,0,0.042-0.037-0.542-2.808C7.98,3.188,8.049,3.027,8.063,2.967c0.084-0.344,0.105-2.771,0.105-2.771S9.737-0.87,10.33,1.97z\nM11.328,8.081c-0.059-0.573-0.51-0.996-1.012-0.945l-4.112,0.42L5.619,7.565c0,0,0.845-0.384,0.196-3.443\nC5.168,1.063,3.457,2.211,3.457,2.211S3.434,4.824,3.342,5.195c-0.092,0.371-2.1,4.281-2.1,4.281C1.242,9.684-0.001,9.891,0,10.1\nc0.015,1.799,0,3.338,0,5.201C1.333,14.951,2.07,16,4.919,16c0.93,0,2.069-0.151,3.049-0.314l2.564-0.262\nc0.444-0.045,0.693-0.501,0.7-1.119c-0.002-0.711-0.53-0.824-0.85-0.943c0,0,1.496,0.099,1.367-1.131\nc0-0.759-0.565-0.865-0.983-0.932h0.297c0.573-0.059,0.989-0.57,0.931-1.144c-0.058-0.572-0.568-0.99-1.141-0.932h-0.471\nC10.884,9.172,11.388,8.654,11.328,8.081z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:note:icon-strong-no-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-strong-no-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M2.027,2.584C1.933,2.996,2.055,3.388,2.305,3.592l-0.3-0.069 C1.531,3.414,1.049,3.756,0.924,4.289C0.818,4.748,1.023,5.18,1.381,5.366L1.255,5.338C0.723,5.213,0.192,5.546,0.067,6.079\ns0.208,1.064,0.741,1.189l0.289,0.112C0.631,7.271,0.153,7.615,0.029,8.148c-0.124,0.531,0.153,1.05,0.621,1.16l3.427,0.85\nc0,0-0.541,0.27-0.897,3.219c-0.358,2.947,2.131,2.469,2.131,2.469s0.242-0.689,0.495-1.367c-0.236-0.36-0.375-0.963-0.252-1.965\nC5.91,9.564,6.546,9.396,6.546,9.396L2.664,8.395c-0.468-0.11-0.745-0.628-0.621-1.16C2.167,6.702,2.256,5.933,2.381,5.4\nc0.125-0.532,0.421-1.401,0.527-1.859C3.009,3.11,3.345,2.391,3.52,1.914l-0.517-0.12C2.587,1.698,2.152,2.051,2.027,2.584z\nM4.364,5.49C3.831,5.365,3.498,4.833,3.623,4.301C3.748,3.769,4.279,3.436,4.811,3.56l0.125,0.028\nC4.579,3.402,4.374,2.97,4.48,2.511c0.125-0.532,0.607-0.875,1.081-0.766l0.3,0.069C5.611,1.61,5.488,1.218,5.583,0.806\nc0.125-0.533,0.56-0.886,0.975-0.791l2.39,0.556c0.932,0.157,2.024,0.378,2.862,0.665C14.373,2.113,14.693,3.274,16,3.371\nc0,2.088-0.016,2.817-0.13,4.671c-0.013,0.198-2.714-0.009-2.776,0.176c0,0-3.011,2.897-3.208,3.201\nc-0.196,0.305-1.02,2.647-1.02,2.647s-1.894,0.505-1.536-2.442c0.357-2.949,1.235-3.033,1.235-3.033l-0.53-0.173L4.206,7.53\nc-0.468-0.11-0.745-0.628-0.621-1.16c0.124-0.533,0.602-0.877,1.067-0.769L4.364,5.49z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:note:icon-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.557,8.255h-0.539c0.572-0.059,1.149-0.65,1.082-1.305 c-0.066-0.655-0.584-1.138-1.158-1.081L8.233,6.351L7.564,6.36c0,0,0.967-0.438,0.224-3.936c-0.74-3.496-2.7-2.184-2.7-2.184\nS5.062,3.228,4.957,3.652C4.852,4.076,2.554,8.545,2.554,8.545c0,0.236-1.423,0.473-1.422,0.712c0.017,2.056,0,3.814,0,5.944\nC2.658,14.803,3.501,16,6.762,16c1.064,0,2.369-0.174,3.491-0.358l2.935-0.3c0.51-0.053,0.794-0.572,0.803-1.279\nc-0.004-0.812-0.607-0.942-0.973-1.078c0,0,1.712,0.113,1.564-1.292c0-0.868-0.646-0.989-1.125-1.064h0.34\nc0.656-0.067,1.132-0.653,1.065-1.308C14.795,8.666,14.211,8.189,13.557,8.255z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:note:icon-no-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-no-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M2.234,6.302L1.909,6.176C1.31,6.036,0.936,5.437,1.076,4.838 c0.14-0.599,0.738-0.974,1.337-0.833l0.141,0.032C2.151,3.828,1.92,3.341,2.04,2.825C2.18,2.226,2.723,1.84,3.256,1.963l0.337,0.078\nC3.312,1.811,3.174,1.37,3.281,0.907c0.14-0.6,0.63-0.998,1.097-0.89l2.689,0.625c1.048,0.176,2.277,0.425,3.219,0.748\nC13.17,2.378,13.53,3.683,15,3.792c0,2.35-0.018,3.17-0.146,5.256c-0.014,0.224-3.053-0.011-3.123,0.198c0,0-3.387,3.26-3.609,3.602\nC7.9,13.19,6.975,15.826,6.975,15.826s-2.131,0.567-1.728-2.748c0.402-3.318,1.39-3.412,1.39-3.412L6.04,9.471L1.731,8.472\nC1.206,8.348,0.894,7.765,1.033,7.167C1.172,6.567,1.71,6.18,2.234,6.302z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:note:show').template = new templates.Template([new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#field', ['userId']), void 0, new expressions.ExpressionMeta('#root.users_base[#field.userId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#field', ['userId']), void 0, new expressions.ExpressionMeta('#root.users_base[#field.userId]'))), 'class': 'large has-tip'}), new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#field', ['userId']), ['name'], new expressions.ExpressionMeta('#root.users_base[#field.userId].name')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('if #field.value', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicHtml(new expressions.FnExpression(['shareText'], [new expressions.AliasPathExpression('#field', ['value'])], void 0, new expressions.ExpressionMeta('unescaped shareText(#field.value)', void 0, void 0, void 0, void 0, true)))],
    [new templates.Element('span', {'class': new templates.Attribute('card-value-empty')}, [new templates.Text('Not specified')], void 0, false)]
  ])], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['score'], new expressions.ExpressionMeta('if #field.score', 'if'))], [
    [new templates.ViewInstance('l-card:fields:note:callout', {})]
  ])]);
  views.register('l-card:fields:note:edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.Element('div', {'class': new templates.Attribute('text')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#field', ['userId']), ['name'], new expressions.ExpressionMeta('#root.users_base[#field.userId].name')))], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('if #field.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('#field.description')))], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.Element('textarea', {'class': new templates.Attribute('card-field-input classic-input'), 'type': new templates.Attribute('text'), 'placeholder': new templates.DynamicAttribute(new expressions.AliasPathExpression('#field', ['prompt'], new expressions.ExpressionMeta('#field.prompt')))}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))], void 0, false), new templates.Text(' ')], void 0, false), new templates.ViewInstance('l-score-thumbs', {'class': 'light', 'score': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#field', ['score'], new expressions.ExpressionMeta('#field.score'))), new expressions.AliasPathExpression('#field', ['score'], new expressions.ExpressionMeta('#field.score')))})]);
  views.register('l-card:fields:note:summary').template = new templates.Template([new templates.ViewInstance('l-card:fields:summary', {})]);
  views.register('l-card:fields:note:callout').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-score-value')}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('icon-'), new templates.DynamicText(new expressions.FnExpression(['scoreToThumbIcon'], [new expressions.AliasPathExpression('#field', ['score']), new expressions.AliasPathExpression('#field', ['scoreSystemId'])], void 0, new expressions.ExpressionMeta('scoreToThumbIcon(#field.score, #field.scoreSystemId)')))]), {'optional': true})], void 0, false)]);
  views.register('l-card:fields:text:show').template = new templates.Template([new templates.ViewInstance('l-card:fields:show', {})]);
  views.register('l-card:fields:text:edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.Element('div', {'class': new templates.Attribute('text')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('if #field.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('#field.description')))], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.Element('input', {'class': new templates.Attribute('card-field-input classic-input'), 'type': new templates.Attribute('text'), 'placeholder': new templates.DynamicAttribute(new expressions.AliasPathExpression('#field', ['prompt'], new expressions.ExpressionMeta('#field.prompt'))), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))}, null, void 0, false)], void 0, false)]);
  views.register('l-card:fields:text:editor').template = new templates.Template([new templates.ViewInstance('l-card:fields:editor', {}), new templates.Element('div', {'class': new templates.Attribute('card-response-preview')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input disabled'), 'disabled': new templates.Attribute(true), 'placeholder': new templates.Attribute('Response goes here')}, null, void 0, false)], void 0, false)]);
  views.register('l-card:fields:text:summary').template = new templates.Template([new templates.ViewInstance('l-card:fields:summary', {})]);
  views.register('l-card:fields:textarea:show').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-note')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['card', 'type']), new expressions.LiteralExpression('note')], void 0, new expressions.ExpressionMeta('if card.type === "note"', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('if #field.value', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.DynamicHtml(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('unescaped #field.value', void 0, void 0, void 0, void 0, true)))],
      [new templates.Element('span', {'class': new templates.Attribute('card-value-empty')}, [new templates.Text('Not specified')], void 0, false)]
    ])], void 0, false)],
    [new templates.ViewInstance('l-card:fields:show', {})]
  ])], void 0, false)]);
  views.register('l-card:fields:textarea:edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.Element('div', {'class': new templates.Attribute('text')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('if #field.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('#field.description')))], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.Element('textarea', {'class': new templates.Attribute('card-field-input classic-input'), 'placeholder': new templates.DynamicAttribute(new expressions.AliasPathExpression('#field', ['prompt'], new expressions.ExpressionMeta('#field.prompt')))}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))], void 0, false)], void 0, false)]);
  views.register('l-card:fields:textarea:editor').template = new templates.Template([new templates.ViewInstance('l-card:fields:editor', {}), new templates.Element('div', {'class': new templates.Attribute('card-response-preview')}, [new templates.Element('textarea', {'class': new templates.Attribute('classic-input disabled'), 'disabled': new templates.Attribute(true), 'placeholder': new templates.Attribute('Response goes here')}, [], void 0, false)], void 0, false)]);
  views.register('l-card:fields:textarea:summary').template = new templates.Template([new templates.ViewInstance('l-card:fields:summary', {})]);
  views.register('l-card:fields:score:show').template = new templates.Template([new templates.ViewInstance('l-card:fields:score:callout', {})]);
  views.register('l-card:fields:score:edit').template = new templates.Template([new templates.ViewInstance('l-card:fields:dropdown:edit', {})]);
  views.register('l-card:fields:score:editor').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-prompt-edit')}, [new templates.Element('div', {'class': new templates.Attribute('card-prompt-title')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text'))), 'placeholder': new templates.Attribute('Type your question ...')}, null, void 0, false)], void 0, false)], void 0, false), new templates.Element('p', void 0, [new templates.Text('This is the overall score field and cannot be edited')], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('profile-card-form-field')}, [new templates.EachBlock(new expressions.AliasPathExpression('#field', ['options'], new expressions.ExpressionMeta('each #field.options as #option', 'each', void 0, '#option')), [new templates.Element('li', {'class': new templates.Attribute('form-field-option dropdown')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input disabled'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), 'disabled': new templates.Attribute(true)}, null, void 0, false)], void 0, false)])], void 0, false)]);
  views.register('l-card:fields:score:summary').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-field-summary card-field-summary-score')}, [new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#field', ['value']), new expressions.LiteralExpression('-')], void 0, new expressions.ExpressionMeta('#field.value || \'-\'')))], void 0, false)]);
  views.register('l-card:fields:score:callout').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-score-value')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('if #field.value', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicText(new expressions.FnExpression(['firstWord'], [new expressions.AliasPathExpression('#field', ['value'])], void 0, new expressions.ExpressionMeta('firstWord(#field.value)')))],
    [new templates.Text('-')]
  ])], void 0, false)]);
  views.register('l-card:fields:score-system:icon-strong-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-strong-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.33,1.97c0.596,2.841-0.118,2.932-0.118,2.932l0.536-0.008l3.77-0.391 c0.46-0.047,0.813,0.612,0.867,1.144s-0.408,1.013-0.867,1.061h0.432c0.523-0.054,0.992,0.334,1.046,0.865\nc0.054,0.532-0.328,1.007-0.854,1.062h-0.272c0.384,0.062,0.902,0.16,0.902,0.865c0.117,1.142-1.254,1.051-1.254,1.051\nc0.293,0.109,0.776,0.215,0.779,0.875c-0.007,0.574-0.234,0.997-0.643,1.039l-1.476,0.153c0.065-0.321,0.128-0.69,0.054-1.398\nc0-0.76,0.059-1.547,0-2.12c-0.059-0.572-0.238-1.232-0.298-1.805c-0.058-0.573-0.479-1.405-0.981-1.354L8.418,6.222\nc0,0,0.042-0.037-0.542-2.808C7.98,3.188,8.049,3.027,8.063,2.967c0.084-0.344,0.105-2.771,0.105-2.771S9.737-0.87,10.33,1.97z\nM11.328,8.081c-0.059-0.573-0.51-0.996-1.012-0.945l-4.112,0.42L5.619,7.565c0,0,0.845-0.384,0.196-3.443\nC5.168,1.063,3.457,2.211,3.457,2.211S3.434,4.824,3.342,5.195c-0.092,0.371-2.1,4.281-2.1,4.281C1.242,9.684-0.001,9.891,0,10.1\nc0.015,1.799,0,3.338,0,5.201C1.333,14.951,2.07,16,4.919,16c0.93,0,2.069-0.151,3.049-0.314l2.564-0.262\nc0.444-0.045,0.693-0.501,0.7-1.119c-0.002-0.711-0.53-0.824-0.85-0.943c0,0,1.496,0.099,1.367-1.131\nc0-0.759-0.565-0.865-0.983-0.932h0.297c0.573-0.059,0.989-0.57,0.931-1.144c-0.058-0.572-0.568-0.99-1.141-0.932h-0.471\nC10.884,9.172,11.388,8.654,11.328,8.081z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:score-system:icon-strong-no-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-strong-no-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M2.027,2.584C1.933,2.996,2.055,3.388,2.305,3.592l-0.3-0.069 C1.531,3.414,1.049,3.756,0.924,4.289C0.818,4.748,1.023,5.18,1.381,5.366L1.255,5.338C0.723,5.213,0.192,5.546,0.067,6.079\ns0.208,1.064,0.741,1.189l0.289,0.112C0.631,7.271,0.153,7.615,0.029,8.148c-0.124,0.531,0.153,1.05,0.621,1.16l3.427,0.85\nc0,0-0.541,0.27-0.897,3.219c-0.358,2.947,2.131,2.469,2.131,2.469s0.242-0.689,0.495-1.367c-0.236-0.36-0.375-0.963-0.252-1.965\nC5.91,9.564,6.546,9.396,6.546,9.396L2.664,8.395c-0.468-0.11-0.745-0.628-0.621-1.16C2.167,6.702,2.256,5.933,2.381,5.4\nc0.125-0.532,0.421-1.401,0.527-1.859C3.009,3.11,3.345,2.391,3.52,1.914l-0.517-0.12C2.587,1.698,2.152,2.051,2.027,2.584z\nM4.364,5.49C3.831,5.365,3.498,4.833,3.623,4.301C3.748,3.769,4.279,3.436,4.811,3.56l0.125,0.028\nC4.579,3.402,4.374,2.97,4.48,2.511c0.125-0.532,0.607-0.875,1.081-0.766l0.3,0.069C5.611,1.61,5.488,1.218,5.583,0.806\nc0.125-0.533,0.56-0.886,0.975-0.791l2.39,0.556c0.932,0.157,2.024,0.378,2.862,0.665C14.373,2.113,14.693,3.274,16,3.371\nc0,2.088-0.016,2.817-0.13,4.671c-0.013,0.198-2.714-0.009-2.776,0.176c0,0-3.011,2.897-3.208,3.201\nc-0.196,0.305-1.02,2.647-1.02,2.647s-1.894,0.505-1.536-2.442c0.357-2.949,1.235-3.033,1.235-3.033l-0.53-0.173L4.206,7.53\nc-0.468-0.11-0.745-0.628-0.621-1.16c0.124-0.533,0.602-0.877,1.067-0.769L4.364,5.49z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:score-system:icon-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.557,8.255h-0.539c0.572-0.059,1.149-0.65,1.082-1.305 c-0.066-0.655-0.584-1.138-1.158-1.081L8.233,6.351L7.564,6.36c0,0,0.967-0.438,0.224-3.936c-0.74-3.496-2.7-2.184-2.7-2.184\nS5.062,3.228,4.957,3.652C4.852,4.076,2.554,8.545,2.554,8.545c0,0.236-1.423,0.473-1.422,0.712c0.017,2.056,0,3.814,0,5.944\nC2.658,14.803,3.501,16,6.762,16c1.064,0,2.369-0.174,3.491-0.358l2.935-0.3c0.51-0.053,0.794-0.572,0.803-1.279\nc-0.004-0.812-0.607-0.942-0.973-1.078c0,0,1.712,0.113,1.564-1.292c0-0.868-0.646-0.989-1.125-1.064h0.34\nc0.656-0.067,1.132-0.653,1.065-1.308C14.795,8.666,14.211,8.189,13.557,8.255z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:score-system:icon-no-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-no-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M2.234,6.302L1.909,6.176C1.31,6.036,0.936,5.437,1.076,4.838 c0.14-0.599,0.738-0.974,1.337-0.833l0.141,0.032C2.151,3.828,1.92,3.341,2.04,2.825C2.18,2.226,2.723,1.84,3.256,1.963l0.337,0.078\nC3.312,1.811,3.174,1.37,3.281,0.907c0.14-0.6,0.63-0.998,1.097-0.89l2.689,0.625c1.048,0.176,2.277,0.425,3.219,0.748\nC13.17,2.378,13.53,3.683,15,3.792c0,2.35-0.018,3.17-0.146,5.256c-0.014,0.224-3.053-0.011-3.123,0.198c0,0-3.387,3.26-3.609,3.602\nC7.9,13.19,6.975,15.826,6.975,15.826s-2.131,0.567-1.728-2.748c0.402-3.318,1.39-3.412,1.39-3.412L6.04,9.471L1.731,8.472\nC1.206,8.348,0.894,7.765,1.033,7.167C1.172,6.567,1.71,6.18,2.234,6.302z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:fields:score-system:show').template = new templates.Template([new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.AliasPathExpression('#field', ['value']), new expressions.AliasPathExpression('#field', ['scoreSystemId'])], void 0, new expressions.ExpressionMeta('if #field.value && #field.scoreSystemId', 'if'))], [
    [new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['overall'], new expressions.ExpressionMeta('if #field.overall', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.FnExpression(['scoreSystemName'], [new expressions.AliasPathExpression('#field', [])], void 0, new expressions.ExpressionMeta('scoreSystemName(#field)'))), new templates.Text(':callout')]), {'optional': true})],
      [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.FnExpression(['scoreSystemName'], [new expressions.AliasPathExpression('#field', [])], void 0, new expressions.ExpressionMeta('scoreSystemName(#field)'))), new templates.Text(':show')]), {'optional': true})]
    ])]
  ])]);
  views.register('l-card:fields:score-system:edit').template = new templates.Template([new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.FnExpression(['scoreSystemName'], [new expressions.AliasPathExpression('#field', [])], void 0, new expressions.ExpressionMeta('scoreSystemName(#field)'))), new templates.Text(':edit')]), {'optional': true})]);
  views.register('l-card:fields:score-system:editor').template = new templates.Template([new templates.ViewInstance('l-card:fields:editor-prompt', {}), new templates.ViewInstance('l-score-thumbs', {'disabled': 'true'})]);
  views.register('l-card:fields:score-system:summary').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-field-summary card-field-summary-score')}, [new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#field', ['value']), new expressions.LiteralExpression('-')], void 0, new expressions.ExpressionMeta('#field.value || \'-\'')))], void 0, false)]);
  views.register('l-card:fields:score-system:callout').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-score-value')}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('icon-'), new templates.DynamicText(new expressions.FnExpression(['scoreToThumbIcon'], [new expressions.AliasPathExpression('#field', ['value']), new expressions.AliasPathExpression('#field', ['scoreSystemId'])], void 0, new expressions.ExpressionMeta('scoreToThumbIcon(#field.value, #field.scoreSystemId)')))]), {'optional': true})], void 0, false)]);
  views.register('l-card:fields:yes-no:show').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#field', ['value']), new expressions.LiteralExpression('yes')], void 0, new expressions.ExpressionMeta('if #field.value === \'yes\'', 'if')), new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#field', ['value']), new expressions.LiteralExpression('no')], void 0, new expressions.ExpressionMeta('else if #field.value === \'no\'', 'else if')), new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('else if #field.value', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Yes')],
    [new templates.Text('No')],
    [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))],
    [new templates.Element('span', {'class': new templates.Attribute('card-value-empty')}, [new templates.Text('Not specified')], void 0, false)]
  ])], void 0, false)]);
  views.register('l-card:fields:yes-no:edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.Element('div', {'class': new templates.Attribute('text')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('if #field.description', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['description'], new expressions.ExpressionMeta('#field.description')))], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.Element('ul', void 0, [new templates.Element('li', void 0, [new templates.Element('label', void 0, [new templates.Element('input', {'disabled': new templates.DynamicAttribute(new expressions.AttributePathExpression('disabled', [], new expressions.ExpressionMeta('@disabled'))), 'type': new templates.Attribute('radio'), 'value': new templates.Attribute('yes'), 'checked': new templates.DynamicAttribute(new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#field', ['value']), new expressions.LiteralExpression('yes')], void 0, new expressions.ExpressionMeta('#field.value === \'yes\'')))}, null, void 0, false), new templates.Text('Yes')], void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('label', void 0, [new templates.Element('input', {'disabled': new templates.DynamicAttribute(new expressions.AttributePathExpression('disabled', [], new expressions.ExpressionMeta('@disabled'))), 'type': new templates.Attribute('radio'), 'value': new templates.Attribute('no'), 'checked': new templates.DynamicAttribute(new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#field', ['value']), new expressions.LiteralExpression('no')], void 0, new expressions.ExpressionMeta('#field.value === \'no\'')))}, null, void 0, false), new templates.Text('No')], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('l-card:fields:yes-no:editor').template = new templates.Template([new templates.ViewInstance('l-card:fields:editor', {})]);
  views.register('l-card:fields:yes-no:summary').template = new templates.Template([new templates.ViewInstance('l-card:fields:summary', {})]);
  views.register('l-card:fields:show').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-key')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-value')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('if #field.value', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))],
    [new templates.Element('span', {'class': new templates.Attribute('card-value-empty')}, [new templates.Text('Not specified')], void 0, false)]
  ])], void 0, false)]);
  views.register('l-card:fields:summary').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-field-summary')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['summaryText'], new expressions.ExpressionMeta('if #field.summaryText', 'if'))], [
    [new templates.Element('span', {'class': new templates.Attribute('card-field-summary-text')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['summaryText'], new expressions.ExpressionMeta('#field.summaryText')))], void 0, false), new templates.Text(' ')]
  ]), new templates.Element('span', {'class': new templates.Attribute('card-field-summary-value')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))], void 0, false)], void 0, false)]);
  views.register('l-card:fields:editor').template = new templates.Template([new templates.ViewInstance('l-card:fields:editor-prompt', {})]);
  views.register('l-card:fields:editor-prompt').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-prompt-edit')}, [new templates.Element('div', {'class': new templates.Attribute('card-prompt-title')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text'))), 'placeholder': new templates.Attribute('Type your question ...')}, null, void 0, false)], void 0, false)], void 0, false), new templates.ViewInstance('l-dropdown', {'buttonClass': 'card-question-type btn-no-style', 'class': 'tall-option caps-option has-icon', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['validFieldTypes'], new expressions.ExpressionMeta('validFieldTypes'))), new expressions.PathExpression(['validFieldTypes'], new expressions.ExpressionMeta('validFieldTypes'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), 'optionContent': new templates.Template([new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#option', ['value']), new expressions.LiteralExpression('text')], void 0, new expressions.ExpressionMeta('if #option.value == \'text\'', 'if')), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#option', ['value']), new expressions.LiteralExpression('textarea')], void 0, new expressions.ExpressionMeta('else if #option.value == \'textarea\'', 'else if')), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#option', ['value']), new expressions.LiteralExpression('multiple-choice')], void 0, new expressions.ExpressionMeta('else if #option.value == \'multiple-choice\'', 'else if')), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#option', ['value']), new expressions.LiteralExpression('multiple-select')], void 0, new expressions.ExpressionMeta('else if #option.value == \'multiple-select\'', 'else if')), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#option', ['value']), new expressions.LiteralExpression('dropdown')], void 0, new expressions.ExpressionMeta('else if #option.value == \'dropdown\'', 'else if')), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#option', ['value']), new expressions.LiteralExpression('score-system')], void 0, new expressions.ExpressionMeta('else if #option.value == \'score-system\'', 'else if'))], [
    [new templates.ViewInstance('l-card:fields:icon-text-input', {})],
    [new templates.ViewInstance('l-card:fields:icon-text-input', {})],
    [new templates.ViewInstance('l-card:fields:icon-radio-button', {})],
    [new templates.ViewInstance('l-card:fields:icon-checkbox', {})],
    [new templates.ViewInstance('l-card:fields:icon-plus', {})],
    [new templates.ViewInstance('l-card:fields:icon-hire', {})]
  ]), new templates.Element('p', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text')))], void 0, false)])})]);
  views.register('l-card:fields:editor-options').template = new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('profile-card-form-field')}, [new templates.EachBlock(new expressions.AliasPathExpression('#field', ['options'], new expressions.ExpressionMeta('each #field.options as #option', 'each', void 0, '#option')), [new templates.Element('li', {'class': new templates.Attribute('form-field-option')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), 'placeholder': new templates.Attribute('Add a choice...')}, null, void 0, false), new templates.Element('button', {'class': new templates.Attribute('btn btn-invisible icon-only remove-choice has-tip'), 'title': new templates.Attribute('Remove')}, [new templates.ViewInstance('l-card:fields:icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['deleteOption'], [new expressions.AliasPathExpression('#field', []), new expressions.AliasPathExpression('#option', [])]))], false)], void 0, false)])], void 0, false), new templates.Element('a', {'class': new templates.Attribute('link secondary has-icon label multiple-choice-add-option'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('l-card:fields:icon-plus', {}), new templates.Text('Add choice')], [new templates.ElementOn('click', new expressions.FnExpression(['addOption'], [new expressions.AliasPathExpression('#field', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-card:layouts:profile:icon-edit:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-edit')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14.5,16 L1.5,16 C1.225,16 1,15.775 1,15.5 L1,14.5 C1,14.225 1.225,14 1.5,14 L14.5,14 C14.775,14 15,14.225 15,14.5 L15,15.5 C15,15.775 14.775,16 14.5,16 Z M6.62946319,12.4853463 C6.80246319,12.2703463 6.78646319,11.9323463 6.59646319,11.7343463 L5.06946319,10.1423463 C4.87846319,9.9443463 4.57846319,9.9543463 4.40046319,10.1633463 L4.30446319,10.2773463 C4.12746319,10.4873463 3.82746319,10.8233463 3.63946319,11.0233463 L2.10546319,12.6533463 C1.91746319,12.8533463 1.98746319,13.0173463 2.26246319,13.0173463 L5.70346319,13.0173463 C5.97746319,13.0193463 6.34446319,12.8433463 6.51546319,12.6283463 L6.62946319,12.4853463 Z M13.434,1.33835995 L13.294,1.45335995 C13.29,1.45635995 6,8.74635995 6,8.74635995 L8.221,10.96636 L15.512,3.67635995 L15.642,3.54635995 C16.115,2.91735995 16.08,2.02335995 15.512,1.45635995 C14.944,0.888359952 14.051,0.852359952 13.434,1.33835995 Z M13.434,1.33835995'), 'fill': new templates.Attribute('#D9D9D9')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:profile:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:profile:icon-secret:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-secret')])), 'title': new templates.DynamicAttribute(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title'))), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12.909,5.085C12.909,2.282,10.707,0,8,0\nC5.293,0,3.091,2.281,3.091,5.085v1.601H2V16h12V6.686h-1.091V5.085z M10.728,6.612H5.272V5.029c0-1.498,1.25-2.762,2.728-2.762\nc1.479,0,2.728,1.265,2.728,2.762V6.612L10.728,6.612z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:profile:icon-calendar:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.3333333,1.94117647 L5.66666667,1.94117647 L5.66666667,-0.0588235294 L2.86666667,-0.0588235294 L2.86666667,1.94117647 L2.06419881,1.94117647 C1.47645804,1.94117647 1,2.40698152 1,2.99345189 L1,14.8889011 C1,15.4700567 1.48191169,15.9411765 2.0753102,15.9411765 L13.9246898,15.9411765 C14.5185672,15.9411765 15,15.4753714 15,14.8889011 L15,2.99345189 C15,2.41229622 14.5289612,1.94117647 13.9358012,1.94117647 L13.1333333,1.94117647 L13.1333333,-0.0588235294 L10.3333333,-0.0588235294 L10.3333333,1.94117647 Z M1.93333333,6.01135164 C1.93333333,5.42031021 2.40897438,4.94117647 3.01008573,4.94117647 L12.9899143,4.94117647 C13.5845882,4.94117647 14.0666667,5.42349726 14.0666667,6.01135164 L14.0666667,13.8710013 C14.0666667,14.4620427 13.5910256,14.9411765 12.9899143,14.9411765 L3.01008573,14.9411765 C2.4154118,14.9411765 1.93333333,14.4588557 1.93333333,13.8710013 L1.93333333,6.01135164 Z M10.3333333,5.9411763 L10.3333333,7.9411763 L8.4666666,7.9411763 L8.4666666,5.9411763 L10.3333333,5.9411763 Z M13.1333333,5.9411763 L13.1333333,7.9411763 L11.2666666,7.9411763 L11.2666666,5.9411763 L13.1333333,5.9411763 Z M4.73333326,8.9411763 L4.73333326,10.9411763 L2.8666666,10.9411763 L2.8666666,8.9411763 L4.73333326,8.9411763 Z M7.53333326,8.9411763 L7.53333326,10.9411763 L5.6666666,10.9411763 L5.6666666,8.9411763 L7.53333326,8.9411763 Z M10.3333333,8.9411763 L10.3333333,10.9411763 L8.4666666,10.9411763 L8.4666666,8.9411763 L10.3333333,8.9411763 Z M13.1333333,8.9411763 L13.1333333,10.9411763 L11.2666666,10.9411763 L11.2666666,8.9411763 Z M7.53333326,5.9411763 L7.53333326,7.9411763 L5.6666666,7.9411763 L5.6666666,5.9411763 Z M12.2,2.94117647 L11.2666667,2.94117647 L11.2666667,0.941176471 L12.2,0.941176471 L12.2,2.94117647 Z M4.73333333,2.94117647 L3.8,2.94117647 L3.8,0.941176471 L4.73333333,0.941176471 L4.73333333,2.94117647 Z M4.73333326,11.9411772 L4.73333326,13.9411772 L2.8666666,13.9411772 L2.8666666,11.9411772 L4.73333326,11.9411772 Z M7.53333326,11.9411772 L7.53333326,13.9411772 L5.6666666,13.9411772 L5.6666666,11.9411772 L7.53333326,11.9411772 Z M10.3333333,11.9411772 L10.3333333,13.9411772 L8.4666666,13.9411772 L8.4666666,11.9411772 L10.3333333,11.9411772 Z M10.3333333,11.9411772'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:profile:icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:profile:index').template = new templates.Template([new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-card '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('!U', [new expressions.PathExpression(['expand'])]), new expressions.OperatorExpression('!U', [new expressions.PathExpression(['edit'])])], void 0, new expressions.ExpressionMeta('if !expand && !edit', 'if'))], [
    [new templates.Text('card-compact')]
  ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['card', 'visibleTo'], new expressions.ExpressionMeta('if card.visibleTo', 'if'))], [
    [new templates.Text('secret')]
  ]), new templates.Text('\n')]))}, [new templates.Element('div', {'class': new templates.Attribute('history-card-header')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['card', 'type']), new expressions.LiteralExpression('note')], void 0, new expressions.ExpressionMeta('if card.type === \'note\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('note-title-container')}, [new templates.ViewInstance('l-identicon', {'class': 'large', 'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), void 0, new expressions.ExpressionMeta('#root.users_base[card.userId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), void 0, new expressions.ExpressionMeta('#root.users_base[card.userId]')))}), new templates.Element('div', {'class': new templates.Attribute('story-title')}, [new templates.Text('Added a note')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-author')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), ['name'], new expressions.ExpressionMeta('#root.users_base[card.userId].name')))], void 0, false)], void 0, false)],
    [new templates.Element('span', {'class': new templates.Attribute('card-title')}, [new templates.DynamicText(new expressions.PathExpression(['card', 'text'], new expressions.ExpressionMeta('card.text')))], void 0, false)]
  ]), new templates.Element('span', {'class': new templates.Attribute('card-info')}, [new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('card-info-edit '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['card', 'type']), new expressions.LiteralExpression('note')], void 0, new expressions.ExpressionMeta('if card.type === \'note\'', 'if'))], [
    [new templates.Text('hidden')]
  ])])), 'href': new templates.Attribute('#')}, [new templates.ConditionalBlock([new expressions.PathExpression(['edit'], new expressions.ExpressionMeta('if edit', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('l-card:layouts:profile:icon-edit', {'class': 'opacityHidden'}), new templates.Text(' Cancel')],
    [new templates.ViewInstance('l-card:layouts:profile:icon-edit', {}), new templates.Text(' Edit')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['edit'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('card-info-delete'), 'data-type': new templates.Attribute('card'), 'data-id': new templates.DynamicAttribute(new expressions.PathExpression(['card', 'id'], new expressions.ExpressionMeta('card.id'))), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('l-card:layouts:profile:icon-delete', {}), new templates.Text('Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['parent', 'deleteConfirmPopup', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('card-hide '), new templates.ConditionalBlock([new expressions.PathExpression(['card', 'visibleTo'], new expressions.ExpressionMeta('if card.visibleTo', 'if'))], [
    [new templates.Text('active')]
  ])])), 'href': new templates.Attribute('#')}, [new templates.ConditionalBlock([new expressions.PathExpression(['card', 'visibleTo'], new expressions.ExpressionMeta('if card.visibleTo', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('secret-wrapper has-tip'), 'title': new templates.DynamicAttribute(new templates.Template([new templates.Text('Visible only to '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), ['name'], new expressions.ExpressionMeta('#root.users_base[card.userId].name'))), new templates.Text(' and admins')]))}, [new templates.Element('span', {'class': new templates.Attribute('card-settings-label')}, [new templates.Text('Secret')], void 0, false), new templates.ViewInstance('l-card:layouts:profile:icon-secret', {})], void 0, false)],
    [new templates.ViewInstance('l-card:layouts:profile:icon-secret', {'class': 'has-tip', 'title': 'Make secret'})]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['hide'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.OperatorExpression('||', [new expressions.PathExpression(['card', 'interviewDate']), new expressions.PathExpression(['card', 'completedAt'])]), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('timeDayDate')], void 0, new expressions.ExpressionMeta('formatTime(card.interviewDate || card.completedAt, #root._session.timezoneName, \'timeDayDate\')')))], void 0, false)], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['edit'], new expressions.ExpressionMeta('if edit', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('ul', {'class': new templates.Attribute('history-card-fields edit')}, [new templates.EachBlock(new expressions.PathExpression(['card', 'fields'], new expressions.ExpressionMeta('each card.fields as #field', 'each', void 0, '#field')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('profile-card-form-field field-type-'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type')))]))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':edit')]), {'optional': true})], void 0, false)]), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['card', 'type']), new expressions.LiteralExpression('interview')], void 0, new expressions.ExpressionMeta('if card.type === \'interview\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('button', {'class': new templates.Attribute('submit profile-card-form-submit')}, [new templates.Text('Submit')], [new templates.ElementOn('click', new expressions.FnExpression(['submit'], []))], false)],
      [new templates.Element('button', {'class': new templates.Attribute('submit profile-card-form-submit')}, [new templates.Text('Done')], [new templates.ElementOn('click', new expressions.FnExpression(['edit'], []))], false)]
    ])], void 0, false)], void 0, false)],
    [new templates.Element('ul', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-card-fields '), new templates.DynamicText(new expressions.PathExpression(['card', 'type'], new expressions.ExpressionMeta('card.type'))), new templates.Text('-card-fields')]))}, [new templates.ConditionalBlock([new expressions.PathExpression(['card', 'userId'], new expressions.ExpressionMeta('if card.userId', 'if'))], [
      [new templates.Element('li', {'class': new templates.Attribute('card-status')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('!==', [new expressions.PathExpression(['card', 'type']), new expressions.LiteralExpression('note')], void 0, new expressions.ExpressionMeta('if card.type !== \'note\'', 'if'))], [
        [new templates.ViewInstance('l-identicon', {'class': 'large has-tip', 'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), void 0, new expressions.ExpressionMeta('#root.users_base[card.userId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), void 0, new expressions.ExpressionMeta('#root.users_base[card.userId]')))}), new templates.Element('span', {'class': new templates.Attribute('card-author')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), ['name'], new expressions.ExpressionMeta('#root.users_base[card.userId].name')))], void 0, false)]
      ]), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.PathExpression(['card', 'completedAt'])], void 0, new expressions.ExpressionMeta('if !card.completedAt', 'if'))], [
        [new templates.Element('div', {'class': new templates.Attribute('card-draft-notification')}, [new templates.Text('In progress - feedback not yet submitted')], void 0, false)]
      ])], void 0, false)]
    ]), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['card', 'type']), new expressions.LiteralExpression('interview')], void 0, new expressions.ExpressionMeta('if card.type === \'interview\'', 'if'))], [
      [new templates.Element('li', void 0, [new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['interviews']), new expressions.PathExpression(['card', 'interviewId']), void 0, new expressions.ExpressionMeta('if #root.interviews[card.interviewId] as #interview', 'if', void 0, '#interview'))], [
        [new templates.Element('ul', {'class': new templates.Attribute('card-interview-info')}, [new templates.Element('li', void 0, [new templates.ViewInstance('l-card:layouts:profile:icon-calendar', {}), new templates.Text(' '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#interview', ['date']), new expressions.AliasPathExpression('#interview', ['timezoneName']), new expressions.LiteralExpression('ddd')], void 0, new expressions.ExpressionMeta('formatTime(#interview.date, #interview.timezoneName, \'ddd\')'))), new templates.Text(' '), new templates.Element('span', {'class': new templates.Attribute('numbers')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#interview', ['date']), new expressions.AliasPathExpression('#interview', ['timezoneName']), new expressions.LiteralExpression('compactDateTime')], void 0, new expressions.ExpressionMeta('formatTime(#interview.date, #interview.timezoneName, \'compactDateTime\')')))], void 0, false), new templates.Text(' '), new templates.Element('span', {'class': new templates.Attribute('timezone has-tip'), 'title': new templates.DynamicAttribute(new expressions.FnExpression(['displayTimezone'], [new expressions.AliasPathExpression('#interview', ['timezoneName'])], void 0, new expressions.ExpressionMeta('displayTimezone(#interview.timezoneName)')))}, [new templates.DynamicText(new expressions.FnExpression(['displayTimezoneAbbreviation'], [new expressions.AliasPathExpression('#interview', ['timezoneName'])], void 0, new expressions.ExpressionMeta('displayTimezoneAbbreviation(#interview.timezoneName)')))], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#interview', ['location'], new expressions.ExpressionMeta('if #interview.location', 'if'))], [
          [new templates.Element('li', void 0, [new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))], void 0, false)]
        ]), new templates.ConditionalBlock([new expressions.OperatorExpression('>', [new expressions.AliasPathExpression('#interview', ['interviewers', 'length']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('if #interview.interviewers.length > 1', 'if'))], [
          [new templates.Element('li', {'class': new templates.Attribute('other-interviewers has-tip'), 'title': new templates.DynamicAttribute(new expressions.FnExpression(['interviewerNames'], [new expressions.AliasPathExpression('#interview', ['interviewers']), new expressions.PathExpression(['card', 'userId'])], void 0, new expressions.ExpressionMeta('interviewerNames(#interview.interviewers, card.userId)')))}, [new templates.ViewInstance('l-card:layouts:profile:icon-plus', {}), new templates.EachBlock(new expressions.AliasPathExpression('#interview', ['interviewers'], new expressions.ExpressionMeta('each #interview.interviewers as #interviewer', 'each', void 0, '#interviewer')), [new templates.ConditionalBlock([new expressions.OperatorExpression('!==', [new expressions.AliasPathExpression('#interviewer', ['id']), new expressions.PathExpression(['card', 'userId'])], void 0, new expressions.ExpressionMeta('if #interviewer.id !== card.userId', 'if'))], [
            [new templates.ViewInstance('l-identicon', {'noTip': 'true', 'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#interviewer', ['id']), void 0, new expressions.ExpressionMeta('#root.users_base[#interviewer.id]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#interviewer', ['id']), void 0, new expressions.ExpressionMeta('#root.users_base[#interviewer.id]')))})]
          ])])], void 0, false)]
        ])], void 0, false)]
      ])], void 0, false)]
    ]), new templates.EachBlock(new expressions.PathExpression(['card', 'fields'], new expressions.ExpressionMeta('each card.fields as #field', 'each', void 0, '#field')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('card-field '), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text('-field '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['overall'], new expressions.ExpressionMeta('if #field.overall', 'if'))], [
      [new templates.Text('overall')]
    ])]))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':show')]), {'optional': true})], void 0, false)])], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('card-footer')}, [new templates.Element('span', void 0, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Expand')], [new templates.ElementOn('click', new expressions.FnExpression(['expand'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('l-card:layouts:share:icon-edit:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-edit')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14.5,16 L1.5,16 C1.225,16 1,15.775 1,15.5 L1,14.5 C1,14.225 1.225,14 1.5,14 L14.5,14 C14.775,14 15,14.225 15,14.5 L15,15.5 C15,15.775 14.775,16 14.5,16 Z M6.62946319,12.4853463 C6.80246319,12.2703463 6.78646319,11.9323463 6.59646319,11.7343463 L5.06946319,10.1423463 C4.87846319,9.9443463 4.57846319,9.9543463 4.40046319,10.1633463 L4.30446319,10.2773463 C4.12746319,10.4873463 3.82746319,10.8233463 3.63946319,11.0233463 L2.10546319,12.6533463 C1.91746319,12.8533463 1.98746319,13.0173463 2.26246319,13.0173463 L5.70346319,13.0173463 C5.97746319,13.0193463 6.34446319,12.8433463 6.51546319,12.6283463 L6.62946319,12.4853463 Z M13.434,1.33835995 L13.294,1.45335995 C13.29,1.45635995 6,8.74635995 6,8.74635995 L8.221,10.96636 L15.512,3.67635995 L15.642,3.54635995 C16.115,2.91735995 16.08,2.02335995 15.512,1.45635995 C14.944,0.888359952 14.051,0.852359952 13.434,1.33835995 Z M13.434,1.33835995'), 'fill': new templates.Attribute('#D9D9D9')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:share:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:share:icon-secret:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-secret')])), 'title': new templates.DynamicAttribute(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title'))), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12.909,5.085C12.909,2.282,10.707,0,8,0\nC5.293,0,3.091,2.281,3.091,5.085v1.601H2V16h12V6.686h-1.091V5.085z M10.728,6.612H5.272V5.029c0-1.498,1.25-2.762,2.728-2.762\nc1.479,0,2.728,1.265,2.728,2.762V6.612L10.728,6.612z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:share:icon-calendar:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.3333333,1.94117647 L5.66666667,1.94117647 L5.66666667,-0.0588235294 L2.86666667,-0.0588235294 L2.86666667,1.94117647 L2.06419881,1.94117647 C1.47645804,1.94117647 1,2.40698152 1,2.99345189 L1,14.8889011 C1,15.4700567 1.48191169,15.9411765 2.0753102,15.9411765 L13.9246898,15.9411765 C14.5185672,15.9411765 15,15.4753714 15,14.8889011 L15,2.99345189 C15,2.41229622 14.5289612,1.94117647 13.9358012,1.94117647 L13.1333333,1.94117647 L13.1333333,-0.0588235294 L10.3333333,-0.0588235294 L10.3333333,1.94117647 Z M1.93333333,6.01135164 C1.93333333,5.42031021 2.40897438,4.94117647 3.01008573,4.94117647 L12.9899143,4.94117647 C13.5845882,4.94117647 14.0666667,5.42349726 14.0666667,6.01135164 L14.0666667,13.8710013 C14.0666667,14.4620427 13.5910256,14.9411765 12.9899143,14.9411765 L3.01008573,14.9411765 C2.4154118,14.9411765 1.93333333,14.4588557 1.93333333,13.8710013 L1.93333333,6.01135164 Z M10.3333333,5.9411763 L10.3333333,7.9411763 L8.4666666,7.9411763 L8.4666666,5.9411763 L10.3333333,5.9411763 Z M13.1333333,5.9411763 L13.1333333,7.9411763 L11.2666666,7.9411763 L11.2666666,5.9411763 L13.1333333,5.9411763 Z M4.73333326,8.9411763 L4.73333326,10.9411763 L2.8666666,10.9411763 L2.8666666,8.9411763 L4.73333326,8.9411763 Z M7.53333326,8.9411763 L7.53333326,10.9411763 L5.6666666,10.9411763 L5.6666666,8.9411763 L7.53333326,8.9411763 Z M10.3333333,8.9411763 L10.3333333,10.9411763 L8.4666666,10.9411763 L8.4666666,8.9411763 L10.3333333,8.9411763 Z M13.1333333,8.9411763 L13.1333333,10.9411763 L11.2666666,10.9411763 L11.2666666,8.9411763 Z M7.53333326,5.9411763 L7.53333326,7.9411763 L5.6666666,7.9411763 L5.6666666,5.9411763 Z M12.2,2.94117647 L11.2666667,2.94117647 L11.2666667,0.941176471 L12.2,0.941176471 L12.2,2.94117647 Z M4.73333333,2.94117647 L3.8,2.94117647 L3.8,0.941176471 L4.73333333,0.941176471 L4.73333333,2.94117647 Z M4.73333326,11.9411772 L4.73333326,13.9411772 L2.8666666,13.9411772 L2.8666666,11.9411772 L4.73333326,11.9411772 Z M7.53333326,11.9411772 L7.53333326,13.9411772 L5.6666666,13.9411772 L5.6666666,11.9411772 L7.53333326,11.9411772 Z M10.3333333,11.9411772 L10.3333333,13.9411772 L8.4666666,13.9411772 L8.4666666,11.9411772 L10.3333333,11.9411772 Z M10.3333333,11.9411772'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:share:icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:share:index').template = new templates.Template([new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-card\nhistory-card-note\n'), new templates.ConditionalBlock([new expressions.PathExpression(['card', 'visibleTo'], new expressions.ExpressionMeta('if card.visibleTo', 'if'))], [
    [new templates.Text('secret')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('history-card-header')}, [new templates.Element('span', {'class': new templates.Attribute('card-info')}, [new templates.Element('a', {'class': new templates.Attribute('card-info-edit'), 'href': new templates.Attribute('#')}, [new templates.ConditionalBlock([new expressions.PathExpression(['edit'], new expressions.ExpressionMeta('if edit', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('l-card:layouts:share:icon-edit', {'class': 'opacityHidden'}), new templates.Text(' Cancel')],
    [new templates.ViewInstance('l-card:layouts:share:icon-edit', {}), new templates.Text(' Edit')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['edit'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('card-info-delete'), 'data-type': new templates.Attribute('card'), 'data-id': new templates.DynamicAttribute(new expressions.PathExpression(['card', 'id'], new expressions.ExpressionMeta('card.id'))), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('l-card:layouts:share:icon-delete', {}), new templates.Text('Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['parent', 'deleteConfirmPopup', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('card-hide '), new templates.ConditionalBlock([new expressions.PathExpression(['card', 'visibleTo'], new expressions.ExpressionMeta('if card.visibleTo', 'if'))], [
    [new templates.Text('active')]
  ])])), 'href': new templates.Attribute('#')}, [new templates.ConditionalBlock([new expressions.PathExpression(['card', 'visibleTo'], new expressions.ExpressionMeta('if card.visibleTo', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('secret-wrapper has-tip'), 'title': new templates.DynamicAttribute(new templates.Template([new templates.Text('Visible only to '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), ['name'], new expressions.ExpressionMeta('#root.users_base[card.userId].name'))), new templates.Text(' and admins')]))}, [new templates.Element('span', {'class': new templates.Attribute('card-settings-label')}, [new templates.Text('Secret')], void 0, false), new templates.ViewInstance('l-card:layouts:share:icon-secret', {})], void 0, false)],
    [new templates.ViewInstance('l-card:layouts:share:icon-secret', {'class': 'has-tip', 'title': 'Make secret'})]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['hide'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.OperatorExpression('||', [new expressions.PathExpression(['card', 'interviewDate']), new expressions.PathExpression(['card', 'completedAt'])]), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('timeDayDate')], void 0, new expressions.ExpressionMeta('formatTime(card.interviewDate || card.completedAt, #root._session.timezoneName, \'timeDayDate\')')))], void 0, false)], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['edit'], new expressions.ExpressionMeta('if edit', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('ul', {'class': new templates.Attribute('history-card-fields edit')}, [new templates.EachBlock(new expressions.PathExpression(['card', 'fields'], new expressions.ExpressionMeta('each card.fields as #field', 'each', void 0, '#field')), [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#field', ['userId']), new expressions.AliasPathExpression('#root', ['_session', 'userId'])], void 0, new expressions.ExpressionMeta('if #field.userId === #root._session.userId', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('profile-card-form-field field-type-'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type')))]))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':edit')]), {'optional': true})], void 0, false)],
      [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('card-field '), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text('-field '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['overall'], new expressions.ExpressionMeta('if #field.overall', 'if'))], [
        [new templates.Text('overall')]
      ])]))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':show')]), {'optional': true})], void 0, false)]
    ])])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('button', {'class': new templates.Attribute('submit profile-card-form-submit')}, [new templates.Text('Done')], [new templates.ElementOn('click', new expressions.FnExpression(['edit'], []))], false)], void 0, false)],
    [new templates.Element('ul', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-card-fields '), new templates.DynamicText(new expressions.PathExpression(['card', 'type'], new expressions.ExpressionMeta('card.type'))), new templates.Text('-card-fields')]))}, [new templates.EachBlock(new expressions.PathExpression(['card', 'fields'], new expressions.ExpressionMeta('each card.fields as #field', 'each', void 0, '#field')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('card-field '), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text('-field '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['overall'], new expressions.ExpressionMeta('if #field.overall', 'if'))], [
      [new templates.Text('overall')]
    ])]))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':show')]), {'optional': true})], void 0, false)])], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('card-footer')}, [new templates.Element('span', void 0, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Expand')], [new templates.ElementOn('click', new expressions.FnExpression(['expand'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('note-comment-box')}, [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.PathExpression(['submitButtonVisible'], new expressions.ExpressionMeta('unless submitButtonVisible', 'unless'))], [
    [new templates.Text('fade-identicon')]
  ]))}, [new templates.ViewInstance('l-identicon', {'class': 'no-tip large ', 'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'user'], new expressions.ExpressionMeta('#root._session.user'))), new expressions.AliasPathExpression('#root', ['_session', 'user'], new expressions.ExpressionMeta('#root._session.user')))})], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.PathExpression(['submitButtonVisible'], new expressions.ExpressionMeta('if submitButtonVisible', 'if'))], [
    [new templates.Text('expand-textarea')]
  ]))}, [new templates.ViewInstance('l-note-textarea', {'class': 'note-reply-input classic-input expanded', 'users': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pendingComment', 'value'], new expressions.ExpressionMeta('pendingComment.value'))), new expressions.PathExpression(['pendingComment', 'value'], new expressions.ExpressionMeta('pendingComment.value'))), 'placeholder': 'Write a reply - @mention to email a coworker'}, [new templates.MarkupAs(['comment']), new templates.ComponentOn('focus', new expressions.FnExpression(['showSubmitButton'], [])), new templates.ComponentOn('submit', new expressions.FnExpression(['addShareComment'], [new expressions.PathExpression(['card', 'id'])]))])], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['submitButtonVisible'], new expressions.ExpressionMeta('if submitButtonVisible', 'if'))], [
    [new templates.ConditionalBlock([new expressions.PathExpression(['showRating'], new expressions.ExpressionMeta('if showRating', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.ViewInstance('l-score-thumbs', {'class': 'light', 'score': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pendingComment', 'score'], new expressions.ExpressionMeta('pendingComment.score'))), new expressions.PathExpression(['pendingComment', 'score'], new expressions.ExpressionMeta('pendingComment.score')))})],
      [new templates.Element('a', {'class': new templates.Attribute('add-rating link'), 'href': new templates.Attribute('#')}, [new templates.Text('Add rating')], [new templates.ElementOn('click', new expressions.FnExpression(['toggleRating'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
    ]), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Add note'), new templates.Element('small', void 0, [new templates.Text('(⌘+Enter)')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['addShareComment'], [new expressions.PathExpression(['card', 'id'])]))], false)]
  ])], void 0, false)]);
  views.register('l-card:layouts:callout:icon-edit:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-edit')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14.5,16 L1.5,16 C1.225,16 1,15.775 1,15.5 L1,14.5 C1,14.225 1.225,14 1.5,14 L14.5,14 C14.775,14 15,14.225 15,14.5 L15,15.5 C15,15.775 14.775,16 14.5,16 Z M6.62946319,12.4853463 C6.80246319,12.2703463 6.78646319,11.9323463 6.59646319,11.7343463 L5.06946319,10.1423463 C4.87846319,9.9443463 4.57846319,9.9543463 4.40046319,10.1633463 L4.30446319,10.2773463 C4.12746319,10.4873463 3.82746319,10.8233463 3.63946319,11.0233463 L2.10546319,12.6533463 C1.91746319,12.8533463 1.98746319,13.0173463 2.26246319,13.0173463 L5.70346319,13.0173463 C5.97746319,13.0193463 6.34446319,12.8433463 6.51546319,12.6283463 L6.62946319,12.4853463 Z M13.434,1.33835995 L13.294,1.45335995 C13.29,1.45635995 6,8.74635995 6,8.74635995 L8.221,10.96636 L15.512,3.67635995 L15.642,3.54635995 C16.115,2.91735995 16.08,2.02335995 15.512,1.45635995 C14.944,0.888359952 14.051,0.852359952 13.434,1.33835995 Z M13.434,1.33835995'), 'fill': new templates.Attribute('#D9D9D9')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:callout:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:callout:icon-secret:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-secret')])), 'title': new templates.DynamicAttribute(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title'))), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12.909,5.085C12.909,2.282,10.707,0,8,0\nC5.293,0,3.091,2.281,3.091,5.085v1.601H2V16h12V6.686h-1.091V5.085z M10.728,6.612H5.272V5.029c0-1.498,1.25-2.762,2.728-2.762\nc1.479,0,2.728,1.265,2.728,2.762V6.612L10.728,6.612z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:callout:icon-calendar:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.3333333,1.94117647 L5.66666667,1.94117647 L5.66666667,-0.0588235294 L2.86666667,-0.0588235294 L2.86666667,1.94117647 L2.06419881,1.94117647 C1.47645804,1.94117647 1,2.40698152 1,2.99345189 L1,14.8889011 C1,15.4700567 1.48191169,15.9411765 2.0753102,15.9411765 L13.9246898,15.9411765 C14.5185672,15.9411765 15,15.4753714 15,14.8889011 L15,2.99345189 C15,2.41229622 14.5289612,1.94117647 13.9358012,1.94117647 L13.1333333,1.94117647 L13.1333333,-0.0588235294 L10.3333333,-0.0588235294 L10.3333333,1.94117647 Z M1.93333333,6.01135164 C1.93333333,5.42031021 2.40897438,4.94117647 3.01008573,4.94117647 L12.9899143,4.94117647 C13.5845882,4.94117647 14.0666667,5.42349726 14.0666667,6.01135164 L14.0666667,13.8710013 C14.0666667,14.4620427 13.5910256,14.9411765 12.9899143,14.9411765 L3.01008573,14.9411765 C2.4154118,14.9411765 1.93333333,14.4588557 1.93333333,13.8710013 L1.93333333,6.01135164 Z M10.3333333,5.9411763 L10.3333333,7.9411763 L8.4666666,7.9411763 L8.4666666,5.9411763 L10.3333333,5.9411763 Z M13.1333333,5.9411763 L13.1333333,7.9411763 L11.2666666,7.9411763 L11.2666666,5.9411763 L13.1333333,5.9411763 Z M4.73333326,8.9411763 L4.73333326,10.9411763 L2.8666666,10.9411763 L2.8666666,8.9411763 L4.73333326,8.9411763 Z M7.53333326,8.9411763 L7.53333326,10.9411763 L5.6666666,10.9411763 L5.6666666,8.9411763 L7.53333326,8.9411763 Z M10.3333333,8.9411763 L10.3333333,10.9411763 L8.4666666,10.9411763 L8.4666666,8.9411763 L10.3333333,8.9411763 Z M13.1333333,8.9411763 L13.1333333,10.9411763 L11.2666666,10.9411763 L11.2666666,8.9411763 Z M7.53333326,5.9411763 L7.53333326,7.9411763 L5.6666666,7.9411763 L5.6666666,5.9411763 Z M12.2,2.94117647 L11.2666667,2.94117647 L11.2666667,0.941176471 L12.2,0.941176471 L12.2,2.94117647 Z M4.73333333,2.94117647 L3.8,2.94117647 L3.8,0.941176471 L4.73333333,0.941176471 L4.73333333,2.94117647 Z M4.73333326,11.9411772 L4.73333326,13.9411772 L2.8666666,13.9411772 L2.8666666,11.9411772 L4.73333326,11.9411772 Z M7.53333326,11.9411772 L7.53333326,13.9411772 L5.6666666,13.9411772 L5.6666666,11.9411772 L7.53333326,11.9411772 Z M10.3333333,11.9411772 L10.3333333,13.9411772 L8.4666666,13.9411772 L8.4666666,11.9411772 L10.3333333,11.9411772 Z M10.3333333,11.9411772'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:callout:icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-card:layouts:callout:index').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-callout')}, [new templates.ConditionalBlock([new expressions.FnExpression(['cardScoreField'], [new expressions.PathExpression(['card'])], void 0, new expressions.ExpressionMeta('if cardScoreField(card)', 'if'))], [
    [new templates.Block(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('with this as #field', 'with', void 0, '#field')), [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':callout')]), {'optional': true}), new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), void 0, new expressions.ExpressionMeta('#root.users_base[card.userId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['card', 'userId']), void 0, new expressions.ExpressionMeta('#root.users_base[card.userId]')))})])]
  ])], void 0, false)]);
  views.register('l-card:layouts:popup:index').template = new templates.Template([new templates.Element('form', void 0, [new templates.Element('ul', {'class': new templates.Attribute('history-card-fields edit')}, [new templates.EachBlock(new expressions.PathExpression(['card', 'fields'], new expressions.ExpressionMeta('each card.fields as #field', 'each', void 0, '#field')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('profile-card-form-field field-type-'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type')))]))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':edit')]), {'optional': true})], void 0, false)])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['card', 'type']), new expressions.LiteralExpression('interview')], void 0, new expressions.ExpressionMeta('if card.type == "interview"', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('button', {'class': new templates.Attribute('submit'), 'type': new templates.Attribute('submit')}, [new templates.Text('Submit')], [new templates.ElementOn('click', new expressions.FnExpression(['submit'], []))], false)],
    [new templates.Element('button', {'class': new templates.Attribute('submit'), 'type': new templates.Attribute('submit')}, [new templates.Text('Done')], void 0, false)]
  ])], void 0, false)], [new templates.ElementOn('submit', new expressions.FnExpression(['parent', 'close'], [])), new templates.ElementOn('submit', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-card:layouts:form:index').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-form')}, [new templates.Element('form', void 0, [new templates.Element('ul', {'class': new templates.Attribute('history-card-fields')}, [new templates.EachBlock(new expressions.PathExpression(['card', 'fields'], new expressions.ExpressionMeta('each card.fields as #field', 'each', void 0, '#field')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('profile-card-form-field field-type-'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type')))]))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':edit')]), {'optional': true})], void 0, false)])], void 0, false), new templates.Element('button', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['disabled'], new expressions.ExpressionMeta('disabled'))), new templates.Text(' submit-large')])), 'type': new templates.Attribute('submit'), 'disabled': new templates.DynamicAttribute(new expressions.PathExpression(['disabled'], new expressions.ExpressionMeta('disabled')))}, [new templates.Text('Submit feedback')], void 0, false)], [new templates.ElementOn('submit', new expressions.FnExpression(['submit'], [])), new templates.ElementOn('submit', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]);
  views.register('l-card:layouts:vanilla:index').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-form')}, [new templates.Element('ul', {'class': new templates.Attribute('history-card-fields edit')}, [new templates.EachBlock(new expressions.PathExpression(['card', 'fields'], new expressions.ExpressionMeta('each card.fields as #field', 'each', void 0, '#field')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('profile-card-form-field field-type-'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type')))]))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':edit')]), {'optional': true})], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('l-card:layouts:summary:index').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-summary')}, [new templates.EachBlock(new expressions.PathExpression(['card', 'fields'], new expressions.ExpressionMeta('each card.fields as #field', 'each', void 0, '#field')), [new templates.ConditionalBlock([new expressions.AliasPathExpression('#field', ['isSummary'], new expressions.ExpressionMeta('if #field.isSummary', 'if'))], [
    [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':summary')]), {'optional': true})]
  ])])], void 0, false)]);
  views.register('l-card:layouts:score-summary:index').template = new templates.Template([new templates.ConditionalBlock([new expressions.FnExpression(['cardScoreField'], [new expressions.PathExpression(['card'])], void 0, new expressions.ExpressionMeta('if cardScoreField(card)', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ConditionalBlock([new expressions.RelativePathExpression(['value'], new expressions.ExpressionMeta('if this.value', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Block(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('with this as #field', 'with', void 0, '#field')), [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':summary')]), {'optional': true})])],
      [new templates.Text('—')]
    ])],
    [new templates.Text('—')]
  ])]);
  views.register('l-card:layouts:extension-refer:index').template = new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('history-card-fields edit')}, [new templates.EachBlock(new expressions.PathExpression(['card', 'fields'], new expressions.ExpressionMeta('each card.fields as #field', 'each', void 0, '#field')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('profile-card-form-field field-type-'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type')))]))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':edit')]), {'optional': true})], void 0, false)])], void 0, false)]);
  views.register('l-card:index', null, {'element': 'l-card'}).template = new templates.Template([new templates.Comment('l-card:index', [new templates.ComponentMarker()]), new templates.Element('div', void 0, [new templates.ConditionalBlock([new expressions.PathExpression(['layout'], new expressions.ExpressionMeta('if layout', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:layouts:'), new templates.DynamicText(new expressions.PathExpression(['layout'], new expressions.ExpressionMeta('layout')))]), {'optional': true})],
    [new templates.ViewInstance('l-card:layouts:profile', {})]
  ])], [new templates.MarkupAs(['cardContainer'])], false)]);
  views.register('l-dropdown:icon-caret-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-down')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.6741598,11.3413318 L8.03952616,11.7324251 L8.40489252,11.3413318 L14.8653664,4.42595055 L14.1346336,3.74328687 L7.6741598,10.6586682 L8.40489252,10.6586682 L1.86536636,3.65866816 L1.13463364,4.34133184 L7.6741598,11.3413318 Z M7.6741598,11.3413318'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-dropdown:index', null, {'attributes': 'label tip option-content', 'arrays': 'option/options', 'element': 'l-dropdown'}).template = new templates.Template([new templates.Comment('l-dropdown:index', [new templates.ComponentMarker()]), new templates.Element('button', {'type': new templates.Attribute('button'), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('dropdown-button btn '), new templates.DynamicText(new expressions.AttributePathExpression('buttonClass', [], new expressions.ExpressionMeta('@buttonClass')))])), 'tabindex': new templates.DynamicAttribute(new expressions.AttributePathExpression('tabindex', [], new expressions.ExpressionMeta('@tabindex')))}, [new templates.ConditionalBlock([new expressions.AttributePathExpression('label', [], new expressions.ExpressionMeta('if @label', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicText(new expressions.AttributePathExpression('label', [], new expressions.ExpressionMeta('@label')))],
    [new templates.DynamicText(new expressions.FnExpression(['labelText'], [new expressions.PathExpression(['value'])], void 0, new expressions.ExpressionMeta('labelText(value)'))), new templates.Text(' '), new templates.Element('i', {'class': new templates.Attribute('css-icon css-icon-caret-down')}, [], void 0, false)]
  ])], [new templates.MarkupAs(['target']), new templates.ElementOn('keydown', new expressions.FnExpression(['_keydownButton'], [new expressions.PathExpression(['$event'])])), new templates.ElementOn('click', new expressions.FnExpression(['toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('blur', new expressions.FnExpression(['focus'], []))], false), new templates.Element('ul', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('dropdown-content '), new templates.ConditionalBlock([new expressions.PathExpression(['show'], new expressions.ExpressionMeta('unless show', 'unless'))], [
    [new templates.Text('hidden')]
  ]), new templates.Text(' '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.EachBlock(new expressions.PathExpression(['options'], new expressions.ExpressionMeta('each options as #option, #i', 'each', void 0, '#option', '#i')), [new templates.ConditionalBlock([new expressions.AliasPathExpression('#option', ['divider'], new expressions.ExpressionMeta('if #option.divider', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('li', {'class': new templates.DynamicAttribute(new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#option', ['class']), new expressions.LiteralExpression('divider')], void 0, new expressions.ExpressionMeta('#option.class || \'divider\'')))}, [new templates.Element('span', void 0, [new templates.ViewInstance('l-dropdown:option-content', {'inherit': true})], void 0, false)], void 0, false)],
    [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('option '), new templates.DynamicText(new expressions.AliasPathExpression('#option', ['class'], new expressions.ExpressionMeta('#option.class'))), new templates.Text(' '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#i', []), new expressions.PathExpression(['focused'])], void 0, new expressions.ExpressionMeta('if #i === focused', 'if'))], [
      [new templates.Text('focused')]
    ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.FnExpression(['optionValue'], [new expressions.AliasPathExpression('#option', [])]), new expressions.PathExpression(['value'])], void 0, new expressions.ExpressionMeta('if optionValue(#option) === value', 'if'))], [
      [new templates.Text('active')]
    ])]))}, [new templates.ViewInstance('l-dropdown:option-content', {'inherit': true})], [new templates.ElementOn('mouseenter', new expressions.FnExpression(['focusIndex'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('mouseleave', new expressions.FnExpression(['focusIndex'], [])), new templates.ElementOn('click', new expressions.FnExpression(['select'], [new expressions.AliasPathExpression('#option', [])]))], false)]
  ])])], [new templates.MarkupAs(['content']), new templates.ElementOn('click', new expressions.FnExpression(['$stopPropagation'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-dropdown:option-content').template = new templates.Template([new templates.ConditionalBlock([new expressions.AttributePathExpression('optionContent', [], new expressions.ExpressionMeta('if @optionContent', 'if')), new expressions.AliasPathExpression('#option', ['content'], new expressions.ExpressionMeta('else if #option.content', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicText(new expressions.AttributePathExpression('optionContent', [], new expressions.ExpressionMeta('@optionContent')))],
    [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['content'], new expressions.ExpressionMeta('#option.content')))],
    [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text')))]
  ])]);
  views.register('l-duration-input:index', null, {'element': 'l-duration-input'}).template = new templates.Template([new templates.Comment('l-duration-input:index', [new templates.ComponentMarker()]), new templates.ViewInstance('l-suggest', {'extend': true})]);
  views.register('l-grouped-suggest:index', null, {'attributes': 'prepend result-content', 'element': 'l-grouped-suggest'}).template = new templates.Template([new templates.Comment('l-grouped-suggest:index', [new templates.ComponentMarker()]), new templates.ViewInstance('l-suggest', {'extend': true})]);
  views.register('l-identicon:index', null, {'element': 'l-identicon'}).template = new templates.Template([new templates.Comment('l-identicon:index', [new templates.ComponentMarker()]), new templates.Block(new expressions.Expression(new expressions.ExpressionMeta('unbound', 'unbound')), [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('identicon '), new templates.DynamicText(new expressions.FnExpression(['className'], [new expressions.AttributePathExpression('user', ['id']), new expressions.AttributePathExpression('user', ['photo'])], void 0, new expressions.ExpressionMeta('className(@user.id, @user.photo)'))), new templates.Text(' '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))])), 'title': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('user', ['name'], new expressions.ExpressionMeta('@user.name'))), new templates.Text(' - '), new templates.DynamicText(new expressions.AttributePathExpression('user', ['email'], new expressions.ExpressionMeta('@user.email')))]))}, [new templates.ConditionalBlock([new expressions.FnExpression(['photoUrl'], [new expressions.AttributePathExpression('user', ['photo'])], void 0, new expressions.ExpressionMeta('if photoUrl(@user.photo)', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('img', {'src': new templates.DynamicAttribute(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this'))), 'alt': new templates.DynamicAttribute(new expressions.FnExpression(['initials'], [new expressions.AttributePathExpression('user', ['name'])], void 0, new expressions.ExpressionMeta('initials(@user.name)')))}, null, void 0, false)],
    [new templates.Element('div', void 0, [new templates.DynamicText(new expressions.FnExpression(['initials'], [new expressions.AttributePathExpression('user', ['name'])], void 0, new expressions.ExpressionMeta('initials(@user.name)')))], void 0, false)]
  ])], void 0, false)])]);
  views.register('l-modal:index', null, {'element': 'l-modal'}).template = new templates.Template([new templates.Comment('l-modal:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('modal-backdrop '), new templates.ConditionalBlock([new expressions.PathExpression(['show'], new expressions.ExpressionMeta('unless show', 'unless'))], [
    [new templates.Text('hidden')]
  ])]))}, [], [new templates.MarkupAs(['backdrop'])], false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('modal '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' modal-hidden')]))}, [new templates.Element('div', {'class': new templates.Attribute('modal-title')}, [new templates.Element('h1', void 0, [new templates.DynamicText(new expressions.PathExpression(['options', 'title'], new expressions.ExpressionMeta('options.title')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('modal-close'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-close', {})], [new templates.ElementOn('click', new expressions.FnExpression(['close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('modal-content')}, [new templates.ConditionalBlock([new expressions.PathExpression(['options', 'view'], new expressions.ExpressionMeta('if options.view', 'if')), new expressions.PathExpression(['options', 'text'], new expressions.ExpressionMeta('else if options.text', 'else if'))], [
    [new templates.Block(new expressions.PathExpression(['options', 'context'], new expressions.ExpressionMeta('with options.context as #context', 'with', void 0, '#context')), [new templates.DynamicText(new expressions.PathExpression(['options', 'view'], new expressions.ExpressionMeta('options.view')))])],
    [new templates.DynamicText(new expressions.PathExpression(['options', 'text'], new expressions.ExpressionMeta('options.text')))]
  ])], void 0, false)], [new templates.MarkupAs(['modal']), new templates.ElementOn('click', new expressions.FnExpression(['$stopPropagation'], [new expressions.PathExpression(['$event'])])), new templates.ElementOn('keydown', new expressions.FnExpression(['$stopPropagation'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-multi-suggest:icon-close:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-close')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#979797'), 'd': new templates.Attribute('M4.1 5L4.9 4.2 8 7.4l3.2-3.1 0.8 0.8 -3.1 3.2 3.2 3.1 -0.8 0.8L8 8.9l-3.1 3.2 -0.8-0.8 3.2-3.1L4.1 5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-multi-suggest:index', null, {'attributes': 'label prepend', 'element': 'l-multi-suggest'}).template = new templates.Template([new templates.Comment('l-multi-suggest:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('multi-suggest '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.EachBlock(new expressions.PathExpression(['selected'], new expressions.ExpressionMeta('each selected as #item, #i', 'each', void 0, '#item', '#i')), [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('multi-suggest-item '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#item', ['referral'], new expressions.ExpressionMeta('if #item.referral', 'if'))], [
    [new templates.Text('referral')]
  ]), new templates.Text(' '), new templates.DynamicText(new expressions.AliasPathExpression('#item', ['class'], new expressions.ExpressionMeta('#item.class'))), new templates.Text(' '), new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['hiddenIds']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('if hiddenIds[#item.id]', 'if'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('multi-suggest-label')}, [new templates.ConditionalBlock([new expressions.AttributePathExpression('label', [], new expressions.ExpressionMeta('if @label', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicText(new expressions.AttributePathExpression('label', [], new expressions.ExpressionMeta('@label')))],
    [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('multi-suggest-remove'), 'title': new templates.Attribute('Remove')}, [], [new templates.ElementOn('click', new expressions.FnExpression(['remove'], [new expressions.AliasPathExpression('#i', []), new expressions.PathExpression(['$element'])]))], false)], void 0, false)]), new templates.ViewInstance('l-suggest', {'inherit': true, 'matchAlways': new templates.ParentWrapper(new templates.DynamicText(new expressions.OperatorExpression('!U', [new expressions.AttributePathExpression('matchOnClick', [])], void 0, new expressions.ExpressionMeta('!@matchOnClick'))), new expressions.OperatorExpression('!U', [new expressions.AttributePathExpression('matchOnClick', [])], void 0, new expressions.ExpressionMeta('!@matchOnClick'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options'))), new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options'))), 'defaultOptions': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['defaultOptions'], new expressions.ExpressionMeta('defaultOptions'))), new expressions.PathExpression(['defaultOptions'], new expressions.ExpressionMeta('defaultOptions'))), 'excludeOptions': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['selected'], new expressions.ExpressionMeta('selected'))), new expressions.PathExpression(['selected'], new expressions.ExpressionMeta('selected'))), 'sort': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), 'filter': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter')))}, [new templates.MarkupAs(['suggest']), new templates.ComponentOn('submit', new expressions.FnExpression(['submit'], [])), new templates.ComponentOn('select', new expressions.FnExpression(['select'], []))])], [new templates.MarkupAs(['container']), new templates.ElementOn('mousedown', new expressions.FnExpression(['_mousedownContainer'], [new expressions.PathExpression(['$event'])])), new templates.ElementOn('click', new expressions.FnExpression(['_mousedownContainer'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-note-textarea:index', null, {'element': 'l-note-textarea'}).template = new templates.Template([new templates.Comment('l-note-textarea:index', [new templates.ComponentMarker()]), new templates.ViewInstance('l-textarea-suggest', {'extend': true})]);
  views.register('l-picker:index', null, {'attributes': 'prepend result-content', 'element': 'l-picker'}).template = new templates.Template([new templates.Comment('l-picker:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AttributePathExpression('type', []), new expressions.LiteralExpression('input')], void 0, new expressions.ExpressionMeta('if @type === \'input\'', 'if')), new expressions.OperatorExpression('===', [new expressions.AttributePathExpression('type', []), new expressions.LiteralExpression('link')], void 0, new expressions.ExpressionMeta('else if @type === \'link\'', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('picker-input-only '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.ViewInstance('l-picker:suggest', {'inherit': true})], void 0, false)],
    [new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('picker-link '), new templates.DynamicText(new expressions.AttributePathExpression('linkClass', [], new expressions.ExpressionMeta('@linkClass'))), new templates.Text(' '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['edit'], new expressions.ExpressionMeta('if edit', 'if'))], [
      [new templates.Text('editing')]
    ])]))}, [new templates.Element('button', {'type': new templates.Attribute('button'), 'class': new templates.Attribute('picker-link-button')}, [new templates.DynamicText(new expressions.AttributePathExpression('content', [], new expressions.ExpressionMeta('@content')))], [new templates.MarkupAs(['target']), new templates.ElementOn('keydown', new expressions.FnExpression(['_keydownButton'], [new expressions.PathExpression(['$event'])])), new templates.ElementOn('click', new expressions.FnExpression(['open'], []))], false), new templates.ConditionalBlock([new expressions.PathExpression(['edit'], new expressions.ExpressionMeta('if edit', 'if'))], [
      [new templates.ViewInstance('l-picker:suggest', {'inherit': true})]
    ])], void 0, false)],
    [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('picker '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['edit'], new expressions.ExpressionMeta('if edit', 'if'))], [
      [new templates.Text('editing')]
    ])]))}, [new templates.Element('button', {'type': new templates.Attribute('button'), 'class': new templates.Attribute('picker-button btn')}, [new templates.Element('div', {'class': new templates.Attribute('picker-label')}, [new templates.DynamicText(new expressions.AttributePathExpression('content', [], new expressions.ExpressionMeta('@content'))), new templates.DynamicText(new expressions.FnExpression(['labelText'], [new expressions.PathExpression(['value']), new expressions.PathExpression(['edit']), new expressions.PathExpression(['options'])], void 0, new expressions.ExpressionMeta('labelText(value, edit, options)')))], void 0, false), new templates.ViewInstance('icon-caret-down', {})], [new templates.MarkupAs(['target']), new templates.ElementOn('keydown', new expressions.FnExpression(['_keydownButton'], [new expressions.PathExpression(['$event'])])), new templates.ElementOn('click', new expressions.FnExpression(['open'], []))], false), new templates.ConditionalBlock([new expressions.PathExpression(['edit'], new expressions.ExpressionMeta('if edit', 'if'))], [
      [new templates.ViewInstance('l-picker:suggest', {'inherit': true}), new templates.Element('div', {'class': new templates.Attribute('picker-close')}, [], void 0, false)]
    ])], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.AttributePathExpression('tip', [], new expressions.ExpressionMeta('if @tip', 'if'))], [
    [new templates.ViewInstance('l-tip', {'position': new templates.ParentWrapper(new templates.DynamicText(new expressions.AttributePathExpression('tipPosition', [], new expressions.ExpressionMeta('@tipPosition'))), new expressions.AttributePathExpression('tipPosition', [], new expressions.ExpressionMeta('@tipPosition'))), 'content': new templates.ParentWrapper(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('tip', [], new expressions.ExpressionMeta('@tip')))]))}, [new templates.MarkupAs(['tip'])])]
  ])]);
  views.register('l-picker:suggest').template = new templates.Template([new templates.DynamicViewInstance(new expressions.OperatorExpression('?', [new expressions.AttributePathExpression('grouped', []), new expressions.LiteralExpression('l-grouped-suggest'), new expressions.LiteralExpression('l-suggest')], void 0, new expressions.ExpressionMeta('@grouped ? \'l-grouped-suggest\' : \'l-suggest\'')), {'inherit': true, 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options'))), new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options')))}, [new templates.MarkupAs(['suggest']), new templates.ComponentOn('open', new expressions.FnExpression(['disableTip'], [])), new templates.ComponentOn('close', new expressions.FnExpression(['close'], [])), new templates.ComponentOn('select', new expressions.FnExpression(['select'], [])), new templates.ComponentOn('submit', new expressions.FnExpression(['submit'], []))])]);
  views.register('l-popup:index', null, {'element': 'l-popup'}).template = new templates.Template([new templates.Comment('l-popup:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('popup '), new templates.ConditionalBlock([new expressions.PathExpression(['show'], new expressions.ExpressionMeta('unless show', 'unless'))], [
    [new templates.Text('hidden')]
  ]), new templates.Text(' '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.Element('i', void 0, [], [new templates.MarkupAs(['callout'])], false), new templates.Element('div', {'class': new templates.Attribute('popup-content')}, [new templates.ConditionalBlock([new expressions.PathExpression(['show'], new expressions.ExpressionMeta('if show', 'if'))], [
    [new templates.DynamicText(new expressions.AttributePathExpression('content', [], new expressions.ExpressionMeta('@content')))]
  ])], [new templates.MarkupAs(['content'])], false)], [new templates.MarkupAs(['container']), new templates.ElementOn('click', new expressions.FnExpression(['$stopPropagation'], [new expressions.PathExpression(['$event'])])), new templates.ElementOn('keydown', new expressions.FnExpression(['$stopPropagation'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-posting-picker:index', null, {'element': 'l-posting-picker'}).template = new templates.Template([new templates.Comment('l-posting-picker:index', [new templates.ComponentMarker()]), new templates.ViewInstance('l-picker', {'extend': true})]);
  views.register('l-posting-picker:result-content').template = new templates.Template([new templates.EachBlock(new expressions.AliasPathExpression('#result', ['textFragments'], new expressions.ExpressionMeta('each #result.textFragments', 'each')), [new templates.DynamicText(new expressions.RelativePathExpression(['before'], new expressions.ExpressionMeta('this.before'))), new templates.Element('b', void 0, [new templates.DynamicText(new expressions.RelativePathExpression(['inner'], new expressions.ExpressionMeta('this.inner')))], void 0, false)]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['header'], new expressions.ExpressionMeta('unless #result.header', 'unless'))], [
    [new templates.Element('ul', {'class': new templates.Attribute('posting-categories')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['locationFragments'], new expressions.ExpressionMeta('if #result.locationFragments', 'if'))], [
      [new templates.Element('li', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#result', ['locationFragments'], new expressions.ExpressionMeta('each #result.locationFragments', 'each')), [new templates.DynamicText(new expressions.RelativePathExpression(['before'], new expressions.ExpressionMeta('this.before'))), new templates.Element('b', void 0, [new templates.DynamicText(new expressions.RelativePathExpression(['inner'], new expressions.ExpressionMeta('this.inner')))], void 0, false)])], void 0, false)]
    ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['commitmentFragments'], new expressions.ExpressionMeta('if #result.commitmentFragments', 'if'))], [
      [new templates.Element('li', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#result', ['commitmentFragments'], new expressions.ExpressionMeta('each #result.commitmentFragments', 'each')), [new templates.DynamicText(new expressions.RelativePathExpression(['before'], new expressions.ExpressionMeta('this.before'))), new templates.Element('b', void 0, [new templates.DynamicText(new expressions.RelativePathExpression(['inner'], new expressions.ExpressionMeta('this.inner')))], void 0, false)])], void 0, false)]
    ])], void 0, false)]
  ])]);
  views.register('l-progress:index', null, {'element': 'l-progress'}).template = new templates.Template([new templates.Comment('l-progress:index', [new templates.ComponentMarker()]), new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('chart-progress-meter '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' '), new templates.ConditionalBlock([new expressions.AttributePathExpression('loop', [], new expressions.ExpressionMeta('if @loop', 'if'))], [
    [new templates.Text('loop')]
  ])])), 'x-as': new templates.Attribute('svg'), 'width': new templates.DynamicAttribute(new expressions.PathExpression(['width'], new expressions.ExpressionMeta('width'))), 'height': new templates.DynamicAttribute(new expressions.PathExpression(['height'], new expressions.ExpressionMeta('height')))}, [new templates.Element('g', {'class': new templates.Attribute('bg')}, [new templates.Element('path', {'class': new templates.Attribute('ring')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], [new templates.MarkupAs(['bg'])], false, null, 'http://www.w3.org/2000/svg'), new templates.Element('g', {'class': new templates.Attribute('fg')}, [new templates.Element('path', {'class': new templates.Attribute('ring')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], [new templates.MarkupAs(['fg'])], false, null, 'http://www.w3.org/2000/svg')], [new templates.MarkupAs(['svg'])], false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-score-thumbs:icon-strong-no-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-strong-no-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M2.027,2.584C1.933,2.996,2.055,3.388,2.305,3.592l-0.3-0.069 C1.531,3.414,1.049,3.756,0.924,4.289C0.818,4.748,1.023,5.18,1.381,5.366L1.255,5.338C0.723,5.213,0.192,5.546,0.067,6.079\ns0.208,1.064,0.741,1.189l0.289,0.112C0.631,7.271,0.153,7.615,0.029,8.148c-0.124,0.531,0.153,1.05,0.621,1.16l3.427,0.85\nc0,0-0.541,0.27-0.897,3.219c-0.358,2.947,2.131,2.469,2.131,2.469s0.242-0.689,0.495-1.367c-0.236-0.36-0.375-0.963-0.252-1.965\nC5.91,9.564,6.546,9.396,6.546,9.396L2.664,8.395c-0.468-0.11-0.745-0.628-0.621-1.16C2.167,6.702,2.256,5.933,2.381,5.4\nc0.125-0.532,0.421-1.401,0.527-1.859C3.009,3.11,3.345,2.391,3.52,1.914l-0.517-0.12C2.587,1.698,2.152,2.051,2.027,2.584z\nM4.364,5.49C3.831,5.365,3.498,4.833,3.623,4.301C3.748,3.769,4.279,3.436,4.811,3.56l0.125,0.028\nC4.579,3.402,4.374,2.97,4.48,2.511c0.125-0.532,0.607-0.875,1.081-0.766l0.3,0.069C5.611,1.61,5.488,1.218,5.583,0.806\nc0.125-0.533,0.56-0.886,0.975-0.791l2.39,0.556c0.932,0.157,2.024,0.378,2.862,0.665C14.373,2.113,14.693,3.274,16,3.371\nc0,2.088-0.016,2.817-0.13,4.671c-0.013,0.198-2.714-0.009-2.776,0.176c0,0-3.011,2.897-3.208,3.201\nc-0.196,0.305-1.02,2.647-1.02,2.647s-1.894,0.505-1.536-2.442c0.357-2.949,1.235-3.033,1.235-3.033l-0.53-0.173L4.206,7.53\nc-0.468-0.11-0.745-0.628-0.621-1.16c0.124-0.533,0.602-0.877,1.067-0.769L4.364,5.49z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-score-thumbs:icon-no-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-no-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M2.234,6.302L1.909,6.176C1.31,6.036,0.936,5.437,1.076,4.838 c0.14-0.599,0.738-0.974,1.337-0.833l0.141,0.032C2.151,3.828,1.92,3.341,2.04,2.825C2.18,2.226,2.723,1.84,3.256,1.963l0.337,0.078\nC3.312,1.811,3.174,1.37,3.281,0.907c0.14-0.6,0.63-0.998,1.097-0.89l2.689,0.625c1.048,0.176,2.277,0.425,3.219,0.748\nC13.17,2.378,13.53,3.683,15,3.792c0,2.35-0.018,3.17-0.146,5.256c-0.014,0.224-3.053-0.011-3.123,0.198c0,0-3.387,3.26-3.609,3.602\nC7.9,13.19,6.975,15.826,6.975,15.826s-2.131,0.567-1.728-2.748c0.402-3.318,1.39-3.412,1.39-3.412L6.04,9.471L1.731,8.472\nC1.206,8.348,0.894,7.765,1.033,7.167C1.172,6.567,1.71,6.18,2.234,6.302z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-score-thumbs:icon-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.557,8.255h-0.539c0.572-0.059,1.149-0.65,1.082-1.305 c-0.066-0.655-0.584-1.138-1.158-1.081L8.233,6.351L7.564,6.36c0,0,0.967-0.438,0.224-3.936c-0.74-3.496-2.7-2.184-2.7-2.184\nS5.062,3.228,4.957,3.652C4.852,4.076,2.554,8.545,2.554,8.545c0,0.236-1.423,0.473-1.422,0.712c0.017,2.056,0,3.814,0,5.944\nC2.658,14.803,3.501,16,6.762,16c1.064,0,2.369-0.174,3.491-0.358l2.935-0.3c0.51-0.053,0.794-0.572,0.803-1.279\nc-0.004-0.812-0.607-0.942-0.973-1.078c0,0,1.712,0.113,1.564-1.292c0-0.868-0.646-0.989-1.125-1.064h0.34\nc0.656-0.067,1.132-0.653,1.065-1.308C14.795,8.666,14.211,8.189,13.557,8.255z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-score-thumbs:icon-strong-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-strong-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.33,1.97c0.596,2.841-0.118,2.932-0.118,2.932l0.536-0.008l3.77-0.391 c0.46-0.047,0.813,0.612,0.867,1.144s-0.408,1.013-0.867,1.061h0.432c0.523-0.054,0.992,0.334,1.046,0.865\nc0.054,0.532-0.328,1.007-0.854,1.062h-0.272c0.384,0.062,0.902,0.16,0.902,0.865c0.117,1.142-1.254,1.051-1.254,1.051\nc0.293,0.109,0.776,0.215,0.779,0.875c-0.007,0.574-0.234,0.997-0.643,1.039l-1.476,0.153c0.065-0.321,0.128-0.69,0.054-1.398\nc0-0.76,0.059-1.547,0-2.12c-0.059-0.572-0.238-1.232-0.298-1.805c-0.058-0.573-0.479-1.405-0.981-1.354L8.418,6.222\nc0,0,0.042-0.037-0.542-2.808C7.98,3.188,8.049,3.027,8.063,2.967c0.084-0.344,0.105-2.771,0.105-2.771S9.737-0.87,10.33,1.97z\nM11.328,8.081c-0.059-0.573-0.51-0.996-1.012-0.945l-4.112,0.42L5.619,7.565c0,0,0.845-0.384,0.196-3.443\nC5.168,1.063,3.457,2.211,3.457,2.211S3.434,4.824,3.342,5.195c-0.092,0.371-2.1,4.281-2.1,4.281C1.242,9.684-0.001,9.891,0,10.1\nc0.015,1.799,0,3.338,0,5.201C1.333,14.951,2.07,16,4.919,16c0.93,0,2.069-0.151,3.049-0.314l2.564-0.262\nc0.444-0.045,0.693-0.501,0.7-1.119c-0.002-0.711-0.53-0.824-0.85-0.943c0,0,1.496,0.099,1.367-1.131\nc0-0.759-0.565-0.865-0.983-0.932h0.297c0.573-0.059,0.989-0.57,0.931-1.144c-0.058-0.572-0.568-0.99-1.141-0.932h-0.471\nC10.884,9.172,11.388,8.654,11.328,8.081z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('l-score-thumbs:index', null, {'element': 'l-score-thumbs'}).template = new templates.Template([new templates.Comment('l-score-thumbs:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('score-wrapper '), new templates.DynamicText(new expressions.PathExpression(['class'], new expressions.ExpressionMeta('class'))), new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['disabled'], new expressions.ExpressionMeta('if disabled', 'if'))], [
    [new templates.Text('disabled')]
  ])]))}, [new templates.Element('ul', void 0, [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('hand-button two-down '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['score']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('if score == 1', 'if'))], [
    [new templates.Text('selected')]
  ]), new templates.Text(' has-tip')])), 'title': new templates.Attribute('Strong no')}, [new templates.ViewInstance('l-score-thumbs:icon-strong-no-hire', {})], [new templates.ElementOn('click', new expressions.FnExpression(['setScore'], [new expressions.LiteralExpression(1)]))], false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('hand-button one-down '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['score']), new expressions.LiteralExpression(2)], void 0, new expressions.ExpressionMeta('if score == 2', 'if'))], [
    [new templates.Text('selected')]
  ]), new templates.Text(' has-tip')])), 'title': new templates.Attribute('No')}, [new templates.ViewInstance('l-score-thumbs:icon-no-hire', {})], [new templates.ElementOn('click', new expressions.FnExpression(['setScore'], [new expressions.LiteralExpression(2)]))], false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('hand-button one-up '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['score']), new expressions.LiteralExpression(3)], void 0, new expressions.ExpressionMeta('if score == 3', 'if'))], [
    [new templates.Text('selected')]
  ]), new templates.Text(' has-tip')])), 'title': new templates.Attribute('Yes')}, [new templates.ViewInstance('l-score-thumbs:icon-hire', {})], [new templates.ElementOn('click', new expressions.FnExpression(['setScore'], [new expressions.LiteralExpression(3)]))], false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('hand-button two-up '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['score']), new expressions.LiteralExpression(4)], void 0, new expressions.ExpressionMeta('if score == 4', 'if'))], [
    [new templates.Text('selected')]
  ]), new templates.Text(' has-tip')])), 'title': new templates.Attribute('Strong yes')}, [new templates.ViewInstance('l-score-thumbs:icon-strong-hire', {})], [new templates.ElementOn('click', new expressions.FnExpression(['setScore'], [new expressions.LiteralExpression(4)]))], false)], void 0, false)], void 0, false)]);
  views.register('l-sheets:index', null, {'element': 'l-sheets'}).template = new templates.Template([new templates.Comment('l-sheets:index', [new templates.ComponentMarker()]), new templates.Element('div', void 0, [new templates.ConditionalBlock([new expressions.PathExpression(['show'], new expressions.ExpressionMeta('if show', 'if'))], [
    [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('sheets '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.Element('div', {'class': new templates.Attribute('sheets-content')}, [new templates.Block(new expressions.PathExpression(['active'], new expressions.ExpressionMeta('on active as #draft', 'on', void 0, '#draft')), [new templates.DynamicViewInstance(new expressions.BracketsExpression(new expressions.PathExpression(['types']), new expressions.AliasPathExpression('#draft', ['type']), ['content'], new expressions.ExpressionMeta('types[#draft.type].content')), {'draft': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', [], new expressions.ExpressionMeta('#draft'))), new expressions.AliasPathExpression('#draft', [], new expressions.ExpressionMeta('#draft'))), 'optional': true})])], [new templates.MarkupAs(['activeSheet'])], false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('sheets-title')}, [new templates.EachBlock(new expressions.PathExpression(['tabs'], new expressions.ExpressionMeta('each tabs as #draft', 'each', void 0, '#draft')), [new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('sheets-tab '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#draft', []), new expressions.PathExpression(['active'])], void 0, new expressions.ExpressionMeta('if #draft === active', 'if'))], [
      [new templates.Text('active')]
    ])])), 'href': new templates.Attribute('#')}, [new templates.DynamicViewInstance(new expressions.BracketsExpression(new expressions.PathExpression(['types']), new expressions.AliasPathExpression('#draft', ['type']), ['title'], new expressions.ExpressionMeta('types[#draft.type].title')), {'optional': true})], [new templates.ElementOn('click', new expressions.FnExpression(['activate'], [new expressions.AliasPathExpression('#draft', ['id'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]), new templates.ConditionalBlock([new expressions.PathExpression(['more'], new expressions.ExpressionMeta('if more', 'if'))], [
      [new templates.Element('a', {'class': new templates.Attribute('sheets-more dropdown-button dark btn btn-no-style'), 'href': new templates.Attribute('#')}, [new templates.Text('More'), new templates.Element('i', {'class': new templates.Attribute('css-icon css-icon-caret-down')}, [], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['morePopup', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ViewInstance('l-popup', {'class': new templates.ParentWrapper(new templates.Template([new templates.Text('darker has-menu has-icon '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))])), 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['more'], new expressions.ExpressionMeta('each more as #draft', 'each', void 0, '#draft')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#draft', []), new expressions.PathExpression(['active'])], void 0, new expressions.ExpressionMeta('if #draft === active', 'if'))], [
        [new templates.Text('active')]
      ]), new templates.Text(' option')]))}, [new templates.DynamicViewInstance(new expressions.BracketsExpression(new expressions.PathExpression(['types']), new expressions.AliasPathExpression('#draft', ['type']), ['title'], new expressions.ExpressionMeta('types[#draft.type].title')), {'optional': true})], [new templates.ElementOn('click', new expressions.SequenceExpression([new expressions.FnExpression(['activate'], [new expressions.AliasPathExpression('#draft', ['id'])]), new expressions.FnExpression(['morePopup', 'close'], [])]))], false)])], void 0, false)]))}, [new templates.MarkupAs(['morePopup'])])]
    ]), new templates.Element('div', {'class': new templates.Attribute('sheets-close')}, [new templates.Text(' '), new templates.ViewInstance('icon-close-large', {'content': new templates.ParentWrapper(new templates.Template([new templates.Text(' ')]))})], [new templates.ElementOn('click', new expressions.FnExpression(['close'], []))], false)], void 0, false)]
  ])], [new templates.MarkupAs(['container'])], false)]);
  views.register('l-suggest:index', null, {'attributes': 'prepend result-content', 'element': 'l-suggest'}).template = new templates.Template([new templates.Comment('l-suggest:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.PathExpression(['noInput'], new expressions.ExpressionMeta('unless noInput', 'unless'))], [
    [new templates.Element('input', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('suggest-input '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' '), new templates.DynamicText(new expressions.AttributePathExpression('inputClass', [], new expressions.ExpressionMeta('@inputClass')))])), 'placeholder': new templates.DynamicAttribute(new expressions.AttributePathExpression('placeholder', [], new expressions.ExpressionMeta('@placeholder'))), 'tabindex': new templates.DynamicAttribute(new expressions.AttributePathExpression('tabindex', [], new expressions.ExpressionMeta('@tabindex'))), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value')))}, null, [new templates.MarkupAs(['input']), new templates.ElementOn('focus', new expressions.FnExpression(['open'], [])), new templates.ElementOn('blur', new expressions.FnExpression(['close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['_clickInput'], [])), new templates.ElementOn('keydown', new expressions.FnExpression(['_keydownInput'], [new expressions.PathExpression(['$event'])]))], false)]
  ]), new templates.Element('ul', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('suggest-content '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.PathExpression(['show']), new expressions.PathExpression(['results'])], void 0, new expressions.ExpressionMeta('unless show && results', 'unless'))], [
    [new templates.Text('hidden')]
  ]), new templates.Text(' '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.EachBlock(new expressions.PathExpression(['results'], new expressions.ExpressionMeta('each results as #result, #i', 'each', void 0, '#result', '#i')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('option '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['class'], new expressions.ExpressionMeta('#result.class'))), new templates.Text(' '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#i', []), new expressions.PathExpression(['focused'])], void 0, new expressions.ExpressionMeta('if #i === focused', 'if'))], [
    [new templates.Text('focused')]
  ])]))}, [new templates.ConditionalBlock([new expressions.AttributePathExpression('resultContent', [], new expressions.ExpressionMeta('if @resultContent', 'if')), new expressions.AliasPathExpression('#result', ['content'], new expressions.ExpressionMeta('else if #result.content', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicText(new expressions.AttributePathExpression('resultContent', [], new expressions.ExpressionMeta('@resultContent')))],
    [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['content'], new expressions.ExpressionMeta('#result.content')))],
    [new templates.DynamicText(new expressions.AttributePathExpression('prepend', [], new expressions.ExpressionMeta('@prepend'))), new templates.EachBlock(new expressions.AliasPathExpression('#result', ['textFragments'], new expressions.ExpressionMeta('each #result.textFragments', 'each')), [new templates.DynamicText(new expressions.RelativePathExpression(['before'], new expressions.ExpressionMeta('this.before'))), new templates.Element('b', void 0, [new templates.DynamicText(new expressions.RelativePathExpression(['inner'], new expressions.ExpressionMeta('this.inner')))], void 0, false)])]
  ])], [new templates.ElementOn('mouseenter', new expressions.FnExpression(['focusIndex'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('mouseleave', new expressions.FnExpression(['focusIndex'], [])), new templates.ElementOn('mousedown', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])])), new templates.ElementOn('click', new expressions.FnExpression(['select'], [new expressions.AliasPathExpression('#result', [])]))], false)])], [new templates.MarkupAs(['content']), new templates.ElementOn('click', new expressions.FnExpression(['$stopPropagation'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-textarea-suggest:index', null, {'element': 'l-textarea-suggest'}).template = new templates.Template([new templates.Comment('l-textarea-suggest:index', [new templates.ComponentMarker()]), new templates.Element('textarea', {'class': new templates.DynamicAttribute(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), 'placeholder': new templates.DynamicAttribute(new expressions.AttributePathExpression('placeholder', [], new expressions.ExpressionMeta('@placeholder')))}, [new templates.DynamicText(new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value')))], [new templates.MarkupAs(['textarea']), new templates.ElementOn('focus', new expressions.FnExpression(['focusUpdate'], [])), new templates.ElementOn('blur', new expressions.FnExpression(['update'], [])), new templates.ElementOn('keydown', new expressions.FnExpression(['_keydownTextarea'], [new expressions.PathExpression(['$event'])])), new templates.ElementOn('click', new expressions.FnExpression(['update'], [new expressions.LiteralExpression(true)]))], false), new templates.ViewInstance('l-suggest', {'inherit': true, 'noInput': true, 'matchAlways': true, 'class': new templates.ParentWrapper(new templates.DynamicText(new expressions.AttributePathExpression('suggestClass', [], new expressions.ExpressionMeta('@suggestClass'))), new expressions.AttributePathExpression('suggestClass', [], new expressions.ExpressionMeta('@suggestClass'))), 'limit': 100, 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['suggestValue'], new expressions.ExpressionMeta('suggestValue'))), new expressions.PathExpression(['suggestValue'], new expressions.ExpressionMeta('suggestValue'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options'))), new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options')))}, [new templates.MarkupAs(['suggest']), new templates.ComponentOn('select', new expressions.FnExpression(['select'], []))])]);
  views.register('l-time-input:index', null, {'element': 'l-time-input'}).template = new templates.Template([new templates.Comment('l-time-input:index', [new templates.ComponentMarker()]), new templates.ViewInstance('l-suggest', {'extend': true})]);
  views.register('l-tip:index', null, {'element': 'l-tip'}).template = new templates.Template([new templates.Comment('l-tip:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('tip '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.ConditionalBlock([new expressions.PathExpression(['show'], new expressions.ExpressionMeta('if show', 'if'))], [
    [new templates.Element('i', void 0, [], [new templates.MarkupAs(['callout'])], false), new templates.Element('div', {'class': new templates.Attribute('tip-content')}, [new templates.DynamicText(new expressions.PathExpression(['title'], new expressions.ExpressionMeta('title')))], [new templates.MarkupAs(['content'])], false)]
  ])], [new templates.MarkupAs(['container'])], false)]);
  views.register('l-upload:index', null, {'element': 'l-upload'}).template = new templates.Template([new templates.Comment('l-upload:index', [new templates.ComponentMarker()]), new templates.Element('input', {'class': new templates.DynamicAttribute(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), 'type': new templates.Attribute('file'), 'multiple': new templates.DynamicAttribute(new expressions.AttributePathExpression('multiple', [], new expressions.ExpressionMeta('@multiple')))}, null, [new templates.MarkupAs(['fileinput']), new templates.ElementOn('change', new expressions.FnExpression(['inputChange'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('l-user-picker:index', null, {'element': 'l-user-picker'}).template = new templates.Template([new templates.Comment('l-user-picker:index', [new templates.ComponentMarker()]), new templates.ViewInstance('l-picker', {'class': new templates.ParentWrapper(new templates.Template([new templates.Text('user-picker '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))])), 'inherit': true, 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value'))), new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options'))), new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options'))), 'prepend': new templates.Template([new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option'], new expressions.ExpressionMeta('#result.option'))), new expressions.AliasPathExpression('#result', ['option'], new expressions.ExpressionMeta('#result.option')))})]), 'content': new templates.ParentWrapper(new templates.Template([new templates.Block(new expressions.PathExpression(['value'], new expressions.ExpressionMeta('on value', 'on')), [new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['options']), new expressions.PathExpression(['value']), void 0, new expressions.ExpressionMeta('options[value]'))), new expressions.BracketsExpression(new expressions.PathExpression(['options']), new expressions.PathExpression(['value']), void 0, new expressions.ExpressionMeta('options[value]')))})])]))}, [new templates.ComponentOn('init', new expressions.FnExpression(['initPicker'], [])), new templates.ComponentOn('select', new expressions.FnExpression(['select'], [])), new templates.ComponentOn('submit', new expressions.FnExpression(['submit'], []))])]);

  views.register('add-candidate:index').template = new templates.Template([new templates.Comment('add-candidate:index', [new templates.ComponentMarker()]), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('Add candidate')], [new templates.ElementOn('click', new expressions.FnExpression(['popup', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom-left')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ViewInstance('l-popup', {'class': 'has-menu tall-option has-icon caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-edit', {}), new templates.Text('Add manually')], [new templates.ElementOn('click', new expressions.FnExpression(['addManually'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.referrals.new')], void 0, new expressions.ExpressionMeta('url(\'hire.referrals.new\')')))}, [new templates.ViewInstance('icon-all-list', {}), new templates.Text('Add referral')], void 0, false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['popup'])])]);

  views.register('breadcrumbs:icon-close:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-close')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#979797'), 'd': new templates.Attribute('M4.1 5L4.9 4.2 8 7.4l3.2-3.1 0.8 0.8 -3.1 3.2 3.2 3.1 -0.8 0.8L8 8.9l-3.1 3.2 -0.8-0.8 3.2-3.1L4.1 5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('breadcrumbs:index').template = new templates.Template([new templates.Comment('breadcrumbs:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.PathExpression(['breadcrumbs'], new expressions.ExpressionMeta('if breadcrumbs', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('breadcrumbs-container')}, [new templates.EachBlock(new expressions.PathExpression(['breadcrumbs'], new expressions.ExpressionMeta('each breadcrumbs as #breadcrumb', 'each', void 0, '#breadcrumb')), [new templates.Element('div', {'class': new templates.Attribute('breadcrumb')}, [new templates.Element('span', {'class': new templates.Attribute('crumb-type')}, [new templates.DynamicText(new expressions.AliasPathExpression('#breadcrumb', ['title'], new expressions.ExpressionMeta('#breadcrumb.title')))], void 0, false), new templates.Element('span', {'class': new templates.Attribute('crumb-names')}, [new templates.EachBlock(new expressions.AliasPathExpression('#breadcrumb', ['items'], new expressions.ExpressionMeta('each #breadcrumb.items as #item', 'each', void 0, '#item')), [new templates.Element('span', {'class': new templates.Attribute('crumb-name')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text'))), new templates.Element('div', {'class': new templates.Attribute('breadcrumb-remove')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#item', ['removeHref'], new expressions.ExpressionMeta('#item.removeHref')))}, [new templates.ViewInstance('breadcrumbs:icon-close', {})], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false)]), new templates.Element('a', {'class': new templates.Attribute('breadcrumb-clear-all'), 'href': new templates.DynamicAttribute(new expressions.PathExpression(['clearAllHref'], new expressions.ExpressionMeta('clearAllHref')))}, [new templates.Text('Clear filters '), new templates.ViewInstance('breadcrumbs:icon-close', {})], void 0, false)], void 0, false)]
  ])]);
  views.register('bulk-archive:index').template = new templates.Template([new templates.Comment('bulk-archive:index', [new templates.ComponentMarker()]), new templates.Element('button', {'class': new templates.Attribute('btn has-icon bulk-archive has-tip'), 'title': new templates.Attribute('Archive candidates')}, [new templates.ViewInstance('icon-archive', {}), new templates.Element('span', {'class': new templates.Attribute('bulk-button-label')}, [new templates.Text('Archive')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['archiveAllReasonMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom-left')])), new templates.MarkupAs(['exportButton'])], false), new templates.ViewInstance('l-popup', {'class': 'has-menu tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.EachBlock(new expressions.PathExpression(['archiveReasonOptions'], new expressions.ExpressionMeta('each archiveReasonOptions as #reason', 'each', void 0, '#reason')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#reason', ['text'], new expressions.ExpressionMeta('#reason.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['showConfirmation'], [new expressions.AliasPathExpression('#reason', [])]))], false)])], void 0, false)]))}, [new templates.MarkupAs(['archiveAllReasonMenu'])]), new templates.ViewInstance('l-popup', {'class': 'tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Also remove upcoming interviews and feedback reminders?'), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['closeConfirmationPopup'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('No, keep upcoming')], [new templates.ElementOn('click', new expressions.FnExpression(['selectArchiveReason'], [new expressions.PathExpression(['reason'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Yes, remove')], [new templates.ElementOn('click', new expressions.FnExpression(['selectArchiveReason'], [new expressions.PathExpression(['reason']), new expressions.LiteralExpression({'cleanInterviews': true})]))], false)], void 0, false)]))}, [new templates.MarkupAs(['archiveConfirmPopup'])])]);
  views.register('bulk-delete:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('bulk-delete:icon-error:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-error')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'viewbox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M15.0875976,13.1513746 L12.9835976,9.17237457 C12.4625976,8.20337457 11.6085976,6.61937457 11.0875976,5.65137457 L8.98459759,1.74437457 C8.46359759,0.775374566 7.60959759,0.775374566 7.08859759,1.74437457 L4.98559759,5.66737457 C4.46359759,6.63637457 3.61059759,8.23937457 3.08859759,9.20737457 L0.984597585,13.1503746 C0.463597585,14.1193746 0.936597585,14.9823746 2.03659759,14.9823746 L6.03659759,14.9823746 L10.0365976,14.9823746 L14.0365976,14.9823746 C15.1355976,14.9833746 15.6095976,14.1203746 15.0875976,13.1513746 L15.0875976,13.1513746 Z M9.03659759,12.9833746 L7.03659759,12.9833746 L7.03659759,10.9833746 L9.03659759,10.9833746 L9.03659759,12.9833746 L9.03659759,12.9833746 Z M9.03659759,9.98337457 L7.03659759,9.98337457 L7.03659759,5.98337457 L9.03659759,5.98337457 L9.03659759,9.98337457 L9.03659759,9.98337457 Z M9.03659759,9.98337457'), 'fill': new templates.Attribute('#010101')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('bulk-delete:index').template = new templates.Template([new templates.Comment('bulk-delete:index', [new templates.ComponentMarker()]), new templates.Element('button', {'class': new templates.Attribute('btn bulk-delete icon-only has-tip'), 'title': new templates.Attribute('Delete candidates')}, [new templates.ViewInstance('bulk-delete:icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['deleteMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom-right')]))], false), new templates.ViewInstance('l-popup', {'class': 'bulk-delete', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('h3', {'class': new templates.Attribute('popup-headline has-icon')}, [new templates.ViewInstance('bulk-delete:icon-delete', {}), new templates.Text('Delete '), new templates.DynamicText(new expressions.PathExpression(['count'], new expressions.ExpressionMeta('count'))), new templates.Text(' candidates')], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['selectMode']), new expressions.LiteralExpression('all')], void 0, new expressions.ExpressionMeta('if selectMode == \'all\'', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('all-selected-warning')}, [new templates.ViewInstance('bulk-delete:icon-error', {}), new templates.Text('You have selected all candidates in this list.')], void 0, false)]
  ]), new templates.Element('p', void 0, [new templates.Text('This is permanent. Are you sure?')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteMenu', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('dark-button transparent')}, [new templates.Text('No, Archive Instead')], [new templates.ElementOn('click', new expressions.FnExpression(['archiveReasonMenu', 'toggle'], [new expressions.PathExpression(['$element'])]))], false), new templates.Element('button', {'class': new templates.Attribute('btn submit')}, [new templates.Text('Yes, Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['confirmDelete'], []))], false)], void 0, false)]))}, [new templates.MarkupAs(['deleteMenu'])]), new templates.ViewInstance('l-popup', {'class': 'has-menu tall-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.EachBlock(new expressions.PathExpression(['archiveReasonOptions'], new expressions.ExpressionMeta('each archiveReasonOptions as #reason', 'each', void 0, '#reason')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#reason', ['text'], new expressions.ExpressionMeta('#reason.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['selectArchiveReason'], [new expressions.AliasPathExpression('#reason', [])]))], false)])], void 0, false)]))}, [new templates.MarkupAs(['archiveReasonMenu'])])]);
  views.register('bulk-email:index').template = new templates.Template([new templates.Comment('bulk-email:index', [new templates.ComponentMarker()]), new templates.Element('button', {'class': new templates.Attribute('btn bulk-email has-icon has-tip'), 'title': new templates.Attribute('Email candidates')}, [new templates.ViewInstance('icon-mail', {}), new templates.Element('span', {'class': new templates.Attribute('bulk-button-label')}, [new templates.Text('Email')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['emailPopup', 'toggle'], [new expressions.PathExpression(['$element'])]))], false), new templates.ViewInstance('l-popup', {'class': 'bulk-email-popup', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('h2', {'class': new templates.Attribute('popup-headline has-icon')}, [new templates.ViewInstance('icon-mail', {}), new templates.Text('Email candidates'), new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.Text('('), new templates.DynamicText(new expressions.PathExpression(['counts', 'total'], new expressions.ExpressionMeta('counts.total'))), new templates.Text(')')], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['step']), new expressions.LiteralExpression('draft')], void 0, new expressions.ExpressionMeta('if step == \'draft\'', 'if')), new expressions.OperatorExpression('==', [new expressions.PathExpression(['step']), new expressions.LiteralExpression('preview')], void 0, new expressions.ExpressionMeta('else if step == \'preview\'', 'else if'))], [
    [new templates.ViewInstance('bulk-email:email-draft', {})],
    [new templates.ViewInstance('bulk-email:email-preview', {})]
  ])]))}, [new templates.MarkupAs(['emailPopup'])])]);
  views.register('bulk-email:email-draft').template = new templates.Template([new templates.ViewInstance('email-editor', {'mode': 'bulk', 'draft': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['draft'], new expressions.ExpressionMeta('draft'))), new expressions.PathExpression(['draft'], new expressions.ExpressionMeta('draft')))}, [new templates.ComponentOn('send', new expressions.FnExpression(['setStep'], [new expressions.LiteralExpression('preview')])), new templates.ComponentOn('clear', new expressions.FnExpression(['cancel'], []))])]);
  views.register('bulk-email:email-preview').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('email-preview-controls')}, [new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('dark-button has-icon '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['preview', 'index']), new expressions.LiteralExpression(0)], void 0, new expressions.ExpressionMeta('if preview.index == 0', 'if'))], [
    [new templates.Text('disabled')]
  ])])), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-single-caret-left', {}), new templates.Text('Prev')], [new templates.ElementOn('click', new expressions.FnExpression(['setPreview'], [new expressions.OperatorExpression('-', [new expressions.PathExpression(['preview', 'index']), new expressions.LiteralExpression(1)])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.OperatorExpression('+', [new expressions.PathExpression(['preview', 'index']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('preview.index + 1')))], void 0, false), new templates.Text(' of '), new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.PathExpression(['counts', 'total'], new expressions.ExpressionMeta('counts.total')))], void 0, false), new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('dark-button has-icon preview-next-button '), new templates.ConditionalBlock([new expressions.OperatorExpression('<', [new expressions.PathExpression(['preview', 'index']), new expressions.OperatorExpression('-', [new expressions.PathExpression(['counts', 'total']), new expressions.LiteralExpression(1)])], void 0, new expressions.ExpressionMeta('unless preview.index < counts.total - 1', 'unless'))], [
    [new templates.Text('disabled')]
  ])])), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-single-caret-right', {}), new templates.Text('Next')], [new templates.ElementOn('click', new expressions.FnExpression(['setPreview'], [new expressions.OperatorExpression('+', [new expressions.PathExpression(['preview', 'index']), new expressions.LiteralExpression(1)])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ConditionalBlock([new expressions.PathExpression(['preview', 'draft', 'modified'], new expressions.ExpressionMeta('if preview.draft.modified', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('email-change-message')}, [new templates.Text('This email has been edited.')], void 0, false)]
  ])], void 0, false), new templates.ViewInstance('email-editor', {'mode': 'preview', 'draft': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['preview', 'draft'], new expressions.ExpressionMeta('preview.draft'))), new expressions.PathExpression(['preview', 'draft'], new expressions.ExpressionMeta('preview.draft')))}, [new templates.MarkupAs(['previewEditor']), new templates.ComponentOn('clear', new expressions.FnExpression(['cancel'], []))]), new templates.Element('div', {'class': new templates.Attribute('bulk-email-send-wrapper')}, [new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Go back')], [new templates.ElementOn('click', new expressions.FnExpression(['setStep'], [new expressions.LiteralExpression('draft')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ViewInstance('l-dropdown', {'buttonClass': 'dark-button has-icon', 'prompt': 'Delay until...', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['preview', 'draft', 'delay'], new expressions.ExpressionMeta('preview.draft.delay'))), new expressions.PathExpression(['preview', 'draft', 'delay'], new expressions.ExpressionMeta('preview.draft.delay'))), 'label': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('icon-clock', {}), new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.PathExpression(['preview', 'draft', 'delay']), new expressions.LiteralExpression('Delay until...')], void 0, new expressions.ExpressionMeta('preview.draft.delay || \'Delay until...\'')))])), 'options': [
    {'value': null, 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Send now')]))},
    {'value': '1 day', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Tomorrow')]))},
    {'value': '4 days', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('4 days')]))},
    {'value': '1 weekday', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Next weekday')]))},
    {'value': '1 week', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('1 week')]))},
    {'value': '2 weeks', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('2 weeks')]))},
    {'value': '1 month', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('1 month')]))}
  ]}), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Send all'), new templates.Element('small', void 0, [new templates.Text('('), new templates.DynamicText(new expressions.PathExpression(['counts', 'total'], new expressions.ExpressionMeta('counts.total'))), new templates.Text(')')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['submit'], []))], false)], void 0, false)], void 0, false)]);
  views.register('bulk-email:notif-sent').template = new templates.Template([new templates.Element('span', void 0, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'sent'], new expressions.ExpressionMeta('if #notif.context.sent', 'if'))], [
    [new templates.DynamicText(new expressions.RelativePathExpression(['length'], new expressions.ExpressionMeta('this.length'))), new templates.Text(' emails sent. ')]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'scheduled'], new expressions.ExpressionMeta('if #notif.context.scheduled', 'if'))], [
    [new templates.DynamicText(new expressions.RelativePathExpression(['length'], new expressions.ExpressionMeta('this.length'))), new templates.Text(' emails scheduled to be sent later.')]
  ])], void 0, false)]);
  views.register('bulk-share:index').template = new templates.Template([new templates.Comment('bulk-share:index', [new templates.ComponentMarker()]), new templates.Element('button', {'class': new templates.Attribute('btn has-icon bulk-share has-tip'), 'title': new templates.Attribute('Share candidates')}, [new templates.ViewInstance('icon-share', {}), new templates.Element('span', {'class': new templates.Attribute('bulk-button-label')}, [new templates.Text('Share')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['sharePopup', 'toggle'], [new expressions.PathExpression(['$element'])]))], false), new templates.ViewInstance('l-popup', {'class': 'share-popup-menu', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('h2', {'class': new templates.Attribute('popup-headline has-icon')}, [new templates.ViewInstance('icon-share', {}), new templates.Text('Share candidates'), new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.Text('('), new templates.DynamicText(new expressions.PathExpression(['count'], new expressions.ExpressionMeta('count'))), new templates.Text(')')], void 0, false)], void 0, false), new templates.Element('div', void 0, [new templates.ViewInstance('l-multi-suggest', {'class': 'dark-suggest recipient-input', 'matchOnClick': true, 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['recipients'], new expressions.ExpressionMeta('recipients'))), new expressions.PathExpression(['recipients'], new expressions.ExpressionMeta('recipients'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), 'placeholder': 'Recipients', 'label': new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#item', ['id'], new expressions.ExpressionMeta('#item.id')))]), 'prepend': new templates.Template([new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user'))), new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user')))})])}, [new templates.MarkupAs(['shareSuggest'])])], void 0, false), new templates.Element('div', void 0, [new templates.ViewInstance('l-note-textarea', {'class': 'dark-input', 'users': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['message'], new expressions.ExpressionMeta('message'))), new expressions.PathExpression(['message'], new expressions.ExpressionMeta('message'))), 'placeholder': 'Message'}, [new templates.MarkupAs(['message']), new templates.ComponentOn('submit', new expressions.FnExpression(['submit'], []))])], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['showScore'], new expressions.ExpressionMeta('if showScore', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('l-score-thumbs', {'score': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['score'], new expressions.ExpressionMeta('score'))), new expressions.PathExpression(['score'], new expressions.ExpressionMeta('score')))})],
    [new templates.Element('a', {'class': new templates.Attribute('link dark add-rating'), 'href': new templates.Attribute('#')}, [new templates.Text('Add rating...')], [new templates.ElementOn('click', new expressions.FnExpression(['toggleScore'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['cancel'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Send'), new templates.Element('small', void 0, [new templates.Text('('), new templates.DynamicText(new expressions.PathExpression(['count'], new expressions.ExpressionMeta('count'))), new templates.Text(')')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['submit'], []))], false)], void 0, false)]))}, [new templates.MarkupAs(['sharePopup'])])]);
  views.register('bulk-stage-change:icon-progress:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-history-progress')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M2.89042847,4.52415899 C4.23573121,2.63796976 6.72643398,4.78178845e-07 10.1344804,0 C15.4388974,-8.2309569e-07 15.2936452,3.11180268 22.1251496,3.11180215 C28.9566541,3.1118017 29.4782579,1.61506862 29.4782579,1.61506862 L40,17.2323741 C40,17.2323741 37.1301,19.857009 33.9880855,19.857009 C30.8460711,19.857009 24.8437331,16.9137768 21.4767708,16.9137768 C18.6204707,16.9137768 15.7302266,18.5187629 13.7574077,20.5503649 L24.7197658,37.0977823 C25.297401,37.9697089 25.0419832,39.1339095 24.1492743,39.6980973 C23.2565653,40.262285 22.0646159,40.0128134 21.4869807,39.1408869 L0.309098615,7.17338001 C-0.268536584,6.30145348 -0.0131188478,5.13725283 0.879590095,4.57306508 C1.50780285,4.17603765 2.28420396,4.18194645 2.89042847,4.52415899 Z M2.89042847,4.52415899')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('bulk-stage-change:icon-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.557,8.255h-0.539c0.572-0.059,1.149-0.65,1.082-1.305 c-0.066-0.655-0.584-1.138-1.158-1.081L8.233,6.351L7.564,6.36c0,0,0.967-0.438,0.224-3.936c-0.74-3.496-2.7-2.184-2.7-2.184\nS5.062,3.228,4.957,3.652C4.852,4.076,2.554,8.545,2.554,8.545c0,0.236-1.423,0.473-1.422,0.712c0.017,2.056,0,3.814,0,5.944\nC2.658,14.803,3.501,16,6.762,16c1.064,0,2.369-0.174,3.491-0.358l2.935-0.3c0.51-0.053,0.794-0.572,0.803-1.279\nc-0.004-0.812-0.607-0.942-0.973-1.078c0,0,1.712,0.113,1.564-1.292c0-0.868-0.646-0.989-1.125-1.064h0.34\nc0.656-0.067,1.132-0.653,1.065-1.308C14.795,8.666,14.211,8.189,13.557,8.255z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('bulk-stage-change:index').template = new templates.Template([new templates.Comment('bulk-stage-change:index', [new templates.ComponentMarker()]), new templates.Element('button', {'class': new templates.Attribute('btn has-icon bulk-stage-change has-tip'), 'title': new templates.Attribute('Change stage')}, [new templates.ViewInstance('bulk-stage-change:icon-progress', {}), new templates.Element('span', {'class': new templates.Attribute('bulk-button-label')}, [new templates.Text('Stage')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['stageMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom-left')]))], false), new templates.ViewInstance('l-popup', {'class': 'darker has-menu tall-option caps-option stage-menu', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.EachBlock(new expressions.PathExpression(['stageOptions'], new expressions.ExpressionMeta('each stageOptions as #stage', 'each', void 0, '#stage')), [new templates.ConditionalBlock([new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#stage', ['divider']), new expressions.AliasPathExpression('#stage', ['typeDivider'])], void 0, new expressions.ExpressionMeta('unless #stage.divider || #stage.typeDivider', 'unless')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#stage', ['text'], new expressions.ExpressionMeta('#stage.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['selectStage'], [new expressions.AliasPathExpression('#stage', [])]))], false)],
    [new templates.Element('li', {'class': new templates.Attribute('divider')}, [new templates.Element('span', void 0, [], void 0, false)], void 0, false)]
  ])]), new templates.ConditionalBlock([new expressions.OperatorExpression('>', [new expressions.PathExpression(['hiredReasonOptions', 'length']), new expressions.LiteralExpression(0)], void 0, new expressions.ExpressionMeta('if hiredReasonOptions.length > 0', 'if'))], [
    [new templates.Element('li', {'class': new templates.Attribute('divider action-divider')}, [new templates.Element('span', void 0, [], void 0, false)], void 0, false)]
  ]), new templates.EachBlock(new expressions.PathExpression(['hiredReasonOptions'], new expressions.ExpressionMeta('each hiredReasonOptions as #reason', 'each', void 0, '#reason')), [new templates.Element('li', {'class': new templates.Attribute('option action')}, [new templates.Element('a', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#reason', ['text'], new expressions.ExpressionMeta('#reason.text')))], void 0, false), new templates.ViewInstance('bulk-stage-change:icon-hire', {})], [new templates.ElementOn('click', new expressions.FnExpression(['selectArchiveReason'], [new expressions.AliasPathExpression('#reason', [])]))], false)])], void 0, false)]))}, [new templates.MarkupAs(['stageMenu'])])]);
  views.register('bulk-tag:icon-tag:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-tag')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8.57543251,0.570992566 C9.33518071,-0.188997532 10.5632763,-0.190232657 11.319981,0.56671304 L15.4317057,4.6797468 C16.193772,5.44205578 16.186495,6.66585997 15.4274275,7.42516918 L8.58346121,14.2713145 C8.53876079,14.3160292 8.49243912,14.3581173 8.44468758,14.397579 C7.55790567,15.3814977 6.27370542,16 4.84509211,16 C2.1692215,16 -5.5067062e-14,13.8300878 -5.5067062e-14,11.1533652 C-5.5067062e-14,9.71244038 0.628607895,8.41838161 1.62646849,7.53062665 C1.65970295,7.49177765 1.69470286,7.45391301 1.73146623,7.41713792 L8.57543251,0.570992566 Z M6.46898462,11.4441633 C6.46898462,10.3734743 5.60129602,9.50550942 4.53094777,9.50550942 C3.46059953,9.50550942 2.59291093,10.3734743 2.59291093,11.4441633 C2.59291093,12.5148524 3.46059953,13.3828172 4.53094777,13.3828172 C5.60129602,13.3828172 6.46898462,12.5148524 6.46898462,11.4441633 Z M6.46898462,11.4441633'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('bulk-tag:index').template = new templates.Template([new templates.Comment('bulk-tag:index', [new templates.ComponentMarker()]), new templates.Element('button', {'class': new templates.Attribute('btn bulk-tag-toggle has-icon has-tip'), 'title': new templates.Attribute('Add or remove tags')}, [new templates.ViewInstance('bulk-tag:icon-tag', {}), new templates.Element('span', {'class': new templates.Attribute('bulk-button-label')}, [new templates.Text('Tag')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['tagMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom-left')]))], false), new templates.ViewInstance('l-popup', {'class': 'bulk-edit-tags', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('h4', void 0, [new templates.Text('Tags to be '), new templates.ConditionalBlock([new expressions.PathExpression(['addTags'], new expressions.ExpressionMeta('if addTags', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('added')],
    [new templates.Text('removed')]
  ])], void 0, false), new templates.ViewInstance('l-multi-suggest', {'inherit': true, 'placeholder': 'Enter tags', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['tagIds'], new expressions.ExpressionMeta('tagIds'))), new expressions.PathExpression(['tagIds'], new expressions.ExpressionMeta('tagIds'))), 'filter': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), 'sort': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), 'class': 'tags', 'prepend': new templates.Template([new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'count'], new expressions.ExpressionMeta('#result.option.count')))], void 0, false)])}, [new templates.MarkupAs(['tagsSuggest']), new templates.ComponentOn('create', new expressions.FnExpression(['createTagsSuggest'], []))]), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('bulk-toggle-mode link dark'), 'href': new templates.Attribute('#')}, [new templates.ConditionalBlock([new expressions.PathExpression(['addTags'], new expressions.ExpressionMeta('if addTags', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Remove tags instead')],
    [new templates.Text('Add tags instead')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['toggleMode'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('btn submit'), 'title': new templates.DynamicAttribute(new templates.Template([new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['addTags'], new expressions.ExpressionMeta('if addTags', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Add tags')],
    [new templates.Text('Remove tags')]
  ])]))}, [new templates.Text('Submit')], [new templates.ElementOn('click', new expressions.FnExpression(['submit'], []))], false)], void 0, false)]))}, [new templates.MarkupAs(['tagMenu'])])]);
  views.register('calendar-resource-input:index').template = new templates.Template([new templates.Comment('calendar-resource-input:index', [new templates.ComponentMarker()]), new templates.ViewInstance('l-grouped-suggest', {'class': 'grouped-suggest', 'inherit': true, 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value'))), new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value'))), 'other': 'Other Resources', 'sort': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options'))), new expressions.PathExpression(['options'], new expressions.ExpressionMeta('options'))), 'prepend': new templates.Template([new templates.Element('i', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('available-'), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'availableClass'], new expressions.ExpressionMeta('#result.option.availableClass')))]))}, [], void 0, false)])}, [new templates.MarkupAs(['suggest']), new templates.ComponentOn('select', new expressions.FnExpression(['select'], []))])]);
  views.register('card-editor:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('card-editor:icon-undeleteable:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-undeleteable')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12,13.5c0,0.275-0.225,0.5-0.5,0.5S11,13.775,11,13.5v-2.764l-2,1V13.5\nC9,13.775,8.775,14,8.5,14C8.225,14,8,13.775,8,13.5v-1.264l-2,1V13.5C6,13.775,5.775,14,5.5,14c-0.199,0-0.372-0.118-0.453-0.287\nL3,14.736V15.5C3,15.775,3.225,16,3.5,16h10c0.275,0,0.5-0.225,0.5-0.5V9.236l-2,1V13.5L12,13.5z M15.553,3.105l-0.564,0.283\nC14.936,3.167,14.736,3,14.5,3H12V2c0-2-1-2-2-2H7C5,0,5,1,5,2v1H2.5C2.225,3,2,3.225,2,3.5v1C2,4.775,2.225,5,2.5,5S3,5.225,3,5.5\nv3.882l-3,1.493v0.891l15.105-7.555L16,3.766V2.875L15.553,3.105L15.553,3.105z M6,7.882l-1,0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\nS6,5.811,6,6.086V7.882L6,7.882z M9,6.382l-1,0.5V6.086c0-0.275,0.225-0.5,0.5-0.5c0.275,0,0.5,0.225,0.5,0.5V6.382L9,6.382z M10,3\nH7V2h3V3L10,3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('card-editor:icon-caret-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-down')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.6741598,11.3413318 L8.03952616,11.7324251 L8.40489252,11.3413318 L14.8653664,4.42595055 L14.1346336,3.74328687 L7.6741598,10.6586682 L8.40489252,10.6586682 L1.86536636,3.65866816 L1.13463364,4.34133184 L7.6741598,11.3413318 Z M7.6741598,11.3413318'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('card-editor:icon-copy:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-copy')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M1,16h11v-3h-2v1H3V5h1v8h11V4.125L11.163,0H4v3H1V16z M10,2v3h3v6H6V2H10z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('card-editor:icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('card-editor:icon-arrow-up:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-arrow-up')])), 'width': new templates.Attribute('15px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 15')}, [new templates.Element('path', {'d': new templates.Attribute('M6.791 5.414L6.307 5.864C5.61 6.486 5.039 7.006 4.583 7.429 4.312 7.681 4.141 7.843 4.062 7.92L3 7.052C3.023 7.03 3.067 6.987 3.135 6.922c0.111-0.105 0.248-0.233 0.41-0.384 0.461-0.429 1.04-0.955 1.744-1.583l1.683-1.502L7.48 3 7.99 3.454 12 7.032 10.981 7.94 8.23 5.487V13h-1.44V5.414z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('card-editor:icon-arrow-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-arrow-down')])), 'width': new templates.Attribute('15px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 15')}, [new templates.Element('path', {'d': new templates.Attribute('M8.209 10.586l0.484-0.45c0.696-0.622 1.268-1.142 1.723-1.564 0.271-0.252 0.443-0.415 0.522-0.492L12 8.948c-0.023 0.022-0.067 0.065-0.135 0.13 -0.111 0.105-0.248 0.232-0.41 0.383 -0.461 0.43-1.04 0.955-1.744 1.583l-1.683 1.502L7.52 13 7.01 12.546 3 8.969 4.019 8.06l2.75 2.454V3h1.44V10.586z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('card-editor:icon-radio-button:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-radio-button')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewbox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'id': new templates.Attribute('Oval-2-copy-2'), 'sketch:type': new templates.Attribute('MSShapeGroup'), 'd': new templates.Attribute('M15.98,7.99C15.98,3.578,12.402,0,7.99,0S0,3.578,0,7.99\ns3.578,7.99,7.99,7.99S15.98,12.402,15.98,7.99L15.98,7.99z M0.888,7.99c0-3.922,3.18-7.103,7.103-7.103\nc3.923,0,7.103,3.18,7.103,7.103c0,3.923-3.18,7.103-7.103,7.103C4.068,15.093,0.888,11.913,0.888,7.99L0.888,7.99z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('card-editor:icon-text-input:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-text-input')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewbox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M4,11.158V12h2v-0.842V4.842V4H4v0.842V11.158L4,11.158z M6.667,13H7\nv-1H6.667H6.333H6v1h0.333H6.667L6.667,13z M3.667,13H4v-1H3.667H3.333H3v1h0.333H3.667L3.667,13z M7,3H6v1h1V3L7,3z M4,3H3v1h1V3\nL4,3z M0,2.824v10.352C0,14.736,1.255,16,2.824,16h10.352C14.736,16,16,14.744,16,13.176V2.824C16,1.264,14.744,0,13.176,0H2.824\nC1.264,0,0,1.255,0,2.824L0,2.824L0,2.824z M15.059,2.824v10.352c0,1.045-0.84,1.883-1.883,1.883H2.824\nc-1.045,0-1.882-0.839-1.882-1.883V2.824c0-1.045,0.839-1.882,1.882-1.882h10.352C14.221,0.941,15.059,1.78,15.059,2.824\nL15.059,2.824z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('card-editor:index').template = new templates.Template([new templates.Comment('card-editor:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.PathExpression(['open'], new expressions.ExpressionMeta('if open', 'if'))], [
    [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('card-editor '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.Element('div', {'class': new templates.Attribute('template-editor-header')}, [new templates.Element('input', {'class': new templates.Attribute('template-title classic-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['pending', 'text'], new expressions.ExpressionMeta('pending.text'))), 'placeholder': new templates.Attribute('Title these questions')}, null, void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['pendingTemplate', 'type']), new expressions.LiteralExpression('interview')], void 0, new expressions.ExpressionMeta('if pendingTemplate.type === \'interview\'', 'if'))], [
      [new templates.Element('p', {'class': new templates.Attribute('card-template-buttons-subtext')}, [new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['templateStages']), new expressions.PathExpression(['pendingTemplate', 'id']), void 0, new expressions.ExpressionMeta('if templateStages[pendingTemplate.id]', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
        [new templates.Text('Default for "'), new templates.DynamicText(new expressions.RelativePathExpression(['text'], new expressions.ExpressionMeta('this.text'))), new templates.Text('" '), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Change stage')], [new templates.ElementOn('click', new expressions.FnExpression(['setDefaults', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
        [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Make default for stage')], [new templates.ElementOn('click', new expressions.FnExpression(['setDefaults', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
      ])], void 0, false)]
    ]), new templates.Element('div', {'class': new templates.Attribute('template-editor-body existing-fields')}, [new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['pending', 'fields'], new expressions.ExpressionMeta('each pending.fields as #field, #i', 'each', void 0, '#field', '#i')), [new templates.Element('li', {'class': new templates.Attribute('card-template-editor-field')}, [new templates.Element('div', {'class': new templates.Attribute('card-template-editor-field-content')}, [new templates.Block(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('on #field.type as #type', 'on', void 0, '#type')), [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#type', [], new expressions.ExpressionMeta('#type'))), new templates.Text(':editor')]), {'optional': true})]), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#field', ['type']), new expressions.LiteralExpression('score')], void 0, new expressions.ExpressionMeta('unless #field.type == \'score\'', 'unless')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('a', {'class': new templates.Attribute('card-field-options has-tip'), 'data-index': new templates.DynamicAttribute(new expressions.AliasPathExpression('#i', [], new expressions.ExpressionMeta('#i'))), 'title': new templates.Attribute('Options'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('card-editor:icon-caret-down', {})], [new templates.ElementOn('click', new expressions.FnExpression(['cardFieldMenu', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
      [new templates.Element('span', {'class': new templates.Attribute('card-field-options has-tip disabled'), 'title': new templates.Attribute('Overall score is required on feedback forms')}, [new templates.ViewInstance('card-editor:icon-undeleteable', {})], void 0, false)]
    ]), new templates.Element('label', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('card-required '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#field', ['required']), new expressions.LiteralExpression(true)], void 0, new expressions.ExpressionMeta('if #field.required == true', 'if'))], [
      [new templates.Text('active')]
    ])]))}, [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#field', ['required']), new expressions.LiteralExpression(true)], void 0, new expressions.ExpressionMeta('if #field.required == true', 'if'))], [
      [new templates.Element('span', {'class': new templates.Attribute('required-active-banner has-tip'), 'title': new templates.Attribute('Question is required. Click to make not required.')}, [], void 0, false)]
    ]), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#field', ['required']), new expressions.LiteralExpression(true)], void 0, new expressions.ExpressionMeta('if #field.required == true', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.AliasPathExpression('#field', ['required'], new expressions.ExpressionMeta('#field.required'))), 'class': new templates.Attribute('required-checkbox')}, null, void 0, false)],
      [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.AliasPathExpression('#field', ['required'], new expressions.ExpressionMeta('#field.required'))), 'class': new templates.Attribute('required-checkbox has-tip'), 'title': new templates.Attribute('Make question required')}, null, void 0, false)]
    ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('move-question-controls')}, [new templates.Element('a', {'class': new templates.Attribute('up has-tip'), 'title': new templates.Attribute('Move question up'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('card-editor:icon-arrow-up', {})], [new templates.ElementOn('click', new expressions.FnExpression(['moveField'], [new expressions.AliasPathExpression('#i', []), new expressions.LiteralExpression(-1)])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('down has-tip'), 'title': new templates.Attribute('Move question down'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('card-editor:icon-arrow-down', {})], [new templates.ElementOn('click', new expressions.FnExpression(['moveField'], [new expressions.AliasPathExpression('#i', []), new expressions.LiteralExpression(1)])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('new-field')}, [new templates.Element('a', {'class': new templates.Attribute('btn-large has-icon'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('card-editor:icon-plus', {'class': 'prepended-icon'}), new templates.Text('Add another question')], [new templates.ElementOn('click', new expressions.FnExpression(['newField'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('settings')], void 0, new expressions.ExpressionMeta('unless mode == \'settings\'', 'unless'))], [
      [new templates.ViewInstance('card-editor:card-publish', {})]
    ])], void 0, false)]
  ]), new templates.ViewInstance('l-popup', {'class': 'darker has-menu has-icon tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('card-editor:icon-copy', {}), new templates.Text('Duplicate question')], [new templates.ElementOn('click', new expressions.FnExpression(['duplicateField'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('card-editor:icon-delete', {}), new templates.Text('Delete question')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteField'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['cardFieldMenu'])])]);
  views.register('card-editor:card-publish').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card-editor-button-list')}, [new templates.Element('button', {'class': new templates.Attribute('submit action publishChanges')}, [new templates.Text('Save form')], [new templates.ElementOn('click', new expressions.FnExpression(['saveTemplate'], []))], false), new templates.Element('a', {'class': new templates.Attribute('action card-editor-cancel'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('settings')], void 0, new expressions.ExpressionMeta('unless mode == \'settings\'', 'unless'))], [
    [new templates.Element('a', {'class': new templates.Attribute('action card-editor-reset'), 'href': new templates.Attribute('#')}, [new templates.Text('Reset')], [new templates.ElementOn('click', new expressions.FnExpression(['resetTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ])], void 0, false)]);
  views.register('connection-alert:index').template = new templates.Template([new templates.Comment('connection-alert:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('alert-container')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('!==', [new expressions.AliasPathExpression('#root', ['$connection', 'state']), new expressions.LiteralExpression('connected')], void 0, new expressions.ExpressionMeta('if #root.$connection.state !== \'connected\'', 'if'))], [
    [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('alert '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['$connection', 'errorType']), new expressions.LiteralExpression('version')], void 0, new expressions.ExpressionMeta('if $connection.errorType === \'version\'', 'if'))], [
      [new templates.Text('light')]
    ])]))}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$connection', 'state']), new expressions.LiteralExpression('stopped')], void 0, new expressions.ExpressionMeta('if #root.$connection.state === \'stopped\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('span', void 0, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$connection', 'errorType']), new expressions.LiteralExpression('version')], void 0, new expressions.ExpressionMeta('if #root.$connection.errorType === \'version\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
        [new templates.Text('Lever has received updates and needs a refresh')],
        [new templates.Text('An error occured, and we were unable to reconnect')]
      ])], void 0, false), new templates.Element('br', void 0, null, void 0, false), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Reload app')], [new templates.ElementOn('click', new expressions.FnExpression(['reload'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
      [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.FnExpression(['sentenceCase'], [new expressions.AliasPathExpression('#root', ['$connection', 'state'])], void 0, new expressions.ExpressionMeta('sentenceCase(#root.$connection.state)'))), new templates.Text(', attempting to reconnect')], void 0, false), new templates.Element('br', void 0, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('reconnect')}, [new templates.ConditionalBlock([new expressions.PathExpression(['hideReconnect'], new expressions.ExpressionMeta('unless hideReconnect', 'unless'))], [
        [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Reconnect manually')], [new templates.ElementOn('click', new expressions.FnExpression(['reconnect'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
      ])], void 0, false)]
    ])], void 0, false)]
  ])], void 0, false)]);
  views.register('drafts:index').template = new templates.Template([new templates.Comment('drafts:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.PathExpression(['draftsCount'], new expressions.ExpressionMeta('if draftsCount', 'if'))], [
    [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-edit', {}), new templates.Text('Drafts '), new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.Text('('), new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this'))), new templates.Text(')')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['page', 'drafts', 'toggle'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ]), new templates.ViewInstance('l-sheets', {'class': 'drafts', 'collection': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['drafts'], new expressions.ExpressionMeta('drafts'))), new expressions.PathExpression(['drafts'], new expressions.ExpressionMeta('drafts'))), 'types': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sheetTypes'], new expressions.ExpressionMeta('sheetTypes'))), new expressions.PathExpression(['sheetTypes'], new expressions.ExpressionMeta('sheetTypes')))}, [new templates.MarkupAs(['page', 'drafts']), new templates.ComponentOn('add', new expressions.FnExpression(['addDraft'], [])), new templates.ComponentOn('delete', new expressions.FnExpression(['deleteDraft'], [])), new templates.ComponentOn('open', new expressions.FnExpression(['openSheet'], [])), new templates.ComponentOn('close', new expressions.FnExpression(['closeSheet'], []))])]);
  views.register('file-attachment:icon-paperclip:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-paperclip')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'fill': new templates.Attribute('#3F484B'), 'd': new templates.Attribute('M3.036,14.696c-0.614,0-1.219-0.284-1.788-0.853l-0.083-0.082c-0.586-0.578-2.305-2.956,0.008-5.391 c1.165-1.226,2.771-2.813,4.471-4.493C6.558,2.976,7.509,2.036,8.455,1.09c1.708-1.707,2.958-1.317,4.894,0.528 c2.288,2.178,2.707,4.322,1.718,5.463c-1.314,1.515-6.285,6.488-6.496,6.699c-0.278,0.279-0.729,0.279-1.008,0 c-0.278-0.278-0.278-0.729,0-1.008c0.051-0.051,5.146-5.148,6.427-6.625c0.294-0.339,0.339-1.629-1.624-3.498 c-1.13-1.076-1.465-1.989-2.902-0.551c-0.948,0.948-1.901,1.89-2.817,2.793C4.954,6.564,3.355,8.144,2.207,9.353 c-1.349,1.421-0.656,2.788-0.041,3.395l0.089,0.088c0.524,0.523,0.952,0.665,1.718-0.102c0.213-0.213,0.656-0.644,1.213-1.185 C6.729,10.05,9.6,7.26,10.18,6.534c0.184-0.23,0.452-0.787,0.196-1.011c-0.353-0.31-1.002,0.315-1.192,0.514 c-2.012,2.112-4.64,4.643-4.666,4.667c-0.283,0.273-0.734,0.265-1.007-0.02c-0.273-0.284-0.265-0.734,0.019-1.007 c0.026-0.025,2.633-2.535,4.622-4.624c1.291-1.356,2.48-1.201,3.162-0.604c0.832,0.727,0.636,2.154-0.021,2.974 c-0.586,0.734-2.847,2.945-5.113,5.146c-0.55,0.536-0.988,0.96-1.199,1.171C4.346,14.378,3.686,14.696,3.036,14.696L3.036,14.696z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('file-attachment:index').template = new templates.Template([new templates.Comment('file-attachment:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('link has-icon')}, [new templates.ViewInstance('l-upload', {'class': 'fileupload', 'url': new templates.ParentWrapper(new templates.DynamicText(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.uploadFile'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('type'), new expressions.LiteralExpression('email-template'), new expressions.LiteralExpression('directory'), new expressions.AttributePathExpression('directory', [])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.uploadFile\', {type: \'email-template\', directory: @directory})'))), new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.uploadFile'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('type'), new expressions.LiteralExpression('email-template'), new expressions.LiteralExpression('directory'), new expressions.AttributePathExpression('directory', [])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.uploadFile\', {type: \'email-template\', directory: @directory})'))), 'responses': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['responses'], new expressions.ExpressionMeta('responses'))), new expressions.PathExpression(['responses'], new expressions.ExpressionMeta('responses'))), 'multiple': true, 'error': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['error'], new expressions.ExpressionMeta('error'))), new expressions.PathExpression(['error'], new expressions.ExpressionMeta('error')))}), new templates.Element('span', {'class': new templates.Attribute('pseudo-placeholder')}, [new templates.ViewInstance('file-attachment:icon-paperclip', {}), new templates.Text('Attach')], void 0, false)], void 0, false)]);
  views.register('email-editor:icon-email-token:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-email-token')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.242,11.688c-0.359-0.418-0.314-1.049,0.104-1.41l3.362-2.904l-3.322-2.582\nc-0.436-0.34-0.516-0.968-0.176-1.403c0.338-0.438,0.967-0.518,1.402-0.176l4.286,3.33c0.235,0.185,0.378,0.465,0.386,0.765\nc0.008,0.299-0.119,0.586-0.347,0.782l-4.285,3.702c-0.188,0.163-0.422,0.243-0.653,0.243C10.719,12.034,10.44,11.918,10.242,11.688\nz M4.632,11.791L0.346,8.089C0.119,7.894-0.007,7.606,0,7.307c0.008-0.3,0.15-0.58,0.386-0.765l4.286-3.33\nC5.107,2.87,5.735,2.95,6.075,3.388c0.339,0.436,0.26,1.063-0.176,1.403L2.577,7.374l3.362,2.904\nc0.418,0.361,0.464,0.992,0.104,1.41c-0.198,0.23-0.478,0.347-0.758,0.347C5.054,12.034,4.82,11.954,4.632,11.791z M10,7.5\nC10,6.671,9.328,6,8.5,6C7.671,6,7,6.671,7,7.5S7.671,9,8.5,9C9.328,9,10,8.329,10,7.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-editor:icon-clock:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-clock')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.10709589,7.92869178 C0.10709589,12.2866096 3.6400274,15.8191027 7.99750685,15.8191027 C12.3547671,15.8191027 15.8879178,12.2866096 15.8879178,7.92869178 C15.8879178,3.57077397 12.3547671,0.0382808219 7.99750685,0.0382808219 C3.6400274,0.0382808219 0.10709589,3.57077397 0.10709589,7.92869178 Z M2.07969863,7.92869178 C2.07969863,4.66578767 4.73460274,2.01088356 7.99750685,2.01088356 C11.2606301,2.01088356 13.9153151,4.66578767 13.9153151,7.92869178 C13.9153151,11.1920342 11.2606301,13.8465 7.99750685,13.8465 C4.73460274,13.8465 2.07969863,11.1920342 2.07969863,7.92869178 Z M11.8256712,9.69723973 L8.70457534,7.58874658 L8.70457534,3.96003425 C8.70457534,3.87323973 8.66906849,3.78863699 8.60835616,3.72704795 C8.54720548,3.66589726 8.46238356,3.63082877 8.37580822,3.63082877 L7.51246575,3.63082877 C7.42545205,3.63082877 7.34106849,3.66589726 7.27991781,3.72704795 C7.21876712,3.78863699 7.18369863,3.87323973 7.18369863,3.96003425 L7.18369863,8.24518493 C7.18369863,8.33197945 7.21876712,8.41680137 7.27991781,8.47795205 C7.30468493,8.50271918 7.33339726,8.52332192 7.36473973,8.53888356 L11.0013425,10.9750479 C11.056137,11.0112123 11.1194795,11.0305 11.1836986,11.0305 C11.2071507,11.0305 11.2303836,11.0278699 11.2533973,11.0228288 C11.340411,11.0044178 11.415589,10.9513767 11.4631507,10.8755411 L11.9207945,10.1437055 C12.0146027,9.99378767 11.9725205,9.79608904 11.8256712,9.69723973 Z'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-editor:index').template = new templates.Template([new templates.Comment('email-editor:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('email-editor')}, [new templates.Element('div', {'class': new templates.Attribute('email-to')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('bulk')], void 0, new expressions.ExpressionMeta('if mode === \'bulk\'', 'if')), new expressions.OperatorExpression('==', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('interview')], void 0, new expressions.ExpressionMeta('else if mode == \'interview\'', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [],
    [new templates.Element('div', {'class': new templates.Attribute('email-field-container')}, [new templates.Element('span', {'class': new templates.Attribute('email-label')}, [new templates.Text('To:')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-recipient')}, [new templates.DynamicText(new expressions.PathExpression(['draft', 'message', 'to'], new expressions.ExpressionMeta('draft.message.to')))], void 0, false)], void 0, false)],
    [new templates.Element('div', {'class': new templates.Attribute('email-field-container')}, [new templates.Element('input', {'class': new templates.Attribute('email-input dark-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['draft', 'message', 'to'], new expressions.ExpressionMeta('draft.message.to')))}, null, [new templates.MarkupAs(['toInput'])], false), new templates.Element('label', {'class': new templates.Attribute('email-label')}, [new templates.Text('To:')], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['showCC'], new expressions.ExpressionMeta('unless showCC', 'unless'))], [
      [new templates.Element('div', {'class': new templates.Attribute('email-field-toggles')}, [new templates.Element('a', {'class': new templates.Attribute('dark link'), 'href': new templates.Attribute('#')}, [new templates.Text('CC / BCC')], [new templates.ElementOn('click', new expressions.FnExpression(['showCC'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]
    ])], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.PathExpression(['showCC'], new expressions.ExpressionMeta('if showCC', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('email-field-container')}, [new templates.Element('input', {'class': new templates.Attribute('email-input dark-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['draft', 'message', 'cc'], new expressions.ExpressionMeta('draft.message.cc')))}, null, void 0, false), new templates.Element('label', {'class': new templates.Attribute('email-label')}, [new templates.Text('CC:')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-field-container')}, [new templates.Element('input', {'class': new templates.Attribute('email-input dark-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['draft', 'message', 'bcc'], new expressions.ExpressionMeta('draft.message.bcc')))}, null, void 0, false), new templates.Element('label', {'class': new templates.Attribute('email-label')}, [new templates.Text('BCC:')], void 0, false)], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-from')}, [new templates.Element('label', {'class': new templates.Attribute('email-label')}, [new templates.Text('From:')], void 0, false), new templates.Block(new expressions.PathExpression(['draft', 'fromType'], new expressions.ExpressionMeta('on draft.fromType as #fromType', 'on', void 0, '#fromType')), [new templates.ViewInstance('l-dropdown', {'class': 'tall-option caps-option', 'buttonClass': 'email-from-menu dark btn-no-style', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#fromType', [], new expressions.ExpressionMeta('#fromType'))), new expressions.AliasPathExpression('#fromType', [], new expressions.ExpressionMeta('#fromType'))), 'options': [
    {'value': 'user email', 'text': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'user', 'email'], new expressions.ExpressionMeta('#root._session.user.email'))), new expressions.AliasPathExpression('#root', ['_session', 'user', 'email'], new expressions.ExpressionMeta('#root._session.user.email'))), 'content': new templates.ParentWrapper(new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'user', 'email'], new expressions.ExpressionMeta('#root._session.user.email')))]))},
    {'value': 'no-reply', 'text': 'From no-reply', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('From no-reply')]))}
  ]})]), new templates.Element('div', {'class': new templates.Attribute('email-actions')}, [new templates.Element('div', {'class': new templates.Attribute('email-upload')}, [new templates.ViewInstance('file-attachment', {'fileIds': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['draft', 'message', 'fileIds'], new expressions.ExpressionMeta('draft.message.fileIds'))), new expressions.PathExpression(['draft', 'message', 'fileIds'], new expressions.ExpressionMeta('draft.message.fileIds'))), 'directory': 'uploads'})], void 0, false), new templates.ViewInstance('l-popup', {'class': 'has-menu email-template-menu', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.ConditionalBlock([new expressions.PathExpression(['templates', 'user'], new expressions.ExpressionMeta('if templates.user', 'if'))], [
    [new templates.Element('li', {'class': new templates.Attribute('divider')}, [new templates.Element('div', {'class': new templates.Attribute('divider-label')}, [new templates.Text('Your templates')], void 0, false)], void 0, false), new templates.EachBlock(new expressions.PathExpression(['templates', 'user'], new expressions.ExpressionMeta('each templates.user as #template', 'each', void 0, '#template')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#template', ['text'], new expressions.ExpressionMeta('#template.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['selectTemplate'], [new expressions.AliasPathExpression('#template', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])]
  ]), new templates.ConditionalBlock([new expressions.PathExpression(['templates', 'team'], new expressions.ExpressionMeta('if templates.team', 'if'))], [
    [new templates.Element('li', {'class': new templates.Attribute('divider')}, [new templates.Element('div', {'class': new templates.Attribute('divider-label')}, [new templates.Text('Team templates')], void 0, false)], void 0, false), new templates.EachBlock(new expressions.PathExpression(['templates', 'team'], new expressions.ExpressionMeta('each templates.team as #template', 'each', void 0, '#template')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#template', ['text'], new expressions.ExpressionMeta('#template.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['selectTemplate'], [new expressions.AliasPathExpression('#template', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])]
  ]), new templates.Element('li', {'class': new templates.Attribute('divider')}, [], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option edit-templates')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.emailTemplates')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.emailTemplates\')'))), 'target': new templates.Attribute('_blank')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('!U', [new expressions.PathExpression(['templates', 'team', 'length'])]), new expressions.OperatorExpression('!U', [new expressions.PathExpression(['templates', 'user', 'length'])])], void 0, new expressions.ExpressionMeta('if !templates.team.length && !templates.user.length', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Create email template')],
    [new templates.Text('Edit templates')]
  ])], void 0, false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['templateMenu'])]), new templates.ViewInstance('l-popup', {'class': 'tall-option has-menu caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['templateTokens'], new expressions.ExpressionMeta('each templateTokens as #token', 'each', void 0, '#token')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#token', ['text'], new expressions.ExpressionMeta('#token.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['insertToken'], [new expressions.AliasPathExpression('#token', ['value'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false)]))}, [new templates.MarkupAs(['tokenMenu'])]), new templates.Element('a', {'class': new templates.Attribute('link dark has-icon has-tip mail-merge'), 'title': new templates.Attribute('Add auto-text/mail merge tags'), 'href': new templates.Attribute('#')}, [new templates.Text('Insert...'), new templates.ViewInstance('email-editor:icon-email-token', {})], [new templates.ElementOn('click', new expressions.FnExpression(['tokenMenu', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('preview')], void 0, new expressions.ExpressionMeta('unless mode == \'preview\'', 'unless'))], [
    [new templates.Element('button', {'class': new templates.Attribute('template-button btn dark btn-no-style')}, [new templates.Text('Template'), new templates.Element('i', {'class': new templates.Attribute('css-icon css-icon-caret-down')}, [], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['templateMenu', 'toggle'], [new expressions.PathExpression(['$element'])]))], false)]
  ])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('file-attachment-list')}, [new templates.EachBlock(new expressions.PathExpression(['files'], new expressions.ExpressionMeta('each files as #file', 'each', void 0, '#file')), [new templates.Element('div', {'class': new templates.Attribute('file')}, [new templates.Element('a', {'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.downloadFile'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('fileId'), new expressions.AliasPathExpression('#file', ['id']), new expressions.LiteralExpression('fileName'), new expressions.AliasPathExpression('#file', ['name']), new expressions.LiteralExpression('directory'), new expressions.AttributePathExpression('directory', [])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.downloadFile\', {fileId: #file.id, fileName: #file.name, directory: @directory})'))), 'class': new templates.Attribute('link dark has-icon')}, [new templates.ViewInstance('icon-paperclip', {}), new templates.DynamicText(new expressions.AliasPathExpression('#file', ['name'], new expressions.ExpressionMeta('#file.name')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('content-remove has-tip'), 'title': new templates.Attribute('Delete'), 'tabindex': new templates.Attribute('-1'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['removeFile'], [new expressions.AliasPathExpression('#file', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]), new templates.ConditionalBlock([new expressions.PathExpression(['error'], new expressions.ExpressionMeta('if error', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('error')}, [new templates.DynamicText(new expressions.PathExpression(['error'], new expressions.ExpressionMeta('error')))], void 0, false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-subject')}, [new templates.Element('input', {'class': new templates.Attribute('dark-input'), 'type': new templates.Attribute('text'), 'placeholder': new templates.Attribute('Subject'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['draft', 'message', 'subject'], new expressions.ExpressionMeta('draft.message.subject')))}, null, [new templates.ElementOn('blur', new expressions.FnExpression(['inputBlurred'], [new expressions.PathExpression(['$element'])]))], false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-body')}, [new templates.Element('textarea', {'class': new templates.Attribute('email-textarea dark-input comments'), 'rows': new templates.Attribute('8'), 'placeholder': new templates.Attribute('Message')}, [new templates.DynamicText(new expressions.PathExpression(['draft', 'message', 'body'], new expressions.ExpressionMeta('draft.message.body')))], [new templates.MarkupAs(['body']), new templates.ElementOn('blur', new expressions.FnExpression(['inputBlurred'], [new expressions.PathExpression(['$element'])]))], false)], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('||', [new expressions.OperatorExpression('==', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('preview')]), new expressions.OperatorExpression('==', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('interview')])], void 0, new expressions.ExpressionMeta('unless mode == \'preview\' || mode == \'interview\'', 'unless'))], [
    [new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('go-back link dark'), 'title': new templates.Attribute('Start over with email template'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['clear'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ViewInstance('l-dropdown', {'buttonClass': 'dark-button has-icon', 'prompt': 'Delay until...', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['draft', 'delay'], new expressions.ExpressionMeta('draft.delay'))), new expressions.PathExpression(['draft', 'delay'], new expressions.ExpressionMeta('draft.delay'))), 'label': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('email-editor:icon-clock', {}), new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.PathExpression(['draft', 'delay']), new expressions.LiteralExpression('Delay until...')], void 0, new expressions.ExpressionMeta('draft.delay || \'Delay until...\'')))])), 'options': [
      {'value': null, 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Send now')]))},
      {'value': '1 day', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Tomorrow')]))},
      {'value': '2 days', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('2 days')]))},
      {'value': '4 days', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('4 days')]))},
      {'value': '1 weekday', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Next weekday')]))},
      {'value': '1 week', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('1 week')]))},
      {'value': '2 weeks', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('2 weeks')]))},
      {'value': '1 month', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('1 month')]))}
    ]}), new templates.Element('button', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('submit email-send '), new templates.ConditionalBlock([new expressions.PathExpression(['draft', 'delay'], new expressions.ExpressionMeta('if draft.delay', 'if'))], [
      [new templates.Text('has-icon')]
    ])]))}, [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('bulk')], void 0, new expressions.ExpressionMeta('if mode == \'bulk\'', 'if'))], [
      [new templates.ConditionalBlock([new expressions.PathExpression(['draft', 'delay'], new expressions.ExpressionMeta('if draft.delay', 'if'))], [
        [new templates.ViewInstance('email-editor:icon-clock', {})]
      ]), new templates.Text('Preview')]
    ]), new templates.ConditionalBlock([new expressions.PathExpression(['draft', 'delay'], new expressions.ExpressionMeta('if draft.delay', 'if')), new expressions.PathExpression(['sending'], new expressions.ExpressionMeta('else if sending', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.ViewInstance('email-editor:icon-clock', {}), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('bulk')], void 0, new expressions.ExpressionMeta('unless mode == \'bulk\'', 'unless'))], [
        [new templates.Text('Send later')]
      ])],
      [new templates.Element('div', {'class': new templates.Attribute('loading-indicator dark-button disabled')}, [], void 0, false), new templates.Text(' Sending')],
      [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['mode']), new expressions.LiteralExpression('bulk')], void 0, new expressions.ExpressionMeta('unless mode == \'bulk\'', 'unless'))], [
        [new templates.Text('Send')]
      ])]
    ])], [new templates.ElementOn('click', new expressions.FnExpression(['send'], []))], false)], void 0, false)]
  ])], void 0, false)]);
  views.register('email-editor:sheet-title').template = new templates.Template([new templates.ViewInstance('icon-mail', {}), new templates.Element('h3', void 0, [new templates.Text('Compose email')], void 0, false), new templates.Element('p', void 0, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profiles']), new expressions.AliasPathExpression('#draft', ['message', 'profileId']), ['names', 0], new expressions.ExpressionMeta('#root.profiles[#draft.message.profileId].names[0]')))], void 0, false)]);
  views.register('email-editor:notif-sent').template = new templates.Template([new templates.Element('span', void 0, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'sent'], new expressions.ExpressionMeta('if #notif.context.sent', 'if'))], [
    [new templates.Text('Email sent to '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profiles']), new expressions.AliasPathExpression('#notif', ['context', 'profileId']), ['names', 0], new expressions.ExpressionMeta('#root.profiles[#notif.context.profileId].names[0]'))), new templates.Text('. ')]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'scheduled'], new expressions.ExpressionMeta('if #notif.context.scheduled', 'if'))], [
    [new templates.DynamicText(new expressions.RelativePathExpression(['length'], new expressions.ExpressionMeta('this.length'))), new templates.Text(' emails scheduled to be sent later.')]
  ])], void 0, false)]);
  views.register('filtervis:icon-caret-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-down')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.6741598,11.3413318 L8.03952616,11.7324251 L8.40489252,11.3413318 L14.8653664,4.42595055 L14.1346336,3.74328687 L7.6741598,10.6586682 L8.40489252,10.6586682 L1.86536636,3.65866816 L1.13463364,4.34133184 L7.6741598,11.3413318 Z M7.6741598,11.3413318'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('filtervis:index').template = new templates.Template([new templates.Comment('filtervis:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('filtervis-section filtervis-postings')}, [new templates.ViewInstance('filtervis-posting', {'activeFacet': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'postingIds'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.postingIds'))), new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'postingIds'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.postingIds'))), 'archiveFacet': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'archivedPostingIds'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.archivedPostingIds'))), new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'archivedPostingIds'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.archivedPostingIds')))})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('filtervis-section filtervis-tags')}, [new templates.Element('h3', void 0, [new templates.Text('Tags')], void 0, false), new templates.Element('hr', void 0, null, void 0, false), new templates.ViewInstance('filtervis-tag', {'tagType': 'tags', 'collection': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), 'facet': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'tagsExact'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.tagsExact'))), new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'tagsExact'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.tagsExact'))), 'watchable': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'hasAccess', 'candidates'], new expressions.ExpressionMeta('#root._session.hasAccess.candidates'))), new expressions.AliasPathExpression('#root', ['_session', 'hasAccess', 'candidates'], new expressions.ExpressionMeta('#root._session.hasAccess.candidates'))), 'followedIds': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'user', 'followedTagIds'], new expressions.ExpressionMeta('#root._session.user.followedTagIds'))), new expressions.AliasPathExpression('#root', ['_session', 'user', 'followedTagIds'], new expressions.ExpressionMeta('#root._session.user.followedTagIds'))), 'renderQuery': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query'))), new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query')))})], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['$render', 'query', 'onlyArchived'], new expressions.ExpressionMeta('if #root.$render.query.onlyArchived', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('filtervis-section filtervis-postings')}, [new templates.Element('h3', void 0, [new templates.Text('Stages')], void 0, false), new templates.Element('hr', void 0, null, void 0, false), new templates.ViewInstance('filtervis-stage', {'collection': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['stages'], new expressions.ExpressionMeta('#root.stages'))), new expressions.AliasPathExpression('#root', ['stages'], new expressions.ExpressionMeta('#root.stages'))), 'renderQuery': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query'))), new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query')))})], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('filtervis-section filtervis-postings')}, [new templates.Element('h3', void 0, [new templates.Text('Last interaction')], void 0, false), new templates.Element('hr', void 0, null, void 0, false), new templates.ViewInstance('filtervis-interaction', {'facet': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'lastStoryAt'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.lastStoryAt'))), new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'lastStoryAt'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.lastStoryAt'))), 'renderQuery': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query'))), new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query')))})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('filtervis-section chart')}, [new templates.Element('div', {'class': new templates.Attribute('top-five-unit')}, [new templates.Element('h4', void 0, [new templates.Text('Sources')], void 0, false), new templates.ViewInstance('filtervis-tag', {'tagType': 'sources', 'collection': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['sources'], new expressions.ExpressionMeta('#root.sources'))), new expressions.AliasPathExpression('#root', ['sources'], new expressions.ExpressionMeta('#root.sources'))), 'facet': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'sourcesExact'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.sourcesExact'))), new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'sourcesExact'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.sourcesExact'))), 'renderQuery': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query'))), new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query')))})], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('filtervis-section chart')}, [new templates.Element('div', {'class': new templates.Attribute('top-five-unit')}, [new templates.Element('h4', void 0, [new templates.Text('Owners')], void 0, false), new templates.ViewInstance('filtervis-owner', {'collection': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), 'facet': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'faceId'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.faceId'))), new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'faceId'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.faceId'))), 'renderQuery': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query'))), new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query')))})], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('filtervis-section chart')}, [new templates.Element('div', {'class': new templates.Attribute('top-five-unit')}, [new templates.Element('h4', void 0, [new templates.Text('Top companies')], void 0, false), new templates.ViewInstance('filtervis-company', {'facet': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'orgExact'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.orgExact'))), new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'facetFields', 'orgExact'], new expressions.ExpressionMeta('#root._page.facets.profiles.facetFields.orgExact'))), 'renderQuery': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query'))), new expressions.AliasPathExpression('#root', ['$render', 'query'], new expressions.ExpressionMeta('#root.$render.query')))})], void 0, false)], void 0, false)]);
  views.register('filtervis-company:index').template = new templates.Template([new templates.Comment('filtervis-company:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('top-five')}, [new templates.Element('div', {'class': new templates.Attribute('items')}, [new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['topItems'], new expressions.ExpressionMeta('each topItems as #item', 'each', void 0, '#item')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.AliasPathExpression('#item', ['selected'], new expressions.ExpressionMeta('if #item.selected', 'if'))], [
    [new templates.Text('selected')]
  ]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#item', ['link'], new expressions.ExpressionMeta('#item.link'))), 'class': new templates.Attribute('topfive-link')}, [new templates.Element('span', {'class': new templates.Attribute('count-wrap')}, [new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['count'], new expressions.ExpressionMeta('#item.count')))], void 0, false)], void 0, false), new templates.Element('span', {'class': new templates.Attribute('value')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('search')}, [new templates.ViewInstance('l-picker', {'type': 'input', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pickerOptions'], new expressions.ExpressionMeta('pickerOptions'))), new expressions.PathExpression(['pickerOptions'], new expressions.ExpressionMeta('pickerOptions'))), 'class': 'topfive-picker'}, [new templates.ComponentOn('select', new expressions.FnExpression(['select'], []))])], void 0, false)], void 0, false)]);
  views.register('filtervis-interaction:index').template = new templates.Template([new templates.Comment('filtervis-interaction:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('list-wrap')}, [new templates.Element('ul', {'class': new templates.Attribute('filtervis-postings-list')}, [new templates.EachBlock(new expressions.PathExpression(['lastInteractions'], new expressions.ExpressionMeta('each lastInteractions as #lastInteraction', 'each', void 0, '#lastInteraction')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('filtervis-list-item '), new templates.DynamicText(new expressions.AliasPathExpression('#lastInteraction', ['selected'], new expressions.ExpressionMeta('#lastInteraction.selected')))]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#lastInteraction', ['link'], new expressions.ExpressionMeta('#lastInteraction.link')))}, [new templates.DynamicText(new expressions.AliasPathExpression('#lastInteraction', ['text'], new expressions.ExpressionMeta('#lastInteraction.text'))), new templates.Element('span', {'class': new templates.Attribute('total-count count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#lastInteraction', ['count'], new expressions.ExpressionMeta('#lastInteraction.count')))], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('filtervis-owner:index').template = new templates.Template([new templates.Comment('filtervis-owner:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('top-five')}, [new templates.Element('div', {'class': new templates.Attribute('items')}, [new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['topItems'], new expressions.ExpressionMeta('each topItems as #item', 'each', void 0, '#item')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.AliasPathExpression('#item', ['selected'], new expressions.ExpressionMeta('if #item.selected', 'if'))], [
    [new templates.Text('selected')]
  ]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#item', ['link'], new expressions.ExpressionMeta('#item.link'))), 'class': new templates.Attribute('topfive-link')}, [new templates.Element('span', {'class': new templates.Attribute('count-wrap')}, [new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['count'], new expressions.ExpressionMeta('#item.count')))], void 0, false)], void 0, false), new templates.Element('span', {'class': new templates.Attribute('value')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('search')}, [new templates.ViewInstance('l-user-picker', {'type': 'input', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), 'class': 'topfive-picker'}, [new templates.ComponentOn('select', new expressions.FnExpression(['select'], []))])], void 0, false)], void 0, false)]);
  views.register('filtervis-position-duration:index').template = new templates.Template([new templates.Comment('filtervis-position-duration:index', [new templates.ComponentMarker()])]);
  views.register('filtervis-posting:icon-closed:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-closed')])), 'width': new templates.Attribute('16'), 'height': new templates.Attribute('16'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8 0C3.6 0 0 3.6 0 8 0 12.4 3.6 16 8 16 12.4 16 16 12.4 16 8 16 3.6 12.4 0 8 0ZM3.6 9C3.3 9 3 8.8 3 8.5L3 7.5C3 7.2 3.3 7 3.6 7L12.4 7C12.7 7 13 7.2 13 7.5L13 8.5C13 8.8 12.7 9 12.4 9L3.6 9Z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('filtervis-posting:icon-indicator-dot:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-indicator-dot')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8,12c2.209,0,4-1.791,4-4s-1.791-4-4-4S4,5.791,4,8S5.791,12,8,12z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('filtervis-posting:index').template = new templates.Template([new templates.Comment('filtervis-posting:index', [new templates.ComponentMarker()]), new templates.Element('h3', void 0, [new templates.Text('Job postings')], void 0, false), new templates.Element('a', {'class': new templates.Attribute('postings-sort label'), 'href': new templates.Attribute('#')}, [new templates.Text('Sort by '), new templates.ViewInstance('icon-caret-down', {})], [new templates.ElementOn('click', new expressions.FnExpression(['sortMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom-left')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('hr', void 0, null, void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('list-wrap '), new templates.ConditionalBlock([new expressions.PathExpression(['showMore'], new expressions.ExpressionMeta('if showMore', 'if'))], [
    [new templates.Text('expanded')]
  ])]))}, [new templates.EachBlock(new expressions.PathExpression(['postingsList'], new expressions.ExpressionMeta('each postingsList as #group', 'each', void 0, '#group')), [new templates.Element('ul', {'class': new templates.Attribute('filtervis-postings-list')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#group', ['none'], new expressions.ExpressionMeta('unless #group.none', 'unless'))], [
    [new templates.Element('li', {'class': new templates.Attribute('first-row')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#group', ['exceedsMaxFilters'], new expressions.ExpressionMeta('if #group.exceedsMaxFilters', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('span', {'class': new templates.Attribute('filtervis-posting-category')}, [new templates.DynamicText(new expressions.AliasPathExpression('#group', ['tagText'], new expressions.ExpressionMeta('#group.tagText')))], void 0, false)],
      [new templates.Element('a', {'class': new templates.Attribute('filtervis-posting-category'), 'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#group', ['url'], new expressions.ExpressionMeta('#group.url')))}, [new templates.DynamicText(new expressions.AliasPathExpression('#group', ['tagText'], new expressions.ExpressionMeta('#group.tagText')))], void 0, false)]
    ])], void 0, false)]
  ]), new templates.EachBlock(new expressions.AliasPathExpression('#group', ['postings'], new expressions.ExpressionMeta('each #group.postings as #posting', 'each', void 0, '#posting')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('filtervis-list-item '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#posting', ['posting', 'state']), new expressions.LiteralExpression('closed')], void 0, new expressions.ExpressionMeta('if #posting.posting.state == \'closed\'', 'if'))], [
    [new templates.Text('closed')]
  ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#posting', ['tip'], new expressions.ExpressionMeta('if #posting.tip', 'if'))], [
    [new templates.Text('has-tip')]
  ]), new templates.Text(' '), new templates.DynamicText(new expressions.AliasPathExpression('#posting', ['class'], new expressions.ExpressionMeta('#posting.class')))])), 'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#posting', ['tip'], new expressions.ExpressionMeta('#posting.tip')))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#posting', ['url'], new expressions.ExpressionMeta('#posting.url')))}, [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#posting', ['posting', 'state']), new expressions.LiteralExpression('closed')], void 0, new expressions.ExpressionMeta('if #posting.posting.state == \'closed\'', 'if')), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#posting', ['posting', 'state']), new expressions.LiteralExpression('active')], void 0, new expressions.ExpressionMeta('else if #posting.posting.state == \'active\'', 'else if'))], [
    [new templates.ViewInstance('filtervis-posting:icon-closed', {})],
    [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#posting', ['posting', 'active']), new expressions.LiteralExpression(true)], void 0, new expressions.ExpressionMeta('if #posting.posting.active == true', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.ViewInstance('filtervis-posting:icon-indicator-dot', {'class': 'on'})],
      [new templates.ViewInstance('filtervis-posting:icon-indicator-dot', {})]
    ])]
  ]), new templates.Element('span', {'class': new templates.Attribute('total-count count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#posting', ['totalPostings'], new expressions.ExpressionMeta('#posting.totalPostings')))], void 0, false), new templates.DynamicText(new expressions.AliasPathExpression('#posting', ['posting', 'text'], new expressions.ExpressionMeta('#posting.posting.text')))], void 0, false)], void 0, false)])], void 0, false)], [new templates.Element('div', {'class': new templates.Attribute('filtervis-postings-empty')}, [new templates.Element('p', void 0, [new templates.Text('You have no postings. '), new templates.Element('a', {'href': new templates.Attribute('https://hire.lever.co/postings/new'), 'class': new templates.Attribute('link')}, [new templates.Text('Create one?')], void 0, false)], void 0, false)], void 0, false)])], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('filtervis-postings-options '), new templates.ConditionalBlock([new expressions.PathExpression(['postingsList'], new expressions.ExpressionMeta('unless postingsList', 'unless'))], [
    [new templates.Text('no-postings')]
  ])]))}, [new templates.ConditionalBlock([new expressions.PathExpression(['postingsList'], new expressions.ExpressionMeta('if postingsList', 'if'))], [
    [new templates.Element('a', {'class': new templates.Attribute('label'), 'href': new templates.Attribute('#')}, [new templates.ConditionalBlock([new expressions.PathExpression(['showMore'], new expressions.ExpressionMeta('if showMore', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Text('Show less')],
      [new templates.Text('Show more')]
    ])], [new templates.ElementOn('click', new expressions.FnExpression(['toggleMore'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ])], void 0, false), new templates.ViewInstance('l-popup', {'class': 'tall-option has-menu caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['sortOptions'], new expressions.ExpressionMeta('each sortOptions as #option', 'each', void 0, '#option')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['selectSortOption'], [new expressions.AliasPathExpression('#option', [])]))], false)])], void 0, false)]))}, [new templates.MarkupAs(['sortMenu'])])]);
  views.register('filtervis-stage:index').template = new templates.Template([new templates.Comment('filtervis-stage:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('list-wrap')}, [new templates.Element('ul', {'class': new templates.Attribute('filtervis-postings-list')}, [new templates.EachBlock(new expressions.PathExpression(['stageObjs'], new expressions.ExpressionMeta('each stageObjs as #stageObj', 'each', void 0, '#stageObj')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('filtervis-list-item '), new templates.DynamicText(new expressions.AliasPathExpression('#stageObj', ['selected'], new expressions.ExpressionMeta('#stageObj.selected')))]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#stageObj', ['link'], new expressions.ExpressionMeta('#stageObj.link')))}, [new templates.DynamicText(new expressions.AliasPathExpression('#stageObj', ['text'], new expressions.ExpressionMeta('#stageObj.text'))), new templates.Element('span', {'class': new templates.Attribute('total-count count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#stageObj', ['count'], new expressions.ExpressionMeta('#stageObj.count')))], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('filtervis-tag:index').template = new templates.Template([new templates.Comment('filtervis-tag:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('see-more-wrapper '), new templates.ConditionalBlock([new expressions.PathExpression(['showMore'], new expressions.ExpressionMeta('if showMore', 'if'))], [
    [new templates.Text('more')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('tags')}, [new templates.EachBlock(new expressions.PathExpression(['tags'], new expressions.ExpressionMeta('each tags as #tag', 'each', void 0, '#tag')), [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('tag-unit selectable '), new templates.DynamicText(new expressions.AliasPathExpression('#tag', ['class'], new expressions.ExpressionMeta('#tag.class')))]))}, [new templates.Element('div', {'class': new templates.Attribute('tag-title')}, [new templates.Element('a', {'class': new templates.Attribute('tags-link'), 'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#tag', ['link'], new expressions.ExpressionMeta('#tag.link')))}, [new templates.DynamicText(new expressions.AliasPathExpression('#tag', ['text'], new expressions.ExpressionMeta('#tag.text')))], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('tag-details countable')}, [new templates.ConditionalBlock([new expressions.PathExpression(['watchable'], new expressions.ExpressionMeta('if watchable', 'if'))], [
    [new templates.Element('a', {'title': new templates.Attribute('Follow this tag'), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('tag-star '), new templates.ConditionalBlock([new expressions.FnExpression(['contains'], [new expressions.PathExpression(['followedIds']), new expressions.AliasPathExpression('#tag', ['id'])], void 0, new expressions.ExpressionMeta('if contains(followedIds, #tag.id)', 'if'))], [
      [new templates.Text('starred')]
    ])])), 'tabindex': new templates.Attribute('-1'), 'href': new templates.Attribute('#')}, [new templates.Element('i', {'class': new templates.Attribute('starrable-area')}, [], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['clickWatch'], [new expressions.AliasPathExpression('#tag', ['id'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('tag-count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#tag', ['count'], new expressions.ExpressionMeta('#tag.count')))], void 0, false)], void 0, false)], void 0, false)])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('see-more')}, [new templates.Element('button', {'class': new templates.Attribute('see-more-toggle btn-no-style')}, [new templates.ConditionalBlock([new expressions.PathExpression(['showMore'], new expressions.ExpressionMeta('if showMore', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Show fewer')],
    [new templates.Text('Show more')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['toggleMore'], []))], false)], void 0, false)], void 0, false)]);
  views.register('flyover:icon-flyover-close:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-flyover-close')])), 'width': new templates.Attribute('30px'), 'height': new templates.Attribute('30px'), 'viewBox': new templates.Attribute('0 0 30 30')}, [new templates.Element('path', {'fill': new templates.Attribute('#0577A0'), 'd': new templates.Attribute('M10.097393,8.58889852 L8.58889852,10.097393 L13.4915055,15 L8.58889852,19.902607 L10.097393,21.4111015 L15,16.5084945 L19.902607,21.4111015 L21.4111015,19.902607 L16.5084945,15 L21.4111015,10.097393 L19.902607,8.58889852 L15,13.4915055 Z M15,30 C6.71572834,30 0,23.2842717 0,15 C0,6.71572834 6.71572834,0 15,0 C23.2842717,0 30,6.71572834 30,15 C30,23.2842717 23.2842717,30 15,30 Z M15,30')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('flyover:icon-flyover-control:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-flyover-control')])), 'width': new templates.Attribute('30px'), 'height': new templates.Attribute('30px'), 'viewBox': new templates.Attribute('0 0 30 30')}, [new templates.Element('path', {'fill': new templates.Attribute('#0577A0'), 'd': new templates.Attribute('M10.136039,14.4333333 L10.1088294,14.4605429 L16.4727904,20.824504 L17.887004,19.4102904 L12.9121302,14.4354167 L17.8890873,9.4584596 L16.4748737,8.04424604 L10.1109127,14.4082071 Z M15,30 C6.71572834,30 0,23.2842717 0,15 C0,6.71572834 6.71572834,0 15,0 C23.2842717,0 30,6.71572834 30,15 C30,23.2842717 23.2842717,30 15,30 Z M15,30')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('flyover:index').template = new templates.Template([new templates.Comment('flyover:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('flyover-overlay flyover-overlay-'), new templates.DynamicText(new expressions.PathExpression(['nav', 'level'], new expressions.ExpressionMeta('nav.level')))]))}, [new templates.Element('a', {'title': new templates.Attribute('Close'), 'href': new templates.DynamicAttribute(new expressions.PathExpression(['nav', 'closeUrl'], new expressions.ExpressionMeta('nav.closeUrl')))}, [], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('flyover flyover-'), new templates.DynamicText(new expressions.PathExpression(['nav', 'level'], new expressions.ExpressionMeta('nav.level')))]))}, [new templates.DynamicText(new expressions.AttributePathExpression('content', [], new expressions.ExpressionMeta('@content'))), new templates.Element('div', {'class': new templates.Attribute('flyover-controls')}, [new templates.Element('a', {'class': new templates.Attribute('flyover-close'), 'title': new templates.Attribute('Close'), 'href': new templates.DynamicAttribute(new expressions.PathExpression(['nav', 'closeUrl'], new expressions.ExpressionMeta('nav.closeUrl')))}, [new templates.ViewInstance('flyover:icon-flyover-close', {})], [new templates.MarkupAs(['closeLink'])], false), new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('flyover-'), new templates.DynamicText(new expressions.PathExpression(['nav', 'nextClass'], new expressions.ExpressionMeta('nav.nextClass')))])), 'title': new templates.DynamicAttribute(new expressions.PathExpression(['nav', 'nextTitle'], new expressions.ExpressionMeta('nav.nextTitle'))), 'href': new templates.DynamicAttribute(new expressions.PathExpression(['nav', 'nextUrl'], new expressions.ExpressionMeta('nav.nextUrl')))}, [new templates.ViewInstance('flyover:icon-flyover-control', {})], [new templates.MarkupAs(['nextLink'])], false)], void 0, false)], void 0, false)]);
  views.register('hire-modal:index').template = new templates.Template([new templates.Comment('hire-modal:index', [new templates.ComponentMarker()]), new templates.ViewInstance('l-modal', {}, [new templates.MarkupAs(['page', 'modal'])])]);
  views.register('hire-modal:gcal').template = new templates.Template([new templates.ConditionalBlock([new expressions.FnExpression(['contains'], [new expressions.AliasPathExpression('#root', ['_session', 'user', 'googleScopes']), new expressions.LiteralExpression('gcal')], void 0, new expressions.ExpressionMeta('unless contains(#root._session.user.googleScopes, \'gcal\')', 'unless')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('hire-modal:permission-request', {})],
    [new templates.Element('h2', void 0, [new templates.Text('All set!')], void 0, false), new templates.Element('p', void 0, [new templates.Text('You can schedule interviews and create calendar notifications in Lever.')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar')}, [new templates.Element('a', {'class': new templates.Attribute('btn submit'), 'href': new templates.Attribute('#')}, [new templates.Text('Awesome')], [new templates.ElementOn('click', new expressions.FnExpression(['close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]
  ])]);
  views.register('hire-modal:gmail').template = new templates.Template([new templates.ConditionalBlock([new expressions.FnExpression(['contains'], [new expressions.AliasPathExpression('#root', ['_session', 'user', 'googleScopes']), new expressions.LiteralExpression('gmail')], void 0, new expressions.ExpressionMeta('unless contains(#root._session.user.googleScopes, \'gmail\')', 'unless')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('hire-modal:permission-request', {})],
    [new templates.Element('h2', void 0, [new templates.Text('All set!')], void 0, false), new templates.Element('p', void 0, [new templates.Text('You can now send emails in Lever.')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar')}, [new templates.Element('a', {'class': new templates.Attribute('btn submit'), 'href': new templates.Attribute('#')}, [new templates.Text('Awesome')], [new templates.ElementOn('click', new expressions.FnExpression(['close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]
  ])]);
  views.register('hire-modal:permission-request').template = new templates.Template([new templates.Element('h2', void 0, [new templates.Text('Permission to use Google account')], void 0, false), new templates.Element('p', void 0, [new templates.Text('Lever needs permission to schedule interviews, create reminders, or send emails. You can change your settings at any time.')], void 0, false), new templates.Element('img', {'src': new templates.Attribute('/img/google-apps/gmail-cal-icon.png'), 'width': new templates.Attribute('40'), 'height': new templates.Attribute('31')}, null, void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar center')}, [new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('OK, Continue')], [new templates.ElementOn('click', new expressions.FnExpression(['parent', 'setFullGooglePermissions'], []))], false), new templates.Element('p', void 0, [new templates.Element('a', {'class': new templates.Attribute('link secondary label'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.index')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.index\')'))), 'target': new templates.Attribute('_blank')}, [new templates.Text('Current settings')], void 0, false)], void 0, false)], void 0, false)]);
  views.register('infinite-scroll:index').template = new templates.Template([new templates.Comment('infinite-scroll:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('infinite-scroll')}, [new templates.DynamicText(new expressions.AttributePathExpression('content', [], new expressions.ExpressionMeta('@content')))], [new templates.ElementOn('scroll', new expressions.FnExpression(['scroll'], [])), new templates.MarkupAs(['element'])], false)]);
  views.register('interview-reschedule:icon-calendar:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.3333333,1.94117647 L5.66666667,1.94117647 L5.66666667,-0.0588235294 L2.86666667,-0.0588235294 L2.86666667,1.94117647 L2.06419881,1.94117647 C1.47645804,1.94117647 1,2.40698152 1,2.99345189 L1,14.8889011 C1,15.4700567 1.48191169,15.9411765 2.0753102,15.9411765 L13.9246898,15.9411765 C14.5185672,15.9411765 15,15.4753714 15,14.8889011 L15,2.99345189 C15,2.41229622 14.5289612,1.94117647 13.9358012,1.94117647 L13.1333333,1.94117647 L13.1333333,-0.0588235294 L10.3333333,-0.0588235294 L10.3333333,1.94117647 Z M1.93333333,6.01135164 C1.93333333,5.42031021 2.40897438,4.94117647 3.01008573,4.94117647 L12.9899143,4.94117647 C13.5845882,4.94117647 14.0666667,5.42349726 14.0666667,6.01135164 L14.0666667,13.8710013 C14.0666667,14.4620427 13.5910256,14.9411765 12.9899143,14.9411765 L3.01008573,14.9411765 C2.4154118,14.9411765 1.93333333,14.4588557 1.93333333,13.8710013 L1.93333333,6.01135164 Z M10.3333333,5.9411763 L10.3333333,7.9411763 L8.4666666,7.9411763 L8.4666666,5.9411763 L10.3333333,5.9411763 Z M13.1333333,5.9411763 L13.1333333,7.9411763 L11.2666666,7.9411763 L11.2666666,5.9411763 L13.1333333,5.9411763 Z M4.73333326,8.9411763 L4.73333326,10.9411763 L2.8666666,10.9411763 L2.8666666,8.9411763 L4.73333326,8.9411763 Z M7.53333326,8.9411763 L7.53333326,10.9411763 L5.6666666,10.9411763 L5.6666666,8.9411763 L7.53333326,8.9411763 Z M10.3333333,8.9411763 L10.3333333,10.9411763 L8.4666666,10.9411763 L8.4666666,8.9411763 L10.3333333,8.9411763 Z M13.1333333,8.9411763 L13.1333333,10.9411763 L11.2666666,10.9411763 L11.2666666,8.9411763 Z M7.53333326,5.9411763 L7.53333326,7.9411763 L5.6666666,7.9411763 L5.6666666,5.9411763 Z M12.2,2.94117647 L11.2666667,2.94117647 L11.2666667,0.941176471 L12.2,0.941176471 L12.2,2.94117647 Z M4.73333333,2.94117647 L3.8,2.94117647 L3.8,0.941176471 L4.73333333,0.941176471 L4.73333333,2.94117647 Z M4.73333326,11.9411772 L4.73333326,13.9411772 L2.8666666,13.9411772 L2.8666666,11.9411772 L4.73333326,11.9411772 Z M7.53333326,11.9411772 L7.53333326,13.9411772 L5.6666666,13.9411772 L5.6666666,11.9411772 L7.53333326,11.9411772 Z M10.3333333,11.9411772 L10.3333333,13.9411772 L8.4666666,13.9411772 L8.4666666,11.9411772 L10.3333333,11.9411772 Z M10.3333333,11.9411772'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('interview-reschedule:index').template = new templates.Template([new templates.Comment('interview-reschedule:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('reschedule '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.ViewInstance('interview-reschedule:reschedule-header', {}), new templates.ViewInstance('interview-reschedule:reschedule-edit', {}), new templates.ViewInstance('interview-reschedule:reschedule-submit', {})], void 0, false)]);
  views.register('interview-reschedule:reschedule-header').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('history-interview-header')}, [new templates.Element('div', {'class': new templates.Attribute('history-interview-icon')}, [new templates.ViewInstance('interview-reschedule:icon-calendar', {})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('history-interview-title')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['stages']), new expressions.PathExpression(['working', 'stageId']), ['text'], new expressions.ExpressionMeta('#root.stages[working.stageId].text')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('history-interview-status')}, [new templates.Text('Editing event')], void 0, false)], void 0, false)]);
  views.register('interview-reschedule:reschedule-edit').template = new templates.Template([new templates.Element('table', {'class': new templates.Attribute('history-interview-edit')}, [new templates.Element('tbody', void 0, [new templates.Element('tr', void 0, [new templates.Element('td', {'class': new templates.Attribute('')}, [new templates.Text('Interviewer')], void 0, false), new templates.Element('td', void 0, [new templates.ViewInstance('l-multi-suggest', {'matchOnClick': true, 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'emails'], new expressions.ExpressionMeta('working.emails'))), new expressions.PathExpression(['working', 'emails'], new expressions.ExpressionMeta('working.emails'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), 'placeholder': 'Add interviewer', 'class': 'dark-suggest', 'label': new templates.Template([new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#item', ['user', 'name']), new expressions.AliasPathExpression('#item', ['text'])], void 0, new expressions.ExpressionMeta('#item.user.name || #item.text')))]), 'prepend': new templates.Template([new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user'))), new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user')))})])}, [new templates.ComponentOn('init', new expressions.FnExpression(['initMultiUser'], []))])], void 0, false)], void 0, false), new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.Text('Date and time')], void 0, false), new templates.Element('td', void 0, [new templates.ViewInstance('select-date-timezone', {'date': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'date'], new expressions.ExpressionMeta('working.date'))), new expressions.PathExpression(['working', 'date'], new expressions.ExpressionMeta('working.date'))), 'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'timezoneName'], new expressions.ExpressionMeta('working.timezoneName'))), new expressions.PathExpression(['working', 'timezoneName'], new expressions.ExpressionMeta('working.timezoneName'))), 'recipients': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'recipients'], new expressions.ExpressionMeta('working.recipients'))), new expressions.PathExpression(['working', 'recipients'], new expressions.ExpressionMeta('working.recipients')))}, [new templates.ComponentOn('changeTimezone', new expressions.FnExpression(['changeTimezone'], []))]), new templates.ViewInstance('l-time-input', {'tabindex': '2', 'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'timezoneName'], new expressions.ExpressionMeta('working.timezoneName'))), new expressions.PathExpression(['working', 'timezoneName'], new expressions.ExpressionMeta('working.timezoneName'))), 'date': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'date'], new expressions.ExpressionMeta('working.date'))), new expressions.PathExpression(['working', 'date'], new expressions.ExpressionMeta('working.date')))})], void 0, false)], void 0, false), new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.Text('Duration')], void 0, false), new templates.Element('td', {'class': new templates.Attribute('dates')}, [new templates.ViewInstance('l-duration-input', {'inputClass': 'dark-input', 'minutes': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'duration'], new expressions.ExpressionMeta('working.duration'))), new expressions.PathExpression(['working', 'duration'], new expressions.ExpressionMeta('working.duration')))})], void 0, false)], void 0, false), new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.Text('Location')], void 0, false), new templates.Element('td', {'class': new templates.Attribute('')}, [new templates.ViewInstance('calendar-resource-input', {'inputClass': 'dark-input', 'class': 'grouped-suggest', 'tabindex': '4', 'calendarResources': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['calendarResources'], new expressions.ExpressionMeta('calendarResources'))), new expressions.PathExpression(['calendarResources'], new expressions.ExpressionMeta('calendarResources'))), 'freeBusy': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['activeFreeBusy'], new expressions.ExpressionMeta('activeFreeBusy'))), new expressions.PathExpression(['activeFreeBusy'], new expressions.ExpressionMeta('activeFreeBusy'))), 'date': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'date'], new expressions.ExpressionMeta('working.date'))), new expressions.PathExpression(['working', 'date'], new expressions.ExpressionMeta('working.date'))), 'duration': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'duration'], new expressions.ExpressionMeta('working.duration'))), new expressions.PathExpression(['working', 'duration'], new expressions.ExpressionMeta('working.duration'))), 'end': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['timeEnd'], new expressions.ExpressionMeta('timeEnd'))), new expressions.PathExpression(['timeEnd'], new expressions.ExpressionMeta('timeEnd'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'location'], new expressions.ExpressionMeta('working.location'))), new expressions.PathExpression(['working', 'location'], new expressions.ExpressionMeta('working.location'))), 'placeholder': 'Location'})], void 0, false)], void 0, false), new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.Text('Calendar')], void 0, false), new templates.Element('td', void 0, [new templates.ConditionalBlock([new expressions.FnExpression(['hasAccessToCalendar'], [new expressions.PathExpression(['calendarList']), new expressions.PathExpression(['working', 'calendarId'])], void 0, new expressions.ExpressionMeta('if hasAccessToCalendar(calendarList,working.calendarId)', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('l-dropdown', {'class': 'choose-calendar-dropdown', 'buttonClass': 'dark-button', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['calendarList'], new expressions.ExpressionMeta('calendarList'))), new expressions.PathExpression(['calendarList'], new expressions.ExpressionMeta('calendarList'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'calendarId'], new expressions.ExpressionMeta('working.calendarId'))), new expressions.PathExpression(['working', 'calendarId'], new expressions.ExpressionMeta('working.calendarId'))), 'prompt': 'Choose calendar'})],
    [new templates.Element('span', {'class': new templates.Attribute('current-calendar')}, [new templates.DynamicText(new expressions.PathExpression(['working', 'calendarId'], new expressions.ExpressionMeta('working.calendarId')))], void 0, false)]
  ])], void 0, false)], void 0, false), new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.Text('Feedback form')], void 0, false), new templates.Element('td', void 0, [new templates.ViewInstance('l-dropdown', {'class': 'tall-option caps-option', 'buttonClass': 'dark-button', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['cardTemplates'], new expressions.ExpressionMeta('cardTemplates'))), new expressions.PathExpression(['cardTemplates'], new expressions.ExpressionMeta('cardTemplates'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'cardTemplateId'], new expressions.ExpressionMeta('working.cardTemplateId'))), new expressions.PathExpression(['working', 'cardTemplateId'], new expressions.ExpressionMeta('working.cardTemplateId'))), 'prompt': 'No feedback'})], void 0, false)], void 0, false), new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.Text('Remind')], void 0, false), new templates.Element('td', void 0, [new templates.ViewInstance('l-dropdown', {'class': 'tall-option caps-option', 'buttonClass': 'dark-button reminder-options', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['feedbackOptions'], new expressions.ExpressionMeta('feedbackOptions'))), new expressions.PathExpression(['feedbackOptions'], new expressions.ExpressionMeta('feedbackOptions'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['working', 'feedback'], new expressions.ExpressionMeta('working.feedback'))), new expressions.PathExpression(['working', 'feedback'], new expressions.ExpressionMeta('working.feedback')))})], void 0, false)], void 0, false), new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.Text('Subject')], void 0, false), new templates.Element('td', void 0, [new templates.Element('input', {'type': new templates.Attribute('text'), 'class': new templates.Attribute('dark-input'), 'placeholder': new templates.Attribute('Subject'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['working', 'subject'], new expressions.ExpressionMeta('working.subject')))}, null, void 0, false)], void 0, false)], void 0, false), new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.Text('Description')], void 0, false), new templates.Element('td', void 0, [new templates.Element('textarea', {'class': new templates.Attribute('dark-input'), 'placeholder': new templates.Attribute('Optional note'), 'row': new templates.Attribute('8')}, [new templates.DynamicText(new expressions.PathExpression(['working', 'note'], new expressions.ExpressionMeta('working.note')))], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('interview-reschedule:reschedule-submit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.ConditionalBlock([new expressions.PathExpression(['maybeDelete'], new expressions.ExpressionMeta('if maybeDelete', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('button', {'class': new templates.Attribute('dark-button delete-event-option')}, [new templates.Text('Confirm delete')], [new templates.ElementOn('click', new expressions.FnExpression(['delete'], []))], false), new templates.Element('a', {'class': new templates.Attribute('link dark delete-event-cancel'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['toggleMaybeDelete'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('a', {'class': new templates.Attribute('delete-event-option link has-icon dark'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {}), new templates.Text('Delete event')], [new templates.ElementOn('click', new expressions.FnExpression(['eventDeletePopup', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['cancel'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ConditionalBlock([new expressions.FnExpression(['hasAccessToCalendar'], [new expressions.PathExpression(['calendarList']), new expressions.PathExpression(['working', 'calendarId'])], void 0, new expressions.ExpressionMeta('if hasAccessToCalendar(calendarList, working.calendarId)', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Save Changes')], [new templates.ElementOn('click', new expressions.FnExpression(['save'], []))], false)],
      [new templates.Element('button', {'disabled': new templates.Attribute(true), 'class': new templates.Attribute('submit disabled')}, [new templates.Element('span', {'class': new templates.Attribute('has-tip'), 'title': new templates.Attribute('You do not have access to the calendar this interview is on')}, [new templates.ViewInstance('icon-error', {})], void 0, false), new templates.Text('Save Changes')], void 0, false)]
    ])]
  ]), new templates.ViewInstance('l-popup', {'class': 'darker', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('large-font')}, [new templates.Text('Are you sure?')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['eventDeletePopup', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('dark-button transparent')}, [new templates.Text('Confirm delete')], [new templates.ElementOn('click', new expressions.FnExpression(['delete'], []))], false)], void 0, false)]))}, [new templates.MarkupAs(['eventDeletePopup'])])], void 0, false)]);
  views.register('interview-reschedule:reschedule-success').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Saved interview and updated calendar event. '), new templates.Element('a', {'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#notif', ['context', 'gcalEvent', 'htmlLink'], new expressions.ExpressionMeta('#notif.context.gcalEvent.htmlLink')))}, [new templates.Text('View Event')], void 0, false)], void 0, false)]);
  views.register('interview-reschedule:reschedule-error').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Error updating event'), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'errMessage'], new expressions.ExpressionMeta('if #notif.context.errMessage', 'if'))], [
    [new templates.Text(' - '), new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))]
  ]), new templates.Text('. '), new templates.Element('a', {'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#notif', ['context', 'interview', 'gcalEvent', 'htmlLink'], new expressions.ExpressionMeta('#notif.context.interview.gcalEvent.htmlLink')))}, [new templates.Text('View Event')], void 0, false)], void 0, false)]);
  views.register('interview-reschedule:reschedule-forbidden').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Error updating event. You do not have permission to edit the event, or the event may have been moved or deleted. '), new templates.Element('a', {'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#notif', ['context', 'gcalEvent', 'htmlLink'], new expressions.ExpressionMeta('#notif.context.gcalEvent.htmlLink')))}, [new templates.Text('View Event')], void 0, false)], void 0, false)]);
  views.register('list-controls:icon-caret-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-down')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.6741598,11.3413318 L8.03952616,11.7324251 L8.40489252,11.3413318 L14.8653664,4.42595055 L14.1346336,3.74328687 L7.6741598,10.6586682 L8.40489252,10.6586682 L1.86536636,3.65866816 L1.13463364,4.34133184 L7.6741598,11.3413318 Z M7.6741598,11.3413318'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('list-controls:icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('list-controls:index', null, {'attributes': 'active-actions default-actions'}).template = new templates.Template([new templates.Comment('list-controls:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('list-controls')}, [new templates.Element('ul', {'class': new templates.Attribute('checkable-actions')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'list']), new expressions.LiteralExpression('search')], void 0, new expressions.ExpressionMeta('unless #root.$render.params.list === \'search\'', 'unless'))], [
    [new templates.Element('li', void 0, [new templates.Element('span', {'class': new templates.Attribute('checkable-select-container')}, [new templates.Element('button', {'class': new templates.Attribute('btn icon-only checkable-select-toggle')}, [new templates.ViewInstance('list-controls:icon-caret-down', {})], [new templates.ElementOn('click', new expressions.FnExpression(['selectModeMenu', 'open'], [new expressions.PathExpression(['$element'])]))], false), new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.FnExpression(['isActive'], [new expressions.PathExpression(['diffList']), new expressions.PathExpression(['selectMode'])], void 0, new expressions.ExpressionMeta('isActive(diffList, selectMode)'))), 'class': new templates.Attribute('checkable-select-check')}, null, void 0, false)], void 0, false)], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.PathExpression(['selectedCount'], new expressions.ExpressionMeta('if selectedCount', 'if'))], [
    [new templates.Element('li', {'class': new templates.Attribute('selected-indicator')}, [new templates.Element('span', {'class': new templates.Attribute('numbers')}, [new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))], void 0, false), new templates.Text(' selected'), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['selectMode']), new expressions.LiteralExpression('all')], void 0, new expressions.ExpressionMeta('if selectMode == \'all\'', 'if'))], [
      [new templates.Element('span', {'class': new templates.Attribute('selected-warning has-tip'), 'title': new templates.DynamicAttribute(new templates.Template([new templates.Text('You have selected '), new templates.DynamicText(new expressions.PathExpression(['selectedCount'], new expressions.ExpressionMeta('selectedCount'))), new templates.Text(' candidates, which may include candidates that are visible only when you scroll down more')]))}, [new templates.ViewInstance('icon-error', {})], void 0, false)]
    ])], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.FnExpression(['isActive'], [new expressions.PathExpression(['diffList']), new expressions.PathExpression(['selectMode'])], void 0, new expressions.ExpressionMeta('if isActive(diffList, selectMode)', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicText(new expressions.AttributePathExpression('activeActions', [], new expressions.ExpressionMeta('@activeActions')))],
    [new templates.DynamicText(new expressions.AttributePathExpression('defaultActions', [], new expressions.ExpressionMeta('@defaultActions')))]
  ])], void 0, false)], void 0, false), new templates.ViewInstance('l-popup', {'class': 'has-menu tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.EachBlock(new expressions.PathExpression(['selectModes'], new expressions.ExpressionMeta('each selectModes as #mode', 'each', void 0, '#mode')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#mode', ['text'], new expressions.ExpressionMeta('#mode.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['chooseSelectMode'], [new expressions.AliasPathExpression('#mode', [])]))], false)])], void 0, false)]))}, [new templates.MarkupAs(['selectModeMenu'])])]);
  views.register('list-header:index').template = new templates.Template([new templates.Comment('list-header:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('list-header')}, [new templates.DynamicText(new expressions.AttributePathExpression('content', [], new expressions.ExpressionMeta('@content')))], void 0, false), new templates.Element('style', void 0, [new templates.Text('.list-header {margin-top: -'), new templates.DynamicText(new expressions.OperatorExpression('*', [new expressions.PathExpression(['percentCollapsed']), new expressions.PathExpression(['collapsableHeight'])], void 0, new expressions.ExpressionMeta('percentCollapsed * collapsableHeight'))), new templates.Text('px;}.pipeline-single {height: '), new templates.DynamicText(new expressions.OperatorExpression('+', [new expressions.LiteralExpression(100), new expressions.OperatorExpression('*', [new expressions.LiteralExpression(8), new expressions.PathExpression(['percentCollapsed'])])], void 0, new expressions.ExpressionMeta('100 + (8 * percentCollapsed)'))), new templates.Text('px !important;}.pipeline-single > .icon-caret-right {margin-top: '), new templates.DynamicText(new expressions.OperatorExpression('*', [new expressions.PathExpression(['percentCollapsed']), new expressions.LiteralExpression(30)], void 0, new expressions.ExpressionMeta('percentCollapsed * 30'))), new templates.Text('px;}.all-active-stage .stage-title {margin-top: '), new templates.DynamicText(new expressions.OperatorExpression('*', [new expressions.PathExpression(['percentCollapsed']), new expressions.LiteralExpression(25)], void 0, new expressions.ExpressionMeta('percentCollapsed * 25'))), new templates.Text('px !important;}/*.stage-horizontal-divider {opacity: 0;}Haven\'t gotten this to work yet*/')], void 0, false)]);
  views.register('list-nav:icon-caret-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-down')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.6741598,11.3413318 L8.03952616,11.7324251 L8.40489252,11.3413318 L14.8653664,4.42595055 L14.1346336,3.74328687 L7.6741598,10.6586682 L8.40489252,10.6586682 L1.86536636,3.65866816 L1.13463364,4.34133184 L7.6741598,11.3413318 Z M7.6741598,11.3413318'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('list-nav:index').template = new templates.Template([new templates.Comment('list-nav:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['nav', 'level']), new expressions.LiteralExpression('full')], void 0, new expressions.ExpressionMeta('if nav.level === \'full\'', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('next-prev')}, [new templates.Element('a', {'class': new templates.Attribute('prev-button'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('list-nav:icon-caret-down', {}), new templates.Element('span', {'class': new templates.Attribute('prev-button-label')}, [new templates.Text('Previous candidate')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['navigateUp'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('next-button'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('list-nav:icon-caret-down', {}), new templates.Element('span', {'class': new templates.Attribute('next-button-label')}, [new templates.Text('Next candidate')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['navigateDown'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]
  ])]);
  views.register('listeners:index').template = new templates.Template([new templates.Comment('listeners:index', [new templates.ComponentMarker()])]);
  views.register('notifications:icon-close-large:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-close')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0 1.6L1.6 0 8 6.4 14.4 0 16 1.6 9.6 8 16 14.4 14.4 16 8 9.6 1.6 16 0 14.4 6.4 8 0 1.6z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('notifications:index').template = new templates.Template([new templates.Comment('notifications:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('notifications '), new templates.ConditionalBlock([new expressions.PathExpression(['show'], new expressions.ExpressionMeta('if show', 'if'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('notification-banner\n'), new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['$render', 'params', 'historyPage'], new expressions.ExpressionMeta('if #root.$render.params.historyPage', 'if'))], [
    [new templates.Text('flyover-offset')]
  ])]))}, [new templates.EachBlock(new expressions.PathExpression(['bannerList'], new expressions.ExpressionMeta('each bannerList as #notif', 'each', void 0, '#notif')), [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('notification '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['error'], new expressions.ExpressionMeta('if #notif.error', 'if'))], [
    [new templates.Text('error')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('notification-text')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['error'], new expressions.ExpressionMeta('if #notif.error', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('icon-error', {})],
    [new templates.ViewInstance('icon-notification', {})]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['view'], new expressions.ExpressionMeta('if #notif.view', 'if')), new expressions.AliasPathExpression('#notif', ['text'], new expressions.ExpressionMeta('else if #notif.text', 'else if'))], [
    [new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['view'], new expressions.ExpressionMeta('#notif.view')))],
    [new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['text'], new expressions.ExpressionMeta('#notif.text')))]
  ])], void 0, false), new templates.Element('a', {'class': new templates.Attribute('dismiss'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('notifications:icon-close-large', {})], [new templates.ElementOn('click', new expressions.FnExpression(['dismissBannerNotif'], [new expressions.AliasPathExpression('#notif', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('br', void 0, null, void 0, false)])], void 0, false)], void 0, false)]);
  views.register('pipeline:icon-caret-right:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-right')])), 'width': new templates.Attribute('7px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 7 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.456054688,-0.360057188 L6,8.02441406 L0.456054688,16.1682129'), 'stroke': new templates.Attribute('#DCDCDC'), 'fill': new templates.Attribute('none')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('pipeline:index').template = new templates.Template([new templates.Comment('pipeline:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('pipeline-wrap '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['$render', 'query', 'onlySnoozed'], new expressions.ExpressionMeta('if #root.$render.query.onlySnoozed', 'if'))], [
    [new templates.Text('snooze')]
  ])]))}, [new templates.Element('ul', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('pipeline '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['$render', 'query', 'stageId'], new expressions.ExpressionMeta('unless #root.$render.query.stageId', 'unless'))], [
    [new templates.Text('all-active')]
  ])]))}, [new templates.Element('li', {'class': new templates.Attribute('pipeline-stage all-active-stage')}, [new templates.Element('div', {'class': new templates.Attribute('pipeline-all-active')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.PathExpression(['pipeline', 'allActive', 'href'], new expressions.ExpressionMeta('pipeline.allActive.href')))}, [new templates.Element('span', {'title': new templates.DynamicAttribute(new expressions.PathExpression(['pipeline', 'allActive', 'localeCount'], new expressions.ExpressionMeta('pipeline.allActive.localeCount'))), 'class': new templates.Attribute('stage-count')}, [new templates.DynamicText(new expressions.PathExpression(['pipeline', 'allActive', 'localeCount'], new expressions.ExpressionMeta('pipeline.allActive.localeCount')))], void 0, false), new templates.Element('span', {'class': new templates.Attribute('stage-title link has-icon')}, [new templates.ViewInstance('icon-mine-list', {}), new templates.Text('Active')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['scrollTop'], []))], false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('stage-horizontal-divider')}, [], void 0, false), new templates.Element('div', {'class': new templates.Attribute('pipeline-all-snoozed')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.PathExpression(['pipeline', 'allSnoozed', 'href'], new expressions.ExpressionMeta('pipeline.allSnoozed.href')))}, [new templates.Element('span', {'title': new templates.DynamicAttribute(new expressions.PathExpression(['pipeline', 'allSnoozed', 'localeCount'], new expressions.ExpressionMeta('pipeline.allSnoozed.localeCount'))), 'class': new templates.Attribute('stage-count')}, [new templates.DynamicText(new expressions.PathExpression(['pipeline', 'allSnoozed', 'localeCount'], new expressions.ExpressionMeta('pipeline.allSnoozed.localeCount')))], void 0, false), new templates.Element('span', {'class': new templates.Attribute('stage-title link has-icon')}, [new templates.ViewInstance('icon-snooze', {}), new templates.Text('Snoozed')], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.EachBlock(new expressions.PathExpression(['pipeline', 'list'], new expressions.ExpressionMeta('each pipeline.list as #stage', 'each', void 0, '#stage')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('pipeline-stage '), new templates.DynamicText(new expressions.AliasPathExpression('#stage', ['class'], new expressions.ExpressionMeta('#stage.class')))]))}, [new templates.Element('div', {'class': new templates.Attribute('pipeline-single')}, [new templates.Element('div', {'class': new templates.Attribute('pipeline-border-area')}, [new templates.Element('div', {'class': new templates.Attribute('pipeline-drop-area')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#stage', ['href'], new expressions.ExpressionMeta('#stage.href')))}, [new templates.Element('span', {'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#stage', ['localeCount'], new expressions.ExpressionMeta('#stage.localeCount'))), 'class': new templates.Attribute('stage-count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#stage', ['stem'], new expressions.ExpressionMeta('#stage.stem'))), new templates.Element('small', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#stage', ['suffix'], new expressions.ExpressionMeta('#stage.suffix')))], void 0, false)], void 0, false), new templates.Element('span', {'class': new templates.Attribute('stage-title')}, [new templates.DynamicText(new expressions.AliasPathExpression('#stage', ['text'], new expressions.ExpressionMeta('#stage.text')))], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.ViewInstance('pipeline:icon-caret-right', {})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('pipeline-selected-border')}, [], void 0, false)], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('profile-flyover:index').template = new templates.Template([new templates.Comment('profile-flyover:index', [new templates.ComponentMarker()]), new templates.ViewInstance('flyover', {'nav': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav'))), new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav'))), 'content': new templates.ParentWrapper(new templates.Template([new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['_page', 'profile'], new expressions.ExpressionMeta('if #root._page.profile', 'if'))], [
    [new templates.ConditionalBlock([new expressions.PathExpression(['showSummary'], new expressions.ExpressionMeta('if showSummary', 'if'))], [
      [new templates.ViewInstance('profile-summary', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'profile'], new expressions.ExpressionMeta('#root._page.profile'))), new expressions.AliasPathExpression('#root', ['_page', 'profile'], new expressions.ExpressionMeta('#root._page.profile'))), 'hideProfile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['hideProfile'], new expressions.ExpressionMeta('hideProfile'))), new expressions.PathExpression(['hideProfile'], new expressions.ExpressionMeta('hideProfile')))}, [new templates.MarkupAs(['profileSummary'])])]
    ]), new templates.ConditionalBlock([new expressions.PathExpression(['showHistory'], new expressions.ExpressionMeta('if showHistory', 'if'))], [
      [new templates.ViewInstance('profile-history', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'profile'], new expressions.ExpressionMeta('#root._page.profile'))), new expressions.AliasPathExpression('#root', ['_page', 'profile'], new expressions.ExpressionMeta('#root._page.profile'))), 'hideProfile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['hideProfile'], new expressions.ExpressionMeta('hideProfile'))), new expressions.PathExpression(['hideProfile'], new expressions.ExpressionMeta('hideProfile')))}, [new templates.MarkupAs(['profileHistory'])])]
    ])]
  ])]))}, [new templates.MarkupAs(['flyover'])])]);
  views.register('profile-history:icon-history-reactions:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-history-reactions')])), 'width': new templates.Attribute('40px'), 'height': new templates.Attribute('40px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M14.8796121,19.472194 C15.7390916,18.7842279 16.4358374,19.123167 16.4358374,20.2362942 L16.4358374,26.5916371 C16.5965938,26.4812121 16.7911207,26.4164149 17.0006946,26.4164149 L30.8571429,26.4164149 L30.8571429,32.1591139 L17.0006946,32.1591139 C16.791015,32.1591139 16.5965273,32.0947797 16.4358374,31.9848006 L16.4358374,39.0896724 C16.4358374,40.1996393 15.7370433,40.5400991 14.8796121,39.8537726 L3.70443154,30.9086559 C2.84495205,30.2206899 2.84700031,29.1036371 3.70443154,28.4173106 Z M34.2857143,26.4164149 L38.9993054,26.4164149 C39.5525308,26.4164149 40,26.8642653 40,27.4167168 L40,31.158812 C40,31.7084939 39.5519738,32.1591139 38.9993054,32.1591139 L34.2857143,32.1591139 Z M25.1203879,20.527806 C24.2609084,21.2157721 23.5641626,20.876833 23.5641626,19.7637058 L23.5641626,13.4083629 C23.4034062,13.5187879 23.2088793,13.5835851 22.9993054,13.5835851 L9.14285714,13.5835851 L9.14285714,7.84088615 L22.9993054,7.84088615 C23.208985,7.84088615 23.4034727,7.90522026 23.5641626,8.01519936 L23.5641626,0.910327599 C23.5641626,-0.199639294 24.2629567,-0.540099082 25.1203879,0.146227404 L36.2955685,9.09134407 C37.155048,9.77931008 37.1529997,10.8963629 36.2955685,11.5826894 Z M5.71428571,13.5835851 L1.00069463,13.5835851 C0.44746922,13.5835851 0,13.1357347 0,12.5832832 L0,8.84118796 C0,8.2915061 0.448026248,7.84088615 1.00069463,7.84088615 L5.71428571,7.84088615 Z M5.71428571,13.5835851'), 'fill': new templates.Attribute('#809096')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-history:icon-cards:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-cards')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,2.7 C0,3.52842717 0.671572834,4.2 1.5,4.2 C2.32842717,4.2 3,3.52842717 3,2.7 C3,1.87157283 2.32842717,1.2 1.5,1.2 C0.671572834,1.2 0,1.87157283 0,2.7 Z M5,2.7 C5,2.15 5.45,1.7 6,1.7 L15,1.7 C15.55,1.7 16,2.15 16,2.7 C16,3.25 15.55,3.7 15,3.7 L6,3.7 C5.45,3.7 5,3.25 5,2.7 Z M0,7.7 C0,8.52842717 0.671572834,9.2 1.5,9.2 C2.32842717,9.2 3,8.52842717 3,7.7 C3,6.87157283 2.32842717,6.2 1.5,6.2 C0.671572834,6.2 0,6.87157283 0,7.7 Z M5,7.7 C5,7.15 5.45,6.7 6,6.7 L15,6.7 C15.55,6.7 16,7.15 16,7.7 C16,8.25 15.55,8.7 15,8.7 L6,8.7 C5.45,8.7 5,8.25 5,7.7 Z M1.5,11.2 C0.671572834,11.2 0,11.8715728 0,12.7 C0,13.5284272 0.671572834,14.2 1.5,14.2 C2.32842717,14.2 3,13.5284272 3,12.7 C3,11.8715728 2.32842717,11.2 1.5,11.2 Z M6,13.7 C5.45,13.7 5,13.25 5,12.7 C5,12.15 5.45,11.7 6,11.7 L15,11.7 C15.55,11.7 16,12.15 16,12.7 C16,13.25 15.55,13.7 15,13.7 L6,13.7 Z M6,13.7'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-history:icon-mail:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-mail')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M1.91041092,2.13405025 L14.0892085,2.13405025 C14.3344049,2.13405025 14.5690915,2.17781151 14.7859018,2.25790765 L7.99949326,7.67307941 L1.20411635,2.26151146 C1.42373091,2.17910235 1.66177262,2.13405025 1.91041092,2.13405025 Z M15.6318054,2.85738206 C15.9177503,3.20216769 16.0892948,3.64458077 16.0892948,4.12703291 L16.0892948,11.0070173 C16.0892948,12.1107937 15.1938257,13 14.0892085,13 L1.91041092,13 C0.803221956,13 -0.089675347,12.1077113 -0.089675347,11.0070173 L-0.089675347,4.12703291 C-0.089675347,3.64703603 0.0796668677,3.20761653 0.361907057,2.86425825 L7.68135948,8.6931791 L8.0001262,8.94703224 L8.31864052,8.69287575 Z M15.6318054,2.85738206'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-history:icon-error:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-error')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'viewbox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M15.0875976,13.1513746 L12.9835976,9.17237457 C12.4625976,8.20337457 11.6085976,6.61937457 11.0875976,5.65137457 L8.98459759,1.74437457 C8.46359759,0.775374566 7.60959759,0.775374566 7.08859759,1.74437457 L4.98559759,5.66737457 C4.46359759,6.63637457 3.61059759,8.23937457 3.08859759,9.20737457 L0.984597585,13.1503746 C0.463597585,14.1193746 0.936597585,14.9823746 2.03659759,14.9823746 L6.03659759,14.9823746 L10.0365976,14.9823746 L14.0365976,14.9823746 C15.1355976,14.9833746 15.6095976,14.1203746 15.0875976,13.1513746 L15.0875976,13.1513746 Z M9.03659759,12.9833746 L7.03659759,12.9833746 L7.03659759,10.9833746 L9.03659759,10.9833746 L9.03659759,12.9833746 L9.03659759,12.9833746 Z M9.03659759,9.98337457 L7.03659759,9.98337457 L7.03659759,5.98337457 L9.03659759,5.98337457 L9.03659759,9.98337457 L9.03659759,9.98337457 Z M9.03659759,9.98337457'), 'fill': new templates.Attribute('#010101')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-history:icon-calendar:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.3333333,1.94117647 L5.66666667,1.94117647 L5.66666667,-0.0588235294 L2.86666667,-0.0588235294 L2.86666667,1.94117647 L2.06419881,1.94117647 C1.47645804,1.94117647 1,2.40698152 1,2.99345189 L1,14.8889011 C1,15.4700567 1.48191169,15.9411765 2.0753102,15.9411765 L13.9246898,15.9411765 C14.5185672,15.9411765 15,15.4753714 15,14.8889011 L15,2.99345189 C15,2.41229622 14.5289612,1.94117647 13.9358012,1.94117647 L13.1333333,1.94117647 L13.1333333,-0.0588235294 L10.3333333,-0.0588235294 L10.3333333,1.94117647 Z M1.93333333,6.01135164 C1.93333333,5.42031021 2.40897438,4.94117647 3.01008573,4.94117647 L12.9899143,4.94117647 C13.5845882,4.94117647 14.0666667,5.42349726 14.0666667,6.01135164 L14.0666667,13.8710013 C14.0666667,14.4620427 13.5910256,14.9411765 12.9899143,14.9411765 L3.01008573,14.9411765 C2.4154118,14.9411765 1.93333333,14.4588557 1.93333333,13.8710013 L1.93333333,6.01135164 Z M10.3333333,5.9411763 L10.3333333,7.9411763 L8.4666666,7.9411763 L8.4666666,5.9411763 L10.3333333,5.9411763 Z M13.1333333,5.9411763 L13.1333333,7.9411763 L11.2666666,7.9411763 L11.2666666,5.9411763 L13.1333333,5.9411763 Z M4.73333326,8.9411763 L4.73333326,10.9411763 L2.8666666,10.9411763 L2.8666666,8.9411763 L4.73333326,8.9411763 Z M7.53333326,8.9411763 L7.53333326,10.9411763 L5.6666666,10.9411763 L5.6666666,8.9411763 L7.53333326,8.9411763 Z M10.3333333,8.9411763 L10.3333333,10.9411763 L8.4666666,10.9411763 L8.4666666,8.9411763 L10.3333333,8.9411763 Z M13.1333333,8.9411763 L13.1333333,10.9411763 L11.2666666,10.9411763 L11.2666666,8.9411763 Z M7.53333326,5.9411763 L7.53333326,7.9411763 L5.6666666,7.9411763 L5.6666666,5.9411763 Z M12.2,2.94117647 L11.2666667,2.94117647 L11.2666667,0.941176471 L12.2,0.941176471 L12.2,2.94117647 Z M4.73333333,2.94117647 L3.8,2.94117647 L3.8,0.941176471 L4.73333333,0.941176471 L4.73333333,2.94117647 Z M4.73333326,11.9411772 L4.73333326,13.9411772 L2.8666666,13.9411772 L2.8666666,11.9411772 L4.73333326,11.9411772 Z M7.53333326,11.9411772 L7.53333326,13.9411772 L5.6666666,13.9411772 L5.6666666,11.9411772 L7.53333326,11.9411772 Z M10.3333333,11.9411772 L10.3333333,13.9411772 L8.4666666,13.9411772 L8.4666666,11.9411772 L10.3333333,11.9411772 Z M10.3333333,11.9411772'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-history:icon-feedback:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-feedback')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M14.8796121,19.472194 C15.7390916,18.7842279 16.4358374,19.123167 16.4358374,20.2362942 L16.4358374,26.5916371 C16.5965938,26.4812121 16.7911207,26.4164149 17.0006946,26.4164149 L30.8571429,26.4164149 L30.8571429,32.1591139 L17.0006946,32.1591139 C16.791015,32.1591139 16.5965273,32.0947797 16.4358374,31.9848006 L16.4358374,39.0896724 C16.4358374,40.1996393 15.7370433,40.5400991 14.8796121,39.8537726 L3.70443154,30.9086559 C2.84495205,30.2206899 2.84700031,29.1036371 3.70443154,28.4173106 Z M34.2857143,26.4164149 L38.9993054,26.4164149 C39.5525308,26.4164149 40,26.8642653 40,27.4167168 L40,31.158812 C40,31.7084939 39.5519738,32.1591139 38.9993054,32.1591139 L34.2857143,32.1591139 Z M25.1203879,20.527806 C24.2609084,21.2157721 23.5641626,20.876833 23.5641626,19.7637058 L23.5641626,13.4083629 C23.4034062,13.5187879 23.2088793,13.5835851 22.9993054,13.5835851 L9.14285714,13.5835851 L9.14285714,7.84088615 L22.9993054,7.84088615 C23.208985,7.84088615 23.4034727,7.90522026 23.5641626,8.01519936 L23.5641626,0.910327599 C23.5641626,-0.199639294 24.2629567,-0.540099082 25.1203879,0.146227404 L36.2955685,9.09134407 C37.155048,9.77931008 37.1529997,10.8963629 36.2955685,11.5826894 Z M5.71428571,13.5835851 L1.00069463,13.5835851 C0.44746922,13.5835851 0,13.1357347 0,12.5832832 L0,8.84118796 C0,8.2915061 0.448026248,7.84088615 1.00069463,7.84088615 L5.71428571,7.84088615 Z M5.71428571,13.5835851')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-history:icon-note:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-note')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.348,13.454L0.698,11l2.104,2.104l2.103,2.104l-2.452,0.352L0,15.904L0.348,13.454\nz M5.207,12.816l-0.701-0.699l6.311-6.312L9.412,4.402l-6.311,6.309l-0.701-0.7l6.312-6.31L8.01,3L1,10.011l4.207,4.206l7.009-7.011\nl-0.7-0.701L5.207,12.816z M14.607,4.102l-2.803-2.805C11.42,0.912,10.801,0.9,10.432,1.269c-0.029,0.03-0.043,0.069-0.068,0.102\nl-0.018-0.018L9,2.701l4.207,4.207l1.346-1.347l-0.018-0.018c0.033-0.025,0.07-0.037,0.101-0.067\nC15.007,5.106,14.994,4.488,14.607,4.102z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-history:icon-history-everything:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-history-everything')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M29.128644,9.63305039 C28.6681642,10.3421271 27.7256074,10.5631236 26.9928422,10.1420425 C26.3101921,9.64411994 26.1264567,8.69681295 26.5893529,7.98401542 L29.0902134,4.13302796 C29.5506932,3.42395124 30.49325,3.20295476 31.2260157,3.62403624 C31.9086652,4.12195841 32.0924006,5.0692654 31.6295045,5.78206293 Z M20.4686505,7.90632548 C20.4980453,7.90792102 20.5276516,7.90872921 20.5574476,7.90872921 L20.3801374,7.90872921 C20.4098326,7.90872921 20.4393463,7.90792091 20.4686505,7.90632548 C19.624944,7.86053039 18.9549101,7.16612137 18.9549101,6.31620777 L18.9549101,1.72443168 C18.9549101,0.878954632 19.6250415,0.180258127 20.4689279,0.134313977 C21.3126339,0.180109062 21.9826677,0.874518079 21.9826677,1.72443168 L21.9826677,6.31620777 C21.9826677,7.16168482 21.3125363,7.86038133 20.4686505,7.90632548 Z M33.2614574,16.1191277 C32.4951949,16.4764417 31.5787511,16.1643783 31.18047,15.4189749 C30.8654087,14.6349632 31.2115884,13.7342364 31.9818717,13.3750474 L36.1434342,11.434479 C36.9096966,11.0771649 37.8261404,11.3892283 38.2244218,12.1346323 C38.5394829,12.9186434 38.1933031,13.8193702 37.4230198,14.1785592 Z M33.2985281,24.0754285 C32.4612791,23.9577609 31.8626466,23.1969114 31.9345957,22.354844 C32.0973664,21.5257218 32.8782682,20.9588518 33.7199105,21.0771369 L38.2669997,21.7161886 C39.1042487,21.8338563 39.7028812,22.5947057 39.6309321,23.4367731 C39.4681614,24.2658953 38.6872596,24.8327654 37.8456173,24.7144802 Z M29.0447108,30.7755682 C28.4066212,30.2208853 28.318954,29.2567446 28.8379188,28.5897134 C29.4260017,27.9830047 30.3896606,27.932897 31.0310985,28.4904905 L34.4965559,31.5029667 C35.1346455,32.0576495 35.2223127,33.0217903 34.7033483,33.688821 C34.1152651,34.2955302 33.1516062,34.3456378 32.5101682,33.7880443 Z M21.8725374,34.0576871 C21.6394924,33.2449624 22.0910772,32.388619 22.8896089,32.111848 C23.7132539,31.9233122 24.5487369,32.4061347 24.7830048,33.2231241 L26.0486698,37.6370225 C26.2817149,38.4497472 25.8301301,39.3060907 25.031599,39.5828615 C24.2079533,39.7713974 23.3724704,39.288575 23.1382025,38.4715856 Z M15.9605399,38.2131541 C15.7274948,39.0258788 14.8907363,39.5127958 14.0668773,39.3243537 C13.2684774,39.0477756 12.8158045,38.1955804 13.0500725,37.378591 L14.3157375,32.9646926 C14.5487826,32.1519679 15.3855411,31.6650509 16.2094007,31.8534932 C17.0078,32.1300711 17.4604728,32.9822663 17.2262049,33.7992557 Z M6.87472537,33.0804453 C6.23663574,33.6351282 5.26967704,33.5877598 4.68136365,32.9810132 C4.16240435,32.3142155 4.24689973,31.3529612 4.88833767,30.7953677 L8.35379507,27.7828915 C8.9918847,27.2282087 9.9588434,27.2755771 10.5471572,27.8823242 C11.0661161,28.5491214 10.9816207,29.5103757 10.3401828,30.0679692 Z M2.02389707,23.7860268 C1.18664814,23.9036945 0.40148704,23.3373245 0.238543727,22.508045 C0.166471968,21.6661765 0.760872355,20.9060203 1.60251466,20.7877352 L6.1496039,20.1486835 C6.98685282,20.0310158 7.77201392,20.5973858 7.93495724,21.4266653 C8.007029,22.2685338 7.41262861,23.02869 6.57098631,23.1469751 Z M2.97321772,13.3288251 C2.20695529,12.9715111 1.85693097,12.0688839 2.17193324,11.2846462 C2.57000321,10.5393428 3.48252005,10.2255558 4.25280337,10.5847448 L8.41436579,12.5253133 C9.18062823,12.8826273 9.53065255,13.7852545 9.21565055,14.5694916 C8.81758031,15.3147956 7.90506347,15.6285826 7.13478015,15.2693935 Z M9.15681443,5.27142143 C8.69633462,4.56234471 8.87781671,3.61138881 9.56053642,3.11324332 C10.2930695,2.69213513 11.2332095,2.90958894 11.6961056,3.62238646 L14.1969661,7.47337392 C14.6574459,8.18245064 14.4759638,9.13340655 13.7932446,9.63155171 C13.060711,10.0526602 12.1205711,9.83520642 11.6576749,9.12240889 Z M9.15681443,5.27142143'), 'fill': new templates.Attribute('#809096')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-history:index').template = new templates.Template([new templates.Comment('profile-history:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.PathExpression(['hideProfile'], new expressions.ExpressionMeta('unless hideProfile', 'unless'))], [
    [new templates.Element('div', {'class': new templates.Attribute('profiles-history-wrapper')}, [new templates.Element('div', {'class': new templates.Attribute('profiles-history')}, [new templates.Element('div', {'class': new templates.Attribute('history-filters')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['filterUrl'], [new expressions.LiteralExpression('hire.profiles.notes'), new expressions.AliasPathExpression('#root', ['$render'])], void 0, new expressions.ExpressionMeta('filterUrl(\'hire.profiles.notes\', #root.$render)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-filter-link '), new templates.DynamicText(new expressions.FnExpression(['filterCSSClass'], [new expressions.LiteralExpression('hire.profiles.notes'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('filterCSSClass(\'hire.profiles.notes\', #root.$render.url)')))]))}, [new templates.ViewInstance('profile-history:icon-note', {}), new templates.ConditionalBlock([new expressions.PathExpression(['filterStats', 'notes', 'count'], new expressions.ExpressionMeta('if filterStats.notes.count', 'if'))], [
      [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('notification-count count '), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.PathExpression(['filterStats', 'notes', 'unread'])], void 0, new expressions.ExpressionMeta('if !filterStats.notes.unread', 'if'))], [
        [new templates.Text('all-seen')]
      ])]))}, [new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))], void 0, false)]
    ]), new templates.Text('Notes')], void 0, false), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['filterUrl'], [new expressions.LiteralExpression('hire.profiles.emails'), new expressions.AliasPathExpression('#root', ['$render'])], void 0, new expressions.ExpressionMeta('filterUrl(\'hire.profiles.emails\', #root.$render)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-filter-link '), new templates.DynamicText(new expressions.FnExpression(['filterCSSClass'], [new expressions.LiteralExpression('hire.profiles.emails'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('filterCSSClass(\'hire.profiles.emails\', #root.$render.url)')))]))}, [new templates.ViewInstance('profile-history:icon-mail', {}), new templates.ConditionalBlock([new expressions.PathExpression(['filterStats', 'emails', 'count'], new expressions.ExpressionMeta('if filterStats.emails.count', 'if'))], [
      [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('notification-count count '), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.PathExpression(['filterStats', 'emails', 'unread'])], void 0, new expressions.ExpressionMeta('if !filterStats.emails.unread', 'if'))], [
        [new templates.Text('all-seen')]
      ])]))}, [new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))], void 0, false)]
    ]), new templates.Text('Emails')], void 0, false), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['filterUrl'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.AliasPathExpression('#root', ['$render'])], void 0, new expressions.ExpressionMeta('filterUrl(\'hire.profiles.feedback\', #root.$render)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-filter-link '), new templates.DynamicText(new expressions.FnExpression(['filterCSSClass'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('filterCSSClass(\'hire.profiles.feedback\', #root.$render.url)')))]))}, [new templates.ViewInstance('icon-reactions-list', {}), new templates.Text('Feedback')], void 0, false), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['filterUrl'], [new expressions.LiteralExpression('hire.profiles.everything'), new expressions.AliasPathExpression('#root', ['$render'])], void 0, new expressions.ExpressionMeta('filterUrl(\'hire.profiles.everything\', #root.$render)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-filter-link '), new templates.DynamicText(new expressions.FnExpression(['filterCSSClass'], [new expressions.LiteralExpression('hire.profiles.everything'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('filterCSSClass(\'hire.profiles.everything\', #root.$render.url)')))]))}, [new templates.ViewInstance('profile-history:icon-history-everything', {}), new templates.Text('Everything')], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('!==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'historyPage']), new expressions.LiteralExpression('history')], void 0, new expressions.ExpressionMeta('if #root.$render.params.historyPage !== \'history\'', 'if'))], [
      [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.history'), new expressions.AliasPathExpression('#root', ['$render', 'params']), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.history\', #root.$render.params, #root.$render.query)'))), 'class': new templates.Attribute('link secondary has-icon clear-filter')}, [new templates.ViewInstance('icon-close', {}), new templates.Text('Clear filter')], void 0, false)]
    ]), new templates.ViewInstance('l-popup', {'position': 'bottom-left', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['formTemplates'], new expressions.ExpressionMeta('each formTemplates as #template', 'each', void 0, '#template')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#template', ['text'], new expressions.ExpressionMeta('#template.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['addProfileCard'], [new expressions.AliasPathExpression('#template', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false)]))}, [new templates.MarkupAs(['formMenu'])])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('history-content limited-width')}, [new templates.ViewInstance('score-summary', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))}), new templates.ViewInstance('profile-stories', {'itemList': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['itemList'], new expressions.ExpressionMeta('itemList'))), new expressions.PathExpression(['itemList'], new expressions.ExpressionMeta('itemList'))), 'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), 'interviewsByDate': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['interviewsByDate'], new expressions.ExpressionMeta('interviewsByDate'))), new expressions.PathExpression(['interviewsByDate'], new expressions.ExpressionMeta('interviewsByDate'))), 'emailsByThreadId': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['emailsByThreadId'], new expressions.ExpressionMeta('emailsByThreadId'))), new expressions.PathExpression(['emailsByThreadId'], new expressions.ExpressionMeta('emailsByThreadId')))}, [new templates.MarkupAs(['profileStories'])])], void 0, false)], void 0, false)], void 0, false)]
  ])]);
  views.register('profile-list-by-stage:list').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('list-content')}, [new templates.ConditionalBlock([new expressions.PathExpression(['list'], new expressions.ExpressionMeta('if list', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('table', {'class': new templates.Attribute('list-table')}, [new templates.Element('colgroup', void 0, [new templates.Element('col', {'class': new templates.Attribute('checkbox')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('name')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('org')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('snippets')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('actions')}, null, void 0, false)], void 0, false), new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['list'], new expressions.ExpressionMeta('each list as #result, #i', 'each', void 0, '#result', '#i')), [new templates.DynamicViewInstance(new expressions.AliasPathExpression('#result', ['type'], new expressions.ExpressionMeta('#result.type')), {'optional': true, 'inherit': true})])], void 0, false)], void 0, false)],
    [new templates.ViewInstance('profile-list-by-stage:empty', {})]
  ])], void 0, false)]);
  views.register('profile-list-by-stage:empty').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('no-candidates')}, [new templates.Element('h3', {'class': new templates.Attribute('no-candidates-message')}, [new templates.Text('No candidates here')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('no-candidates-suggestion')}, [new templates.Element('a', {'href': new templates.Attribute('?')}, [new templates.Text('Clear filters')], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['_session', 'hasAccess', 'candidates'], new expressions.ExpressionMeta('if #root._session.hasAccess.candidates', 'if'))], [
    [new templates.Text(' or '), new templates.Element('a', {'href': new templates.Attribute('?view=all')}, [new templates.Text('view all candidates')], void 0, false)]
  ])], void 0, false)], void 0, false)]);
  views.register('profile-list-by-stage:profile').template = new templates.Template([new templates.Element('tr', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('list-profile '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#result', ['profileId']), new expressions.AliasPathExpression('#root', ['$render', 'params', 'profileId'])], void 0, new expressions.ExpressionMeta('if #result.profileId === #root.$render.params.profileId', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('td', {'class': new templates.Attribute('list-checkbox')}, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.FnExpression(['isChecked'], [new expressions.PathExpression(['diffList']), new expressions.PathExpression(['selectMode']), new expressions.AliasPathExpression('#result', ['profileId'])], void 0, new expressions.ExpressionMeta('isChecked(diffList, selectMode, #result.profileId)')))}, null, void 0, false)], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['clickCheckbox'], [new expressions.PathExpression(['$event']), new expressions.AliasPathExpression('#i', [])]))], false), new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('candidate-name '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['nameClass'], new expressions.ExpressionMeta('#result.nameClass')))]))}, [new templates.Element('i', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('candidate-interaction '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['interactionTitle'], new expressions.ExpressionMeta('if #result.interactionTitle', 'if'))], [
    [new templates.Text(' has-tip ')]
  ])])), 'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#result', ['interactionTitle'], new expressions.ExpressionMeta('#result.interactionTitle')))}, [], void 0, false), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['profileUrl'], [new expressions.AliasPathExpression('#result', ['profileId']), new expressions.AliasPathExpression('#root', ['$render', 'params', 'profileId'])], void 0, new expressions.ExpressionMeta('profileUrl(#result.profileId, #root.$render.params.profileId)')))}, [new templates.ViewInstance('profile-list-by-stage:name', {})], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('org-name')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['label'], new expressions.ExpressionMeta('#result.label')))], void 0, false), new templates.Element('td', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('profile-list-by-stage:snippet', {})], void 0, false), new templates.Element('td', {'class': new templates.Attribute('list-actions')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['emailCta'], new expressions.ExpressionMeta('if #result.emailCta', 'if'))], [
    [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.emails'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.AliasPathExpression('#result', ['profileId']), new expressions.LiteralExpression('list'), new expressions.AliasPathExpression('#root', ['$render', 'params', 'list'])]), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.emails\', {profileId: #result.profileId, list: #root.$render.params.list}, #root.$render.query)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('list-email has-tip '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['emailCta', 'class'], new expressions.ExpressionMeta('#result.emailCta.class')))])), 'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#result', ['emailCta', 'title'], new expressions.ExpressionMeta('#result.emailCta.title')))}, [new templates.ViewInstance('icon-mail', {})], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['interviewsCta', 'showSchedule'], new expressions.ExpressionMeta('if #result.interviewsCta.showSchedule', 'if')), new expressions.AliasPathExpression('#result', ['interviewsCta'], new expressions.ExpressionMeta('else if #result.interviewsCta', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.Attribute('call-to-action list-schedule btn submit'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-calendar', {}), new templates.Text('Schedule'), new templates.ViewInstance('icon-single-caret-right', {})], [new templates.ElementOn('click', new expressions.FnExpression(['scheduleInterview'], [new expressions.AliasPathExpression('#result', ['profileId'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.AliasPathExpression('#result', ['profileId']), new expressions.LiteralExpression('list'), new expressions.AliasPathExpression('#root', ['$render', 'params', 'list'])]), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.feedback\', {profileId: #result.profileId, list: #root.$render.params.list}, #root.$render.query)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('call-to-action list-interviews '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'class'], new expressions.ExpressionMeta('#result.interviewsCta.class')))]))}, [new templates.DynamicViewInstance(new expressions.AliasPathExpression('#result', ['interviewsCta', 'icon'], new expressions.ExpressionMeta('#result.interviewsCta.icon')), {}), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'text'], new expressions.ExpressionMeta('#result.interviewsCta.text'))), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'dateText'], new expressions.ExpressionMeta('#result.interviewsCta.dateText')))], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#result', ['interviewsCta', 'class']), new expressions.LiteralExpression('pending')], void 0, new expressions.ExpressionMeta('if #result.interviewsCta.class == \'pending\'', 'if'))], [
      [new templates.Element('span', {'class': new templates.Attribute('ratio-completed count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'completedCount'], new expressions.ExpressionMeta('#result.interviewsCta.completedCount'))), new templates.Text('/'), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'interviewsCount'], new expressions.ExpressionMeta('#result.interviewsCta.interviewsCount')))], void 0, false)]
    ]), new templates.ViewInstance('icon-single-caret-right', {})], void 0, false)],
    [new templates.Element('span', {'class': new templates.Attribute('list-date has-tip'), 'title': new templates.DynamicAttribute(new templates.Template([new templates.Text('Entered stage: '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['advancedDate'], new expressions.ExpressionMeta('#result.advancedDate'))), new templates.Text('\nLast interaction: '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interactionDate'], new expressions.ExpressionMeta('#result.interactionDate')))]))}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interactionDate'], new expressions.ExpressionMeta('#result.interactionDate')))], void 0, false)]
  ]), new templates.Block(new expressions.AliasPathExpression('#result', ['owner', 'id'], new expressions.ExpressionMeta('on #result.owner.id', 'on')), [new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#result', ['owner'], new expressions.ExpressionMeta('#result.owner'))), new expressions.AliasPathExpression('#result', ['owner'], new expressions.ExpressionMeta('#result.owner'))), 'class': 'has-tip'})])], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['clickRow'], [new expressions.PathExpression(['$event']), new expressions.PathExpression(['$element'])]))], false)]);
  views.register('profile-list-by-stage:name').template = new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#result', ['name'], new expressions.ExpressionMeta('#result.name')))]);
  views.register('profile-list-by-stage:snippet').template = new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('snippet-wrapper')}, [new templates.EachBlock(new expressions.AliasPathExpression('#result', ['tags'], new expressions.ExpressionMeta('each #result.tags', 'each')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new expressions.RelativePathExpression(['class'], new expressions.ExpressionMeta('this.class')))}, [new templates.DynamicText(new expressions.RelativePathExpression(['text'], new expressions.ExpressionMeta('this.text')))], void 0, false)])], void 0, false)]);
  views.register('profile-list-by-stage:index').template = new templates.Template([new templates.Comment('profile-list-by-stage:index', [new templates.ComponentMarker()]), new templates.ViewInstance('profile-list-by-stage:list', {})]);
  views.register('profile-list-by-stage:section').template = new templates.Template([new templates.Element('tr', void 0, [new templates.Element('th', {'class': new templates.Attribute('list-section-title'), 'colspan': new templates.Attribute('5')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['text'], new expressions.ExpressionMeta('#result.text')))], void 0, false)], void 0, false)]);
  views.register('profile-list-by-stage:snoozed').template = new templates.Template([new templates.Element('tr', void 0, [new templates.Element('td', {'class': new templates.Attribute('list-snoozed'), 'colspan': new templates.Attribute('5')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#result', ['link'], new expressions.ExpressionMeta('#result.link')))}, [new templates.Element('span', {'class': new templates.Attribute('numbers')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['count'], new expressions.ExpressionMeta('#result.count')))], void 0, false), new templates.Text(' snoozed candidates')], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-list-search:list').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('list-content')}, [new templates.ConditionalBlock([new expressions.PathExpression(['list'], new expressions.ExpressionMeta('if list', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('table', {'class': new templates.Attribute('list-table')}, [new templates.Element('colgroup', void 0, [new templates.Element('col', {'class': new templates.Attribute('checkbox')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('name')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('org')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('snippets')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('actions')}, null, void 0, false)], void 0, false), new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['list'], new expressions.ExpressionMeta('each list as #result, #i', 'each', void 0, '#result', '#i')), [new templates.DynamicViewInstance(new expressions.AliasPathExpression('#result', ['type'], new expressions.ExpressionMeta('#result.type')), {'optional': true, 'inherit': true})])], void 0, false)], void 0, false)],
    [new templates.ViewInstance('profile-list-search:empty', {})]
  ])], void 0, false)]);
  views.register('profile-list-search:empty').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('no-candidates')}, [new templates.Element('h3', {'class': new templates.Attribute('no-candidates-message')}, [new templates.Text('No candidates here')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('no-candidates-suggestion')}, [new templates.Element('a', {'href': new templates.Attribute('?')}, [new templates.Text('Clear filters')], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['_session', 'hasAccess', 'candidates'], new expressions.ExpressionMeta('if #root._session.hasAccess.candidates', 'if'))], [
    [new templates.Text(' or '), new templates.Element('a', {'href': new templates.Attribute('?view=all')}, [new templates.Text('view all candidates')], void 0, false)]
  ])], void 0, false)], void 0, false)]);
  views.register('profile-list-search:profile').template = new templates.Template([new templates.Element('tr', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('list-profile '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#result', ['profileId']), new expressions.AliasPathExpression('#root', ['$render', 'params', 'profileId'])], void 0, new expressions.ExpressionMeta('if #result.profileId === #root.$render.params.profileId', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('td', {'class': new templates.Attribute('list-checkbox')}, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.FnExpression(['isChecked'], [new expressions.PathExpression(['diffList']), new expressions.PathExpression(['selectMode']), new expressions.AliasPathExpression('#result', ['profileId'])], void 0, new expressions.ExpressionMeta('isChecked(diffList, selectMode, #result.profileId)')))}, null, void 0, false)], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['clickCheckbox'], [new expressions.PathExpression(['$event']), new expressions.AliasPathExpression('#i', [])]))], false), new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('candidate-name '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['nameClass'], new expressions.ExpressionMeta('#result.nameClass')))]))}, [new templates.Element('i', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('candidate-interaction '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['interactionTitle'], new expressions.ExpressionMeta('if #result.interactionTitle', 'if'))], [
    [new templates.Text(' has-tip ')]
  ])])), 'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#result', ['interactionTitle'], new expressions.ExpressionMeta('#result.interactionTitle')))}, [], void 0, false), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['profileUrl'], [new expressions.AliasPathExpression('#result', ['profileId']), new expressions.AliasPathExpression('#root', ['$render', 'params', 'profileId'])], void 0, new expressions.ExpressionMeta('profileUrl(#result.profileId, #root.$render.params.profileId)')))}, [new templates.ViewInstance('profile-list-search:name', {})], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('org-name')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['label'], new expressions.ExpressionMeta('#result.label')))], void 0, false), new templates.Element('td', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('profile-list-search:snippet', {})], void 0, false), new templates.Element('td', {'class': new templates.Attribute('list-actions')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['emailCta'], new expressions.ExpressionMeta('if #result.emailCta', 'if'))], [
    [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.emails'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.AliasPathExpression('#result', ['profileId']), new expressions.LiteralExpression('list'), new expressions.AliasPathExpression('#root', ['$render', 'params', 'list'])]), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.emails\', {profileId: #result.profileId, list: #root.$render.params.list}, #root.$render.query)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('list-email has-tip '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['emailCta', 'class'], new expressions.ExpressionMeta('#result.emailCta.class')))])), 'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#result', ['emailCta', 'title'], new expressions.ExpressionMeta('#result.emailCta.title')))}, [new templates.ViewInstance('icon-mail', {})], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['interviewsCta', 'showSchedule'], new expressions.ExpressionMeta('if #result.interviewsCta.showSchedule', 'if')), new expressions.AliasPathExpression('#result', ['interviewsCta'], new expressions.ExpressionMeta('else if #result.interviewsCta', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.Attribute('call-to-action list-schedule btn submit'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-calendar', {}), new templates.Text('Schedule'), new templates.ViewInstance('icon-single-caret-right', {})], [new templates.ElementOn('click', new expressions.FnExpression(['scheduleInterview'], [new expressions.AliasPathExpression('#result', ['profileId'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.AliasPathExpression('#result', ['profileId']), new expressions.LiteralExpression('list'), new expressions.AliasPathExpression('#root', ['$render', 'params', 'list'])]), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.feedback\', {profileId: #result.profileId, list: #root.$render.params.list}, #root.$render.query)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('call-to-action list-interviews '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'class'], new expressions.ExpressionMeta('#result.interviewsCta.class')))]))}, [new templates.DynamicViewInstance(new expressions.AliasPathExpression('#result', ['interviewsCta', 'icon'], new expressions.ExpressionMeta('#result.interviewsCta.icon')), {}), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'text'], new expressions.ExpressionMeta('#result.interviewsCta.text'))), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'dateText'], new expressions.ExpressionMeta('#result.interviewsCta.dateText')))], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#result', ['interviewsCta', 'class']), new expressions.LiteralExpression('pending')], void 0, new expressions.ExpressionMeta('if #result.interviewsCta.class == \'pending\'', 'if'))], [
      [new templates.Element('span', {'class': new templates.Attribute('ratio-completed count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'completedCount'], new expressions.ExpressionMeta('#result.interviewsCta.completedCount'))), new templates.Text('/'), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'interviewsCount'], new expressions.ExpressionMeta('#result.interviewsCta.interviewsCount')))], void 0, false)]
    ]), new templates.ViewInstance('icon-single-caret-right', {})], void 0, false)],
    [new templates.Element('span', {'class': new templates.Attribute('list-date has-tip'), 'title': new templates.DynamicAttribute(new templates.Template([new templates.Text('Entered stage: '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['advancedDate'], new expressions.ExpressionMeta('#result.advancedDate'))), new templates.Text('\nLast interaction: '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interactionDate'], new expressions.ExpressionMeta('#result.interactionDate')))]))}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interactionDate'], new expressions.ExpressionMeta('#result.interactionDate')))], void 0, false)]
  ]), new templates.Block(new expressions.AliasPathExpression('#result', ['owner', 'id'], new expressions.ExpressionMeta('on #result.owner.id', 'on')), [new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#result', ['owner'], new expressions.ExpressionMeta('#result.owner'))), new expressions.AliasPathExpression('#result', ['owner'], new expressions.ExpressionMeta('#result.owner'))), 'class': 'has-tip'})])], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['clickRow'], [new expressions.PathExpression(['$event']), new expressions.PathExpression(['$element'])]))], false)]);
  views.register('profile-list-search:name').template = new templates.Template([new templates.ViewInstance('search-box:name-fragments', {})]);
  views.register('profile-list-search:snippet').template = new templates.Template([new templates.DynamicViewInstance(new templates.Template([new templates.Text('search-box:'), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['field'], new expressions.ExpressionMeta('#result.field')))]), {'optional': true})]);
  views.register('profile-list-search:index').template = new templates.Template([new templates.Comment('profile-list-search:index', [new templates.ComponentMarker()]), new templates.ViewInstance('profile-list-search:list', {})]);
  views.register('profile-list-snoozed:list').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('list-content')}, [new templates.ConditionalBlock([new expressions.PathExpression(['list'], new expressions.ExpressionMeta('if list', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('table', {'class': new templates.Attribute('list-table')}, [new templates.Element('colgroup', void 0, [new templates.Element('col', {'class': new templates.Attribute('checkbox')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('name')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('org')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('snippets')}, null, void 0, false), new templates.Element('col', {'class': new templates.Attribute('actions')}, null, void 0, false)], void 0, false), new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['list'], new expressions.ExpressionMeta('each list as #result, #i', 'each', void 0, '#result', '#i')), [new templates.DynamicViewInstance(new expressions.AliasPathExpression('#result', ['type'], new expressions.ExpressionMeta('#result.type')), {'optional': true, 'inherit': true})])], void 0, false)], void 0, false)],
    [new templates.ViewInstance('profile-list-snoozed:empty', {})]
  ])], void 0, false)]);
  views.register('profile-list-snoozed:empty').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('no-candidates')}, [new templates.Element('h3', {'class': new templates.Attribute('no-candidates-message')}, [new templates.Text('No candidates here')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('no-candidates-suggestion')}, [new templates.Element('a', {'href': new templates.Attribute('?')}, [new templates.Text('Clear filters')], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['_session', 'hasAccess', 'candidates'], new expressions.ExpressionMeta('if #root._session.hasAccess.candidates', 'if'))], [
    [new templates.Text(' or '), new templates.Element('a', {'href': new templates.Attribute('?view=all')}, [new templates.Text('view all candidates')], void 0, false)]
  ])], void 0, false)], void 0, false)]);
  views.register('profile-list-snoozed:profile').template = new templates.Template([new templates.Element('tr', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('list-profile '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#result', ['profileId']), new expressions.AliasPathExpression('#root', ['$render', 'params', 'profileId'])], void 0, new expressions.ExpressionMeta('if #result.profileId === #root.$render.params.profileId', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('td', {'class': new templates.Attribute('list-checkbox')}, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.FnExpression(['isChecked'], [new expressions.PathExpression(['diffList']), new expressions.PathExpression(['selectMode']), new expressions.AliasPathExpression('#result', ['profileId'])], void 0, new expressions.ExpressionMeta('isChecked(diffList, selectMode, #result.profileId)')))}, null, void 0, false)], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['clickCheckbox'], [new expressions.PathExpression(['$event']), new expressions.AliasPathExpression('#i', [])]))], false), new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('candidate-name '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['nameClass'], new expressions.ExpressionMeta('#result.nameClass')))]))}, [new templates.Element('i', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('candidate-interaction '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['interactionTitle'], new expressions.ExpressionMeta('if #result.interactionTitle', 'if'))], [
    [new templates.Text(' has-tip ')]
  ])])), 'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#result', ['interactionTitle'], new expressions.ExpressionMeta('#result.interactionTitle')))}, [], void 0, false), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['profileUrl'], [new expressions.AliasPathExpression('#result', ['profileId']), new expressions.AliasPathExpression('#root', ['$render', 'params', 'profileId'])], void 0, new expressions.ExpressionMeta('profileUrl(#result.profileId, #root.$render.params.profileId)')))}, [new templates.ViewInstance('profile-list-snoozed:name', {})], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('org-name')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['label'], new expressions.ExpressionMeta('#result.label')))], void 0, false), new templates.Element('td', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('profile-list-snoozed:snippet', {})], void 0, false), new templates.Element('td', {'class': new templates.Attribute('list-actions')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['emailCta'], new expressions.ExpressionMeta('if #result.emailCta', 'if'))], [
    [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.emails'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.AliasPathExpression('#result', ['profileId']), new expressions.LiteralExpression('list'), new expressions.AliasPathExpression('#root', ['$render', 'params', 'list'])]), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.emails\', {profileId: #result.profileId, list: #root.$render.params.list}, #root.$render.query)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('list-email has-tip '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['emailCta', 'class'], new expressions.ExpressionMeta('#result.emailCta.class')))])), 'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#result', ['emailCta', 'title'], new expressions.ExpressionMeta('#result.emailCta.title')))}, [new templates.ViewInstance('icon-mail', {})], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#result', ['interviewsCta', 'showSchedule'], new expressions.ExpressionMeta('if #result.interviewsCta.showSchedule', 'if')), new expressions.AliasPathExpression('#result', ['interviewsCta'], new expressions.ExpressionMeta('else if #result.interviewsCta', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.Attribute('call-to-action list-schedule btn submit'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-calendar', {}), new templates.Text('Schedule'), new templates.ViewInstance('icon-single-caret-right', {})], [new templates.ElementOn('click', new expressions.FnExpression(['scheduleInterview'], [new expressions.AliasPathExpression('#result', ['profileId'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.AliasPathExpression('#result', ['profileId']), new expressions.LiteralExpression('list'), new expressions.AliasPathExpression('#root', ['$render', 'params', 'list'])]), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.feedback\', {profileId: #result.profileId, list: #root.$render.params.list}, #root.$render.query)'))), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('call-to-action list-interviews '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'class'], new expressions.ExpressionMeta('#result.interviewsCta.class')))]))}, [new templates.DynamicViewInstance(new expressions.AliasPathExpression('#result', ['interviewsCta', 'icon'], new expressions.ExpressionMeta('#result.interviewsCta.icon')), {}), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'text'], new expressions.ExpressionMeta('#result.interviewsCta.text'))), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'dateText'], new expressions.ExpressionMeta('#result.interviewsCta.dateText')))], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#result', ['interviewsCta', 'class']), new expressions.LiteralExpression('pending')], void 0, new expressions.ExpressionMeta('if #result.interviewsCta.class == \'pending\'', 'if'))], [
      [new templates.Element('span', {'class': new templates.Attribute('ratio-completed count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'completedCount'], new expressions.ExpressionMeta('#result.interviewsCta.completedCount'))), new templates.Text('/'), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interviewsCta', 'interviewsCount'], new expressions.ExpressionMeta('#result.interviewsCta.interviewsCount')))], void 0, false)]
    ]), new templates.ViewInstance('icon-single-caret-right', {})], void 0, false)],
    [new templates.Element('span', {'class': new templates.Attribute('list-date has-tip'), 'title': new templates.DynamicAttribute(new templates.Template([new templates.Text('Entered stage: '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['advancedDate'], new expressions.ExpressionMeta('#result.advancedDate'))), new templates.Text('\nLast interaction: '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interactionDate'], new expressions.ExpressionMeta('#result.interactionDate')))]))}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['interactionDate'], new expressions.ExpressionMeta('#result.interactionDate')))], void 0, false)]
  ]), new templates.Block(new expressions.AliasPathExpression('#result', ['owner', 'id'], new expressions.ExpressionMeta('on #result.owner.id', 'on')), [new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#result', ['owner'], new expressions.ExpressionMeta('#result.owner'))), new expressions.AliasPathExpression('#result', ['owner'], new expressions.ExpressionMeta('#result.owner'))), 'class': 'has-tip'})])], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['clickRow'], [new expressions.PathExpression(['$event']), new expressions.PathExpression(['$element'])]))], false)]);
  views.register('profile-list-snoozed:name').template = new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#result', ['name'], new expressions.ExpressionMeta('#result.name')))]);
  views.register('profile-list-snoozed:snippet').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('snippet-wrapper snooze-icon')}, [new templates.ViewInstance('icon-snooze', {}), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['snippet'], new expressions.ExpressionMeta('#result.snippet')))], void 0, false)]);
  views.register('profile-list-snoozed:index').template = new templates.Template([new templates.Comment('profile-list-snoozed:index', [new templates.ComponentMarker()]), new templates.ViewInstance('profile-list-snoozed:list', {})]);
  views.register('profile-summary:icon-postings:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-postings')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,13c0,1.1,0.9,2,2,2V4C0.9,4,0,4.9,0,6V13z M14,15c1.1,0,2-0.9,2-2V6\nc0-1.1-0.9-2-2-2V15z M9.5,1h-3C5.673,1,5,1.673,5,2.5V4H3v11h10V4h-2V2.5C11,1.673,10.327,1,9.5,1z M10,3v1H6V3H10z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-summary:icon-mail:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-mail')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M1.91041092,2.13405025 L14.0892085,2.13405025 C14.3344049,2.13405025 14.5690915,2.17781151 14.7859018,2.25790765 L7.99949326,7.67307941 L1.20411635,2.26151146 C1.42373091,2.17910235 1.66177262,2.13405025 1.91041092,2.13405025 Z M15.6318054,2.85738206 C15.9177503,3.20216769 16.0892948,3.64458077 16.0892948,4.12703291 L16.0892948,11.0070173 C16.0892948,12.1107937 15.1938257,13 14.0892085,13 L1.91041092,13 C0.803221956,13 -0.089675347,12.1077113 -0.089675347,11.0070173 L-0.089675347,4.12703291 C-0.089675347,3.64703603 0.0796668677,3.20761653 0.361907057,2.86425825 L7.68135948,8.6931791 L8.0001262,8.94703224 L8.31864052,8.69287575 Z M15.6318054,2.85738206'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-summary:icon-secret:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-secret')])), 'title': new templates.DynamicAttribute(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title'))), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12.909,5.085C12.909,2.282,10.707,0,8,0\nC5.293,0,3.091,2.281,3.091,5.085v1.601H2V16h12V6.686h-1.091V5.085z M10.728,6.612H5.272V5.029c0-1.498,1.25-2.762,2.728-2.762\nc1.479,0,2.728,1.265,2.728,2.762V6.612L10.728,6.612z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-summary:index').template = new templates.Template([new templates.Comment('profile-summary:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('profiles-summary '), new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'activeSnoozeId'], new expressions.ExpressionMeta('if profile.activeSnoozeId', 'if'))], [
    [new templates.Text('snoozed-summary')]
  ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'archivedAt'], new expressions.ExpressionMeta('if profile.archivedAt', 'if'))], [
    [new templates.Text('archived-summary')]
  ])]))}, [new templates.ConditionalBlock([new expressions.PathExpression(['hideProfile'], new expressions.ExpressionMeta('if hideProfile', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('profile-summary:hidden', {})],
    [new templates.ViewInstance('profile-summary:above-name', {}), new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'activeSnoozeId'], new expressions.ExpressionMeta('if profile.activeSnoozeId', 'if'))], [
      [new templates.ViewInstance('profile-summary:snoozed-profile-label', {})]
    ]), new templates.ConditionalBlock([new expressions.PathExpression(['hired'], new expressions.ExpressionMeta('if hired', 'if'))], [
      [new templates.ViewInstance('profile-summary:hired-profile-label', {})]
    ]), new templates.ViewInstance('profile-summary:name', {}), new templates.Element('div', {'class': new templates.Attribute('content-section call-to-actions')}, [new templates.ViewInstance('profile-cta', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section reactions')}, [new templates.ViewInstance('profile-note', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))}, [new templates.MarkupAs(['profileNote'])])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.ViewInstance('profile-files', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.Element('div', {'class': new templates.Attribute('spaced-divider')}, [], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.Element('div', {'class': new templates.Attribute('indented-icon-column content-sub-section')}, [new templates.ViewInstance('profile-summary:icon-postings', {'class': 'icon-column'}), new templates.ViewInstance('profile-applications', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))})], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.Element('div', {'class': new templates.Attribute('spaced-divider')}, [], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.ViewInstance('profile-tags-sources', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.Element('div', {'class': new templates.Attribute('spaced-divider')}, [], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.ViewInstance('profile-contact', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.ViewInstance('profile-experience', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.ViewInstance('profile-education', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))})], void 0, false)]
  ])], void 0, false), new templates.ViewInstance('l-popup', {'within': true, 'class': 'card-popup', 'content': new templates.Template([new templates.ViewInstance('l-card', {'card': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_cards']), new expressions.PathExpression(['data', 'cardId']), void 0, new expressions.ExpressionMeta('#root.profile_cards[data.cardId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_cards']), new expressions.PathExpression(['data', 'cardId']), void 0, new expressions.ExpressionMeta('#root.profile_cards[data.cardId]'))), 'layout': 'popup', 'autofocus': 'true'}, [new templates.ComponentOn('submit', new expressions.FnExpression(['cardSubmit'], [new expressions.PathExpression(['data', 'cardId'])]))])])}, [new templates.MarkupAs(['cardPopup'])])]);
  views.register('profile-summary:above-name').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('above-name')}, [new templates.Element('table', {'class': new templates.Attribute('above-name-table')}, [new templates.Element('tbody', void 0, [new templates.Element('tr', void 0, [new templates.Element('td', {'class': new templates.Attribute('above-name-status')}, [new templates.DynamicText(new expressions.PathExpression(['lastAction', 'text'], new expressions.ExpressionMeta('lastAction.text'))), new templates.Text(' on '), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['lastAction', 'date']), new expressions.PathExpression(['_session', 'timezoneName']), new expressions.LiteralExpression('compactDate')], void 0, new expressions.ExpressionMeta('formatTime(lastAction.date,  _session.timezoneName, \'compactDate\')')))], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('above-name-actions')}, [new templates.Element('button', {'class': new templates.Attribute('btn btn-invisible icon-only has-tip'), 'data-tip-position': new templates.Attribute('bottom'), 'title': new templates.Attribute('Email candidate')}, [new templates.ViewInstance('profile-summary:icon-mail', {})], [new templates.ElementOn('click', new expressions.FnExpression(['newEmail'], []))], false), new templates.Element('button', {'class': new templates.Attribute('btn btn-invisible icon-only has-tip'), 'data-tip-position': new templates.Attribute('bottom'), 'title': new templates.Attribute('Schedule interview')}, [new templates.ViewInstance('icon-calendar', {})], [new templates.ElementOn('click', new expressions.FnExpression(['scheduleInterview'], []))], false), new templates.Element('button', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('btn btn-invisible icon-only has-tip '), new templates.ConditionalBlock([new expressions.PathExpression(['activeSnooze'], new expressions.ExpressionMeta('if activeSnooze', 'if'))], [
    [new templates.Text('snooze-active')]
  ])])), 'data-tip-position': new templates.Attribute('bottom'), 'title': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.PathExpression(['activeSnooze'], new expressions.ExpressionMeta('if activeSnooze', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Edit snooze')],
    [new templates.Text('Snooze candidate')]
  ]))}, [new templates.ViewInstance('icon-snooze', {})], [new templates.ElementOn('click', new expressions.FnExpression(['snoozeMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom')]))], false), new templates.Element('button', {'class': new templates.Attribute('btn btn-invisible icon-only has-tip'), 'data-tip-position': new templates.Attribute('bottom'), 'title': new templates.Attribute('Add form')}, [new templates.ViewInstance('icon-cards', {})], [new templates.MarkupAs(['formMenuBtn']), new templates.ElementOn('click', new expressions.FnExpression(['addFormMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom')]))], false), new templates.Element('button', {'class': new templates.Attribute('btn btn-invisible icon-only has-tip'), 'data-tip-position': new templates.Attribute('bottom'), 'title': new templates.Attribute('Candidate settings')}, [new templates.ViewInstance('icon-settings', {})], [new templates.MarkupAs(['settingsMenuBtn']), new templates.ElementOn('click', new expressions.FnExpression(['settingsMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom')]))], false)], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.ViewInstance('l-user-picker', {'class': 'compact', 'tip': 'Change owner', 'tipPosition': 'bottom-left', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile', 'faceId'], new expressions.ExpressionMeta('profile.faceId'))), new expressions.PathExpression(['profile', 'faceId'], new expressions.ExpressionMeta('profile.faceId'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base')))})], void 0, false), new templates.ViewInstance('l-popup', {'class': 'has-menu darker caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.EachBlock(new expressions.PathExpression(['formTemplates'], new expressions.ExpressionMeta('each formTemplates as #template', 'each', void 0, '#template')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#template', ['text'], new expressions.ExpressionMeta('#template.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['addProfileCard'], [new expressions.AliasPathExpression('#template', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false)]))}, [new templates.MarkupAs(['addFormMenu'])]), new templates.ViewInstance('l-popup', {'class': 'has-menu tall-option darker', 'focus': '.snooze-form textarea', 'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-snooze', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))})]))}, [new templates.MarkupAs(['snoozeMenu'])]), new templates.ViewInstance('l-popup', {'class': 'has-menu tall-option darker has-icon caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'title': new templates.Attribute('Export feedback'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-feedback', {}), new templates.Text('Export feedback')], [new templates.ElementOn('click', new expressions.FnExpression(['toggleExportFeedback'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'title': new templates.Attribute('Import candidate emails'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('profile-summary:icon-mail', {}), new templates.Text('Import candidate emails')], [new templates.ElementOn('click', new expressions.FnExpression(['importEmail'], [new expressions.LiteralExpression(true)])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'title': new templates.Attribute('Enter feedback manually'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {}), new templates.Text('Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['toggleProfileDelete'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['settingsMenu'])]), new templates.ViewInstance('l-popup', {'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-export-feedback', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile')))})]))}, [new templates.MarkupAs(['exportFeedbackMenu'])]), new templates.ViewInstance('l-popup', {'class': 'darker', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('large-font')}, [new templates.Text('Are you sure?')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['profileDeletePopup', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('dark-button transparent')}, [new templates.Text('Confirm delete')], [new templates.ElementOn('click', new expressions.FnExpression(['profileDeleteConfirm'], []))], false)], void 0, false)]))}, [new templates.MarkupAs(['profileDeletePopup'])])]);
  views.register('profile-summary:snoozed-profile-label').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('profile-status-banner')}, [new templates.ViewInstance('icon-snooze', {}), new templates.Text('Candidate is snoozed until '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['activeSnooze', 'expiresAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('date')], void 0, new expressions.ExpressionMeta('formatTime(activeSnooze.expiresAt, #root._session.timezoneName, \'date\')')))], void 0, false)]);
  views.register('profile-summary:hired-profile-label').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('profile-status-banner')}, [new templates.ViewInstance('profile-summary:icon-secret', {}), new templates.Text('Hired candidates are only visible to Admins.')], void 0, false)]);
  views.register('profile-summary:name').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.Element('div', {'class': new templates.Attribute('name content-sub-section')}, [new templates.Element('input', {'placeholder': new templates.Attribute('Enter name'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['profile', 'names', 0], new expressions.ExpressionMeta('profile.names[0]')))}, null, [new templates.MarkupAs(['enterName'])], false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('companies content-sub-section')}, [new templates.Element('div', {'class': new templates.Attribute('positions')}, [new templates.Element('textarea', {'class': new templates.Attribute('hoverable-input'), 'placeholder': new templates.Attribute('Organization')}, [new templates.DynamicText(new expressions.PathExpression(['profile', 'label'], new expressions.ExpressionMeta('profile.label')))], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-summary:hidden').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('above-name no-access')}, [new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['profile', 'faceId']), void 0, new expressions.ExpressionMeta('#root.users_base[profile.faceId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['profile', 'faceId']), void 0, new expressions.ExpressionMeta('#root.users_base[profile.faceId]')))}), new templates.Element('table', {'class': new templates.Attribute('above-name-table')}, [new templates.Element('tbody', void 0, [new templates.Element('tr', void 0, [new templates.Element('td', {'class': new templates.Attribute('above-name-status')}, [new templates.Element('div', {'class': new templates.Attribute('owner-label')}, [new templates.Text('Owner')], void 0, false), new templates.Element('a', {'class': new templates.Attribute('name'), 'href': new templates.DynamicAttribute(new templates.Template([new templates.Text('mailto:'), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['profile', 'faceId']), ['email'], new expressions.ExpressionMeta('#root.users_base[profile.faceId].email')))]))}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['profile', 'faceId']), ['name'], new expressions.ExpressionMeta('#root.users_base[profile.faceId].name'))), new templates.Element('span', {'class': new templates.Attribute('email label')}, [new templates.Text(' – '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['profile', 'faceId']), ['email'], new expressions.ExpressionMeta('#root.users_base[profile.faceId].email')))], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.Element('div', {'class': new templates.Attribute('name content-sub-section')}, [new templates.Element('h1', void 0, [new templates.DynamicText(new expressions.PathExpression(['profile', 'names', 0], new expressions.ExpressionMeta('profile.names[0]')))], void 0, false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('content-section')}, [new templates.Element('p', {'class': new templates.Attribute('forbidden-message')}, [new templates.ViewInstance('profile-summary:icon-secret', {}), new templates.Element('span', void 0, [new templates.Text('You do not have access to view this candidate')], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-summary:notif-import-noemail').template = new templates.Template([new templates.Text('Missing email address. '), new templates.Element('a', {'class': new templates.Attribute('link dark notification-link'), 'href': new templates.Attribute('#')}, [new templates.Text('Add email')], [new templates.ElementOn('click', new expressions.FnExpression(['focusEmailInput'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]);
  views.register('profile-summary:notif-import-start').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('loading-indicator small')}, [], void 0, false), new templates.Text('Looking for emails...')]);
  views.register('profile-summary:notif-import-success').template = new templates.Template([new templates.Text('Completed importing. '), new templates.Element('a', {'class': new templates.Attribute('link dark notification-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.emails'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.AliasPathExpression('#notif', ['context', 'profileId']), new expressions.LiteralExpression('list'), new expressions.AliasPathExpression('#root', ['$render', 'params', 'list'])]), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.emails\', {profileId: #notif.context.profileId, list: #root.$render.params.list}, #root.$render.query)')))}, [new templates.Text('View emails')], void 0, false)]);
  views.register('profile-summary:notif-import-fail').template = new templates.Template([new templates.Text('Couldn\'t import email.')]);
  views.register('email-thread:icon-mail:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-mail')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M1.91041092,2.13405025 L14.0892085,2.13405025 C14.3344049,2.13405025 14.5690915,2.17781151 14.7859018,2.25790765 L7.99949326,7.67307941 L1.20411635,2.26151146 C1.42373091,2.17910235 1.66177262,2.13405025 1.91041092,2.13405025 Z M15.6318054,2.85738206 C15.9177503,3.20216769 16.0892948,3.64458077 16.0892948,4.12703291 L16.0892948,11.0070173 C16.0892948,12.1107937 15.1938257,13 14.0892085,13 L1.91041092,13 C0.803221956,13 -0.089675347,12.1077113 -0.089675347,11.0070173 L-0.089675347,4.12703291 C-0.089675347,3.64703603 0.0796668677,3.20761653 0.361907057,2.86425825 L7.68135948,8.6931791 L8.0001262,8.94703224 L8.31864052,8.69287575 Z M15.6318054,2.85738206'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:icon-expand:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-expand')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,16h16v-2H0V16z M0,9h16V7H0V9z M0,2h16V0H0V2z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:icon-caret-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-down')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.6741598,11.3413318 L8.03952616,11.7324251 L8.40489252,11.3413318 L14.8653664,4.42595055 L14.1346336,3.74328687 L7.6741598,10.6586682 L8.40489252,10.6586682 L1.86536636,3.65866816 L1.13463364,4.34133184 L7.6741598,11.3413318 Z M7.6741598,11.3413318'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:icon-secret:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-secret')])), 'title': new templates.DynamicAttribute(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title'))), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12.909,5.085C12.909,2.282,10.707,0,8,0\nC5.293,0,3.091,2.281,3.091,5.085v1.601H2V16h12V6.686h-1.091V5.085z M10.728,6.612H5.272V5.029c0-1.498,1.25-2.762,2.728-2.762\nc1.479,0,2.728,1.265,2.728,2.762V6.612L10.728,6.612z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:icon-caret-right:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-right')])), 'width': new templates.Attribute('7px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 7 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.456054688,-0.360057188 L6,8.02441406 L0.456054688,16.1682129'), 'stroke': new templates.Attribute('#DCDCDC'), 'fill': new templates.Attribute('none')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:icon-clock:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-clock')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.10709589,7.92869178 C0.10709589,12.2866096 3.6400274,15.8191027 7.99750685,15.8191027 C12.3547671,15.8191027 15.8879178,12.2866096 15.8879178,7.92869178 C15.8879178,3.57077397 12.3547671,0.0382808219 7.99750685,0.0382808219 C3.6400274,0.0382808219 0.10709589,3.57077397 0.10709589,7.92869178 Z M2.07969863,7.92869178 C2.07969863,4.66578767 4.73460274,2.01088356 7.99750685,2.01088356 C11.2606301,2.01088356 13.9153151,4.66578767 13.9153151,7.92869178 C13.9153151,11.1920342 11.2606301,13.8465 7.99750685,13.8465 C4.73460274,13.8465 2.07969863,11.1920342 2.07969863,7.92869178 Z M11.8256712,9.69723973 L8.70457534,7.58874658 L8.70457534,3.96003425 C8.70457534,3.87323973 8.66906849,3.78863699 8.60835616,3.72704795 C8.54720548,3.66589726 8.46238356,3.63082877 8.37580822,3.63082877 L7.51246575,3.63082877 C7.42545205,3.63082877 7.34106849,3.66589726 7.27991781,3.72704795 C7.21876712,3.78863699 7.18369863,3.87323973 7.18369863,3.96003425 L7.18369863,8.24518493 C7.18369863,8.33197945 7.21876712,8.41680137 7.27991781,8.47795205 C7.30468493,8.50271918 7.33339726,8.52332192 7.36473973,8.53888356 L11.0013425,10.9750479 C11.056137,11.0112123 11.1194795,11.0305 11.1836986,11.0305 C11.2071507,11.0305 11.2303836,11.0278699 11.2533973,11.0228288 C11.340411,11.0044178 11.415589,10.9513767 11.4631507,10.8755411 L11.9207945,10.1437055 C12.0146027,9.99378767 11.9725205,9.79608904 11.8256712,9.69723973 Z'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:icon-paperclip:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-paperclip')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'fill': new templates.Attribute('#3F484B'), 'd': new templates.Attribute('M3.036,14.696c-0.614,0-1.219-0.284-1.788-0.853l-0.083-0.082c-0.586-0.578-2.305-2.956,0.008-5.391 c1.165-1.226,2.771-2.813,4.471-4.493C6.558,2.976,7.509,2.036,8.455,1.09c1.708-1.707,2.958-1.317,4.894,0.528 c2.288,2.178,2.707,4.322,1.718,5.463c-1.314,1.515-6.285,6.488-6.496,6.699c-0.278,0.279-0.729,0.279-1.008,0 c-0.278-0.278-0.278-0.729,0-1.008c0.051-0.051,5.146-5.148,6.427-6.625c0.294-0.339,0.339-1.629-1.624-3.498 c-1.13-1.076-1.465-1.989-2.902-0.551c-0.948,0.948-1.901,1.89-2.817,2.793C4.954,6.564,3.355,8.144,2.207,9.353 c-1.349,1.421-0.656,2.788-0.041,3.395l0.089,0.088c0.524,0.523,0.952,0.665,1.718-0.102c0.213-0.213,0.656-0.644,1.213-1.185 C6.729,10.05,9.6,7.26,10.18,6.534c0.184-0.23,0.452-0.787,0.196-1.011c-0.353-0.31-1.002,0.315-1.192,0.514 c-2.012,2.112-4.64,4.643-4.666,4.667c-0.283,0.273-0.734,0.265-1.007-0.02c-0.273-0.284-0.265-0.734,0.019-1.007 c0.026-0.025,2.633-2.535,4.622-4.624c1.291-1.356,2.48-1.201,3.162-0.604c0.832,0.727,0.636,2.154-0.021,2.974 c-0.586,0.734-2.847,2.945-5.113,5.146c-0.55,0.536-0.988,0.96-1.199,1.171C4.346,14.378,3.686,14.696,3.036,14.696L3.036,14.696z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:icon-reply-all:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-reply-all')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M9,6c9,0,6.433,4.534,6.433,5.534C12.717,8.371,10,10,9,10v2L4,8l5-4\nV6z M0.086,8.154l0.398-0.381l3.474-3.325L4.65,5.17L1.624,8.154l3.002,2.579l-0.651,0.759l-3.47-2.979L0.086,8.154z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:icon-reply:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-reply')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,8l5-4v2c9,0,10,5,10,6c-2-4-9-2-10-2v2L0,8L0,8z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('email-thread:index').template = new templates.Template([new templates.Comment('email-thread:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('email-thread '), new templates.ConditionalBlock([new expressions.PathExpression(['thread', 'visibleTo'], new expressions.ExpressionMeta('if thread.visibleTo', 'if'))], [
    [new templates.Text('secret')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('email-thread-header')}, [new templates.Element('div', {'class': new templates.Attribute('icons')}, [new templates.ViewInstance('email-thread:icon-mail', {})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-thread-status')}, [new templates.DynamicText(new expressions.PathExpression(['threadData', 'status'], new expressions.ExpressionMeta('threadData.status')))], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['expand'], new expressions.ExpressionMeta('if expand', 'if')), new expressions.PathExpression(['threadData', 'lastEmail'], new expressions.ExpressionMeta('else if threadData.lastEmail', 'else if')), new expressions.PathExpression(['threadData', 'lastStub'], new expressions.ExpressionMeta('else if threadData.lastStub', 'else if'))], [
    [new templates.Block(new expressions.PathExpression(['threadData', 'sortedEmails', 0], new expressions.ExpressionMeta('with threadData.sortedEmails[0] as #email', 'with', void 0, '#email')), [new templates.ViewInstance('email-thread:thread-info', {})])],
    [new templates.Block(new expressions.PathExpression(['threadData', 'lastEmail'], new expressions.ExpressionMeta('with threadData.lastEmail as #email', 'with', void 0, '#email')), [new templates.ViewInstance('email-thread:thread-info', {})])],
    [new templates.Block(new expressions.PathExpression(['threadData', 'lastStub'], new expressions.ExpressionMeta('with threadData.lastStub as #email', 'with', void 0, '#email')), [new templates.ViewInstance('email-thread:thread-info', {})])]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-thread-subject')}, [new templates.DynamicText(new expressions.PathExpression(['thread', 'subject'], new expressions.ExpressionMeta('thread.subject')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-thread-messages')}, [new templates.ConditionalBlock([new expressions.PathExpression(['expand'], new expressions.ExpressionMeta('if expand', 'if')), new expressions.OperatorExpression('>', [new expressions.PathExpression(['threadData', 'sortedEmails', 'length']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('else if threadData.sortedEmails.length > 1', 'else if'))], [
    [new templates.EachBlock(new expressions.PathExpression(['threadData', 'sortedEmails'], new expressions.ExpressionMeta('each threadData.sortedEmails as #email, #i', 'each', void 0, '#email', '#i')), [new templates.ConditionalBlock([new expressions.OperatorExpression('!==', [new expressions.AliasPathExpression('#i', []), new expressions.OperatorExpression('-', [new expressions.PathExpression(['threadData', 'sortedEmails', 'length']), new expressions.LiteralExpression(1)])], void 0, new expressions.ExpressionMeta('if #i !== threadData.sortedEmails.length-1', 'if'))], [
      [new templates.ViewInstance('email-thread:email-message', {})]
    ])])],
    [new templates.Element('div', {'class': new templates.Attribute('email-status-bar email-thread-collapse')}, [new templates.Text('Previous Emails '), new templates.Element('span', {'class': new templates.Attribute('circled-number')}, [new templates.DynamicText(new expressions.OperatorExpression('-', [new expressions.PathExpression(['threadData', 'sortedEmails', 'length']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('threadData.sortedEmails.length - 1')))], void 0, false), new templates.Element('span', {'class': new templates.Attribute('expand-icon')}, [new templates.ViewInstance('email-thread:icon-expand', {})], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['expand'], []))], false)]
  ]), new templates.ConditionalBlock([new expressions.PathExpression(['threadData', 'lastEmail'], new expressions.ExpressionMeta('if threadData.lastEmail', 'if'))], [
    [new templates.Block(new expressions.PathExpression(['threadData', 'lastEmail'], new expressions.ExpressionMeta('with threadData.lastEmail as #email', 'with', void 0, '#email')), [new templates.ViewInstance('email-thread:email-message', {})])]
  ])], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['threadData', 'lastEmail'], new expressions.ExpressionMeta('if threadData.lastEmail', 'if'))], [
    [new templates.Block(new expressions.PathExpression(['threadData', 'lastEmail'], new expressions.ExpressionMeta('with threadData.lastEmail as #email', 'with', void 0, '#email')), [new templates.Element('div', {'class': new templates.Attribute('email-action-bar')}, [new templates.Element('a', {'class': new templates.Attribute('reply-all'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-reply-all', {}), new templates.Text(' Reply All')], [new templates.ElementOn('click', new expressions.FnExpression(['replyAll'], [new expressions.AliasPathExpression('#email', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'data-type': new templates.Attribute('email-message'), 'data-id': new templates.DynamicAttribute(new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#email', ['meta', 'msgId']), new expressions.AliasPathExpression('#email', ['meta', 'leverMsgId'])], void 0, new expressions.ExpressionMeta('#email.meta.msgId || #email.meta.leverMsgId'))), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-caret-down', {'class': 'more-options'})], [new templates.MarkupAs(['emailMenuHandle']), new templates.ElementOn('click', new expressions.FnExpression(['emailThreadDeleteMenu', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])]
  ]), new templates.EachBlock(new expressions.PathExpression(['threadData', 'sortedStubs'], new expressions.ExpressionMeta('each threadData.sortedStubs as #email', 'each', void 0, '#email')), [new templates.ViewInstance('email-thread:stub-message', {})]), new templates.ViewInstance('email-thread:email-menu', {}), new templates.ViewInstance('email-thread:email-thread-delete-menu', {}), new templates.ViewInstance('email-thread:confirm-thread-delete', {})], void 0, false)]);
  views.register('email-thread:email-message').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('email-message')}, [new templates.Element('div', {'class': new templates.Attribute('email-thread-header')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.PathExpression(['expand']), new expressions.OperatorExpression('!==', [new expressions.AliasPathExpression('#email', []), new expressions.PathExpression(['threadData', 'sortedEmails', 0])])], void 0, new expressions.ExpressionMeta('if expand && (#email !== threadData.sortedEmails[0])', 'if'))], [
    [new templates.ViewInstance('email-thread:email-info', {})]
  ])], void 0, false), new templates.ViewInstance('email-thread:email-content', {}), new templates.ConditionalBlock([new expressions.AliasPathExpression('#email', ['files'], new expressions.ExpressionMeta('if #email.files', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('email-attachments')}, [new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#email', ['files'], new expressions.ExpressionMeta('each #email.files as #file', 'each', void 0, '#file')), [new templates.Element('li', void 0, [new templates.Element('a', {'class': new templates.Attribute('attachment link has-icon'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.AliasPathExpression('#file', ['id']), new expressions.LiteralExpression('fileName'), new expressions.AliasPathExpression('#file', ['name'])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', {\'accountId\': #root._session.accountId, \'userId\': #root._session.userId, \'fileId\': #file.id, \'fileName\': #file.name})'))), 'target': new templates.Attribute('_blank')}, [new templates.ViewInstance('email-thread:icon-paperclip', {}), new templates.DynamicText(new expressions.AliasPathExpression('#file', ['name'], new expressions.ExpressionMeta('#file.name')))], void 0, false)], void 0, false)])], void 0, false)], void 0, false)]
  ])], void 0, false)]);
  views.register('email-thread:stub-message').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('email-thread-messages')}, [new templates.Element('div', {'class': new templates.Attribute('email-message')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#email', ['delayUntil'], new expressions.ExpressionMeta('if #email.delayUntil', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('email-status-bar email-message-delayed')}, [new templates.ViewInstance('email-thread:icon-clock', {}), new templates.Text('Scheduled to send on '), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#email', ['delayUntil']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('timeDayDate')], void 0, new expressions.ExpressionMeta('formatTime(#email.delayUntil, #root._session.timezoneName, \'timeDayDate\')')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('email-delayed-cancel'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['confirmDeleteStub'], [new expressions.PathExpression(['thread']), new expressions.AliasPathExpression('#email', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)],
    [new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['emailsByThreadId']), new expressions.AliasPathExpression('#email', ['meta', 'leverMsgId']), void 0, new expressions.ExpressionMeta('if emailsByThreadId[#email.meta.leverMsgId] as #emailObj', 'if', void 0, '#emailObj')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.ConditionalBlock([new expressions.AliasPathExpression('#emailObj', ['sentAt'], new expressions.ExpressionMeta('if #emailObj.sentAt', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
        [new templates.Element('div', {'class': new templates.Attribute('email-status-bar email-message-sending')}, [new templates.Text('Email sent, but not synced.'), new templates.Element('a', {'class': new templates.Attribute('action'), 'href': new templates.Attribute('#')}, [new templates.Text('Retry')], [new templates.ElementOn('click', new expressions.FnExpression(['importEmail'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)],
        [new templates.Element('div', {'class': new templates.Attribute('email-status-bar email-message-sending')}, [new templates.Element('div', {'class': new templates.Attribute('loading-indicator small')}, [], void 0, false), new templates.Text('Sending')], void 0, false)]
      ])],
      [new templates.Element('div', {'class': new templates.Attribute('email-status-bar email-message-sending')}, [new templates.Element('div', {'class': new templates.Attribute('loading-indicator small')}, [], void 0, false), new templates.Text('Sending')], void 0, false)]
    ])]
  ]), new templates.Element('div', {'class': new templates.Attribute('email-thread-header')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#email', []), new expressions.PathExpression(['threadData', 'lastStub'])]), new expressions.OperatorExpression('!U', [new expressions.PathExpression(['threadData', 'lastEmail'])])], void 0, new expressions.ExpressionMeta('unless #email == threadData.lastStub && !threadData.lastEmail', 'unless'))], [
    [new templates.ViewInstance('email-thread:email-info', {})]
  ])], void 0, false), new templates.ViewInstance('email-thread:email-content', {})], void 0, false)], void 0, false)]);
  views.register('email-thread:email-content').template = new templates.Template([new templates.Element('table', {'class': new templates.Attribute('email-addresses')}, [new templates.Element('tbody', void 0, [new templates.Element('tr', void 0, [new templates.Element('td', {'class': new templates.Attribute('from')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#email', ['from', 'userId'], new expressions.ExpressionMeta('if #email.from.userId', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('person-picture')}, [new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#email', ['from', 'userId']), void 0, new expressions.ExpressionMeta('#root.users_base[#email.from.userId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#email', ['from', 'userId']), void 0, new expressions.ExpressionMeta('#root.users_base[#email.from.userId]')))})], void 0, false)],
    [new templates.Element('div', {'class': new templates.Attribute('person-picture'), 'style': new templates.DynamicAttribute(new templates.Template([new templates.Text('background-image: url('), new templates.DynamicText(new expressions.AliasPathExpression('#email', ['from', 'picture'], new expressions.ExpressionMeta('#email.from.picture'))), new templates.Text('); background-size: 27px 27px;')]))}, [], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('person-details')}, [new templates.Element('div', {'class': new templates.Attribute('person-details-name')}, [new templates.DynamicText(new expressions.AliasPathExpression('#email', ['from', 'name'], new expressions.ExpressionMeta('#email.from.name')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('person-details-email')}, [new templates.DynamicText(new expressions.AliasPathExpression('#email', ['from', 'address'], new expressions.ExpressionMeta('#email.from.address')))], void 0, false)], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('arrow')}, [new templates.ViewInstance('email-thread:icon-caret-right', {})], void 0, false), new templates.Element('td', {'class': new templates.Attribute('to')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#email', ['to', 'length']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('if #email.to.length === 1', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('person-details')}, [new templates.Element('div', {'class': new templates.Attribute('person-details-name')}, [new templates.DynamicText(new expressions.AliasPathExpression('#email', ['to', 0, 'name'], new expressions.ExpressionMeta('#email.to[0].name')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('person-details-email')}, [new templates.DynamicText(new expressions.AliasPathExpression('#email', ['to', 0, 'address'], new expressions.ExpressionMeta('#email.to[0].address')))], void 0, false)], void 0, false)],
    [new templates.Element('div', {'class': new templates.Attribute('to-names')}, [new templates.EachBlock(new expressions.AliasPathExpression('#email', ['to'], new expressions.ExpressionMeta('each #email.to as #to', 'each', void 0, '#to')), [new templates.ViewInstance('email-thread:email-message-name', {})])], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#email', ['cc'], new expressions.ExpressionMeta('if #email.cc', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('to-cc')}, [new templates.Element('div', {'class': new templates.Attribute('label')}, [new templates.Text('CC')], void 0, false), new templates.EachBlock(new expressions.AliasPathExpression('#email', ['cc'], new expressions.ExpressionMeta('each #email.cc as #to', 'each', void 0, '#to')), [new templates.ViewInstance('email-thread:email-message-name', {})])], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#email', ['bcc'], new expressions.ExpressionMeta('if #email.bcc', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('to-bcc')}, [new templates.Element('div', {'class': new templates.Attribute('label')}, [new templates.Text('BCC')], void 0, false), new templates.EachBlock(new expressions.AliasPathExpression('#email', ['bcc'], new expressions.ExpressionMeta('each #email.bcc as #to', 'each', void 0, '#to')), [new templates.ViewInstance('email-thread:email-message-name', {})])], void 0, false)]
  ])], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-message-text')}, [new templates.DynamicText(new expressions.FnExpression(['removeQuotedText'], [new expressions.AliasPathExpression('#email', ['message'])], void 0, new expressions.ExpressionMeta('removeQuotedText(#email.message)')))], void 0, false)]);
  views.register('email-thread:email-message-name').template = new templates.Template([new templates.Element('span', {'class': new templates.Attribute('name-unit')}, [new templates.Element('span', {'class': new templates.Attribute('name-label has-tip'), 'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#to', ['address'], new expressions.ExpressionMeta('#to.address')))}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#to', ['name'], new expressions.ExpressionMeta('if #to.name', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicText(new expressions.AliasPathExpression('#to', ['name'], new expressions.ExpressionMeta('#to.name')))],
    [new templates.DynamicText(new expressions.AliasPathExpression('#to', ['address'], new expressions.ExpressionMeta('#to.address')))]
  ])], void 0, false)], void 0, false)]);
  views.register('email-thread:email-info').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('email-thread-info')}, [new templates.Element('div', {'class': new templates.Attribute('email-time')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#email', ['created']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('timeDayDate')], void 0, new expressions.ExpressionMeta('formatTime(#email.created, #root._session.timezoneName, \'timeDayDate\')')))], void 0, false), new templates.Element('a', {'data-type': new templates.Attribute('email-message'), 'data-id': new templates.DynamicAttribute(new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#email', ['meta', 'msgId']), new expressions.AliasPathExpression('#email', ['meta', 'leverMsgId'])], void 0, new expressions.ExpressionMeta('#email.meta.msgId || #email.meta.leverMsgId'))), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-caret-down', {'class': 'more-options'})], [new templates.ElementOn('click', new expressions.FnExpression(['emailMenu', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]);
  views.register('email-thread:thread-info').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('email-thread-info')}, [new templates.Element('div', {'class': new templates.Attribute('email-edit')}, [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('email-hide '), new templates.ConditionalBlock([new expressions.PathExpression(['thread', 'visibleTo'], new expressions.ExpressionMeta('if thread.visibleTo', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.ConditionalBlock([new expressions.PathExpression(['thread', 'visibleTo'], new expressions.ExpressionMeta('if thread.visibleTo', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('secret-wrapper has-tip'), 'title': new templates.DynamicAttribute(new templates.Template([new templates.Text('Visible only to '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['thread', 'userId']), ['name'], new expressions.ExpressionMeta('#root.users_base[thread.userId].name'))), new templates.Text(' and admins')]))}, [new templates.Element('span', {'class': new templates.Attribute('email-settings-label')}, [new templates.Text('Secret')], void 0, false), new templates.ViewInstance('email-thread:icon-secret', {})], void 0, false)],
    [new templates.ViewInstance('email-thread:icon-secret', {'class': 'has-tip', 'title': 'Make secret'})]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['hide'], []))], false), new templates.Element('div', {'class': new templates.Attribute('email-delete')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-delete', {}), new templates.Text('Remove')], [new templates.ElementOn('click', new expressions.FnExpression(['showThreadDelete'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-time')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#email', ['created']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('timeDayDate')], void 0, new expressions.ExpressionMeta('formatTime(#email.created, #root._session.timezoneName, \'timeDayDate\')')))], void 0, false)], void 0, false)]);
  views.register('email-thread:confirm-email-delete').template = new templates.Template([new templates.ViewInstance('l-popup', {'class': 'darker', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('h3', void 0, [new templates.Text('Are you sure?')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteEmailConfirmPopup', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Remove')], [new templates.ElementOn('click', new expressions.FnExpression(['confirmDeleteEmail'], [new expressions.PathExpression(['thread']), new expressions.PathExpression(['trheadData'])]))], false)], void 0, false)]))}, [new templates.MarkupAs(['deleteEmailConfirmPopup'])])]);
  views.register('email-thread:confirm-thread-delete').template = new templates.Template([new templates.ViewInstance('l-popup', {'class': 'darker', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('h3', void 0, [new templates.Text('Are you sure?')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteThreadConfirmPopup', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Remove thread')], [new templates.ElementOn('click', new expressions.FnExpression(['confirmDeleteThread'], [new expressions.PathExpression(['thread'])]))], false)], void 0, false)]))}, [new templates.MarkupAs(['deleteThreadConfirmPopup'])])]);
  views.register('email-thread:email-menu').template = new templates.Template([new templates.ViewInstance('email-thread:confirm-email-delete', {}), new templates.ViewInstance('l-popup', {'class': 'email-action-menu has-menu has-icon tall-option caps-option', 'position': 'bottom-right', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-reply', {}), new templates.Text(' Reply')], [new templates.ElementOn('click', new expressions.FnExpression(['reply'], []))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-mail', {}), new templates.Text(' Forward')], [new templates.ElementOn('click', new expressions.FnExpression(['forward'], []))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.AliasPathExpression('#email', ['visibleTo'], new expressions.ExpressionMeta('if #email.visibleTo', 'if'))], [
    [new templates.Text('active')]
  ])), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-secret', {}), new templates.ConditionalBlock([new expressions.PathExpression(['thread', 'visibleTo'], new expressions.ExpressionMeta('if thread.visibleTo', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Make Unsecret')],
    [new templates.Text('Make secret')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['hide'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('divider')}, [], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-delete', {}), new templates.Text('Remove from Lever')], [new templates.ElementOn('click', new expressions.FnExpression(['showEmailDelete'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['emailMenu'])])]);
  views.register('email-thread:email-thread-delete-menu').template = new templates.Template([new templates.ViewInstance('email-thread:confirm-thread-delete', {}), new templates.ViewInstance('l-popup', {'class': 'email-action-menu has-menu has-icon tall-option caps-option', 'position': 'bottom-right', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-reply', {}), new templates.Text(' Reply')], [new templates.ElementOn('click', new expressions.FnExpression(['reply'], []))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-mail', {}), new templates.Text(' Forward')], [new templates.ElementOn('click', new expressions.FnExpression(['forward'], []))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.AliasPathExpression('#email', ['visibleTo'], new expressions.ExpressionMeta('if #email.visibleTo', 'if'))], [
    [new templates.Text('active')]
  ])), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-secret', {}), new templates.ConditionalBlock([new expressions.PathExpression(['thread', 'visibleTo'], new expressions.ExpressionMeta('if thread.visibleTo', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Make Unsecret')],
    [new templates.Text('Make secret')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['hide'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('divider')}, [], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('email-thread:icon-delete', {}), new templates.Text('Remove thread from Lever')], [new templates.ElementOn('click', new expressions.FnExpression(['showBottomToolbarThreadDelete'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['emailThreadDeleteMenu'])])]);
  views.register('interview-panel:icon-hourglass:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-hourglass')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.778,1.58 L13.778,0 L2.223,0 L2.223,1.58 L3.223,1.58 C3.348,4.597 4.452,6.572 6.371,7.21 L6.371,8.889 C4.473,9.519 3.373,11.459 3.228,14.419 L2.222,14.419 L2.222,16 L13.777,16 L13.777,14.419 L12.937,14.419 C12.791,11.459 11.691,9.519 9.794,8.889 L9.794,7.21 C11.714,6.572 12.817,4.597 12.942,1.58 L13.778,1.58 Z M12.148,14.419 L11.355,14.419 L9.943,12.765 L8.15,10.666 L6.357,12.765 L4.943,14.419 L4.021,14.419 C4.125,12.368 4.74,10.099 6.863,9.568 L7.162,9.493 L7.162,6.604 L6.863,6.53 C4.707,5.99 4.105,3.657 4.015,1.58 L12.152,1.58 C12.062,3.657 11.463,5.99 9.304,6.53 L9.005,6.604 L9.005,9.493 L9.304,9.568 C11.427,10.098 12.044,12.368 12.148,14.419 Z M12.148,14.419'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('interview-panel:icon-calendar:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.3333333,1.94117647 L5.66666667,1.94117647 L5.66666667,-0.0588235294 L2.86666667,-0.0588235294 L2.86666667,1.94117647 L2.06419881,1.94117647 C1.47645804,1.94117647 1,2.40698152 1,2.99345189 L1,14.8889011 C1,15.4700567 1.48191169,15.9411765 2.0753102,15.9411765 L13.9246898,15.9411765 C14.5185672,15.9411765 15,15.4753714 15,14.8889011 L15,2.99345189 C15,2.41229622 14.5289612,1.94117647 13.9358012,1.94117647 L13.1333333,1.94117647 L13.1333333,-0.0588235294 L10.3333333,-0.0588235294 L10.3333333,1.94117647 Z M1.93333333,6.01135164 C1.93333333,5.42031021 2.40897438,4.94117647 3.01008573,4.94117647 L12.9899143,4.94117647 C13.5845882,4.94117647 14.0666667,5.42349726 14.0666667,6.01135164 L14.0666667,13.8710013 C14.0666667,14.4620427 13.5910256,14.9411765 12.9899143,14.9411765 L3.01008573,14.9411765 C2.4154118,14.9411765 1.93333333,14.4588557 1.93333333,13.8710013 L1.93333333,6.01135164 Z M10.3333333,5.9411763 L10.3333333,7.9411763 L8.4666666,7.9411763 L8.4666666,5.9411763 L10.3333333,5.9411763 Z M13.1333333,5.9411763 L13.1333333,7.9411763 L11.2666666,7.9411763 L11.2666666,5.9411763 L13.1333333,5.9411763 Z M4.73333326,8.9411763 L4.73333326,10.9411763 L2.8666666,10.9411763 L2.8666666,8.9411763 L4.73333326,8.9411763 Z M7.53333326,8.9411763 L7.53333326,10.9411763 L5.6666666,10.9411763 L5.6666666,8.9411763 L7.53333326,8.9411763 Z M10.3333333,8.9411763 L10.3333333,10.9411763 L8.4666666,10.9411763 L8.4666666,8.9411763 L10.3333333,8.9411763 Z M13.1333333,8.9411763 L13.1333333,10.9411763 L11.2666666,10.9411763 L11.2666666,8.9411763 Z M7.53333326,5.9411763 L7.53333326,7.9411763 L5.6666666,7.9411763 L5.6666666,5.9411763 Z M12.2,2.94117647 L11.2666667,2.94117647 L11.2666667,0.941176471 L12.2,0.941176471 L12.2,2.94117647 Z M4.73333333,2.94117647 L3.8,2.94117647 L3.8,0.941176471 L4.73333333,0.941176471 L4.73333333,2.94117647 Z M4.73333326,11.9411772 L4.73333326,13.9411772 L2.8666666,13.9411772 L2.8666666,11.9411772 L4.73333326,11.9411772 Z M7.53333326,11.9411772 L7.53333326,13.9411772 L5.6666666,13.9411772 L5.6666666,11.9411772 L7.53333326,11.9411772 Z M10.3333333,11.9411772 L10.3333333,13.9411772 L8.4666666,13.9411772 L8.4666666,11.9411772 L10.3333333,11.9411772 Z M10.3333333,11.9411772'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('interview-panel:icon-caret-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-down')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.6741598,11.3413318 L8.03952616,11.7324251 L8.40489252,11.3413318 L14.8653664,4.42595055 L14.1346336,3.74328687 L7.6741598,10.6586682 L8.40489252,10.6586682 L1.86536636,3.65866816 L1.13463364,4.34133184 L7.6741598,11.3413318 Z M7.6741598,11.3413318'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('interview-panel:icon-edit:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-edit')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14.5,16 L1.5,16 C1.225,16 1,15.775 1,15.5 L1,14.5 C1,14.225 1.225,14 1.5,14 L14.5,14 C14.775,14 15,14.225 15,14.5 L15,15.5 C15,15.775 14.775,16 14.5,16 Z M6.62946319,12.4853463 C6.80246319,12.2703463 6.78646319,11.9323463 6.59646319,11.7343463 L5.06946319,10.1423463 C4.87846319,9.9443463 4.57846319,9.9543463 4.40046319,10.1633463 L4.30446319,10.2773463 C4.12746319,10.4873463 3.82746319,10.8233463 3.63946319,11.0233463 L2.10546319,12.6533463 C1.91746319,12.8533463 1.98746319,13.0173463 2.26246319,13.0173463 L5.70346319,13.0173463 C5.97746319,13.0193463 6.34446319,12.8433463 6.51546319,12.6283463 L6.62946319,12.4853463 Z M13.434,1.33835995 L13.294,1.45335995 C13.29,1.45635995 6,8.74635995 6,8.74635995 L8.221,10.96636 L15.512,3.67635995 L15.642,3.54635995 C16.115,2.91735995 16.08,2.02335995 15.512,1.45635995 C14.944,0.888359952 14.051,0.852359952 13.434,1.33835995 Z M13.434,1.33835995'), 'fill': new templates.Attribute('#D9D9D9')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('interview-panel:icon-cards:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-cards')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,2.7 C0,3.52842717 0.671572834,4.2 1.5,4.2 C2.32842717,4.2 3,3.52842717 3,2.7 C3,1.87157283 2.32842717,1.2 1.5,1.2 C0.671572834,1.2 0,1.87157283 0,2.7 Z M5,2.7 C5,2.15 5.45,1.7 6,1.7 L15,1.7 C15.55,1.7 16,2.15 16,2.7 C16,3.25 15.55,3.7 15,3.7 L6,3.7 C5.45,3.7 5,3.25 5,2.7 Z M0,7.7 C0,8.52842717 0.671572834,9.2 1.5,9.2 C2.32842717,9.2 3,8.52842717 3,7.7 C3,6.87157283 2.32842717,6.2 1.5,6.2 C0.671572834,6.2 0,6.87157283 0,7.7 Z M5,7.7 C5,7.15 5.45,6.7 6,6.7 L15,6.7 C15.55,6.7 16,7.15 16,7.7 C16,8.25 15.55,8.7 15,8.7 L6,8.7 C5.45,8.7 5,8.25 5,7.7 Z M1.5,11.2 C0.671572834,11.2 0,11.8715728 0,12.7 C0,13.5284272 0.671572834,14.2 1.5,14.2 C2.32842717,14.2 3,13.5284272 3,12.7 C3,11.8715728 2.32842717,11.2 1.5,11.2 Z M6,13.7 C5.45,13.7 5,13.25 5,12.7 C5,12.15 5.45,11.7 6,11.7 L15,11.7 C15.55,11.7 16,12.15 16,12.7 C16,13.25 15.55,13.7 15,13.7 L6,13.7 Z M6,13.7'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('interview-panel:icon-reminder:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-reminder')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.143,10.1c0-3.527-1.071-6.521-3.205-7.632C9.727,1.376,8.941,0,7.999,0\nC7.057,0,6.272,1.376,6.061,2.468C3.928,3.579,2.857,6.572,2.857,10.1c0,0.305,0,0.9-0.857,0.9H1v2h14v-2h-1.001\nC13.143,11,13.143,10.404,13.143,10.1z M10,14H6c0,1.104,0.896,2,2,2C9.104,16,10,15.104,10,14z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('interview-panel:index').template = new templates.Template([new templates.Comment('interview-panel:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('history-interview-wrapper')}, [new templates.Element('div', {'class': new templates.Attribute('history-interview')}, [new templates.Element('div', {'class': new templates.Attribute('history-interview-header')}, [new templates.Element('div', {'class': new templates.Attribute('history-interview-icon')}, [new templates.ConditionalBlock([new expressions.FnExpression(['inPast'], [new expressions.PathExpression(['panel', 'date'])], void 0, new expressions.ExpressionMeta('if inPast(panel.date)', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('interview-panel:icon-hourglass', {})],
    [new templates.ViewInstance('interview-panel:icon-calendar', {})]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('history-interview-title')}, [new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['panel', 'date']), new expressions.PathExpression(['panel', 'timezone']), new expressions.LiteralExpression('dayDate')], void 0, new expressions.ExpressionMeta('formatTime(panel.date, panel.timezone, \'dayDate\')'))), new templates.Text(' '), new templates.ViewInstance('partials:timezone', {'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['panel', 'timezone'], new expressions.ExpressionMeta('panel.timezone'))), new expressions.PathExpression(['panel', 'timezone'], new expressions.ExpressionMeta('panel.timezone')))})], void 0, false), new templates.Text(' - '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['stages']), new expressions.PathExpression(['panel', 'stageId']), ['text'], new expressions.ExpressionMeta('#root.stages[panel.stageId].text')))], void 0, false), new templates.Element('span', {'class': new templates.Attribute('panel-info')}, [new templates.Element('span', {'class': new templates.Attribute('story-delete')}, [new templates.Element('a', {'class': new templates.Attribute('story-action link has-icon'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {}), new templates.Text('Delete events')], [new templates.ElementOn('click', new expressions.FnExpression(['cancelMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom-right')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('span', {'class': new templates.Attribute('story-created dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['panel', 'createdAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('default')], void 0, new expressions.ExpressionMeta('formatTime(panel.createdAt, #root._session.timezoneName, \'default\')')))], void 0, false)], void 0, false)], void 0, false), new templates.Element('table', {'class': new templates.Attribute('history-interview-summary')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['panel', 'interviewIds'], new expressions.ExpressionMeta('each panel.interviewIds as #interviewId', 'each', void 0, '#interviewId')), [new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['interviews']), new expressions.AliasPathExpression('#interviewId', []), void 0, new expressions.ExpressionMeta('with #root.interviews[#interviewId] as #interview', 'with', void 0, '#interview')), [new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#interview', ['id']), void 0, new expressions.ExpressionMeta('if editing[#interview.id]', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('interview-panel:interview-panel-reschedule', {})],
    [new templates.ViewInstance('interview-panel:interview-panel-row', {})]
  ])])])], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.ViewInstance('l-popup', {'within': true, 'class': 'has-menu has-icon tall-option caps-option darker', 'content': new templates.Template([new templates.ViewInstance('interview-panel:interview-panel-menu', {'interview': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['data'], new expressions.ExpressionMeta('data'))), new expressions.PathExpression(['data'], new expressions.ExpressionMeta('data')))})])}, [new templates.MarkupAs(['interviewMenu'])]), new templates.ViewInstance('l-popup', {'class': 'darker', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('large-font')}, [new templates.Text('This will delete all interviews in this panel. Are you sure?')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['cancelMenu', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('dark-button transparent')}, [new templates.Text('Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['cancelPanel'], []))], false)], void 0, false)]))}, [new templates.MarkupAs(['cancelMenu'])])]);
  views.register('interview-panel:interview-panel-row').template = new templates.Template([new templates.Element('tr', {'class': new templates.Attribute('interview-panel-item')}, [new templates.Element('td', {'class': new templates.Attribute('history-interview-summary-interviewers')}, [new templates.EachBlock(new expressions.AliasPathExpression('#interview', ['interviewers'], new expressions.ExpressionMeta('each #interview.interviewers as #interviewer', 'each', void 0, '#interviewer')), [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-interview-interviewer comma-separated '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#interviewer', ['status']), new expressions.LiteralExpression('dismissed')], void 0, new expressions.ExpressionMeta('if #interviewer.status === \'dismissed\'', 'if'))], [
    [new templates.Text('interview-dismissed')]
  ])]))}, [new templates.DynamicText(new expressions.AliasPathExpression('#interviewer', ['name'], new expressions.ExpressionMeta('#interviewer.name')))], void 0, false)])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('history-interview-summary-date dates')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#interview', ['gcalEvent', 'htmlLink'], new expressions.ExpressionMeta('if #interview.gcalEvent.htmlLink', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('span', {'class': new templates.Attribute('cta')}, [new templates.Element('a', {'class': new templates.Attribute('calendar-link has-tip'), 'href': new templates.DynamicAttribute(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this'))), 'target': new templates.Attribute('_blank'), 'title': new templates.Attribute('View calendar event')}, [new templates.DynamicText(new expressions.FnExpression(['timeRange'], [new expressions.AliasPathExpression('#interview', ['date']), new expressions.AliasPathExpression('#interview', ['duration']), new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#interview', ['timezoneName']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName'])])], void 0, new expressions.ExpressionMeta('timeRange(#interview.date, #interview.duration, #interview.timezoneName || #root._session.timezoneName)'))), new templates.Text(' '), new templates.ViewInstance('partials:timezone', {'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#interview', ['timezoneName'], new expressions.ExpressionMeta('#interview.timezoneName'))), new expressions.AliasPathExpression('#interview', ['timezoneName'], new expressions.ExpressionMeta('#interview.timezoneName')))})], void 0, false)], void 0, false)],
    [new templates.DynamicText(new expressions.FnExpression(['timeRange'], [new expressions.AliasPathExpression('#interview', ['date']), new expressions.AliasPathExpression('#interview', ['duration']), new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#interview', ['timezoneName']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName'])])], void 0, new expressions.ExpressionMeta('timeRange(#interview.date, #interview.duration, #interview.timezoneName || #root._session.timezoneName)'))), new templates.Text(' '), new templates.ViewInstance('partials:timezone', {'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#interview', ['timezoneName'], new expressions.ExpressionMeta('#interview.timezoneName'))), new expressions.AliasPathExpression('#interview', ['timezoneName'], new expressions.ExpressionMeta('#interview.timezoneName')))})]
  ])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('history-interview-summary-room')}, [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#interview', ['location'], new expressions.ExpressionMeta('#interview.location')))], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-interview-controls id-'), new templates.DynamicText(new expressions.AliasPathExpression('#interview', ['id'], new expressions.ExpressionMeta('#interview.id')))]))}, [new templates.Element('a', {'class': new templates.Attribute('history-interview-edit has-tip'), 'title': new templates.Attribute('Edit/reschedule event'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('interview-panel:icon-edit', {})], [new templates.ElementOn('click', new expressions.FnExpression(['toggleEditInterview'], [new expressions.AliasPathExpression('#interview', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('history-interview-reminder interview-menu has-tip'), 'title': new templates.Attribute('Options'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('interview-panel:icon-caret-down', {})], [new templates.ElementOn('click', new expressions.FnExpression(['interviewMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression(), new expressions.LiteralExpression(), new expressions.AliasPathExpression('#interview', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]);
  views.register('interview-panel:interview-panel-reschedule').template = new templates.Template([new templates.Element('tr', {'class': new templates.Attribute('interview-reschedule-container')}, [new templates.Element('td', {'colspan': new templates.Attribute('4')}, [new templates.ViewInstance('interview-reschedule', {'class': 'history-interview', 'interview': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#interview', [], new expressions.ExpressionMeta('#interview'))), new expressions.AliasPathExpression('#interview', [], new expressions.ExpressionMeta('#interview')))})], void 0, false)], void 0, false)]);
  views.register('interview-panel:interview-panel-menu').template = new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.ConditionalBlock([new expressions.AttributePathExpression('interview', ['gcalEvent', 'htmlLink'], new expressions.ExpressionMeta('if @interview.gcalEvent.htmlLink', 'if'))], [
    [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this'))), 'target': new templates.Attribute('_blank'), 'title': new templates.Attribute('View calendar event')}, [new templates.ViewInstance('interview-panel:icon-calendar', {}), new templates.Text('View calendar event')], void 0, false)], void 0, false)]
  ]), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'class': new templates.Attribute('history-interview-reminder'), 'title': new templates.Attribute('Send reminder'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('interview-panel:icon-reminder', {}), new templates.Text('Send reminder')], [new templates.ElementOn('click', new expressions.FnExpression(['parent', 'sendReminder'], [new expressions.AttributePathExpression('interview', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'class': new templates.Attribute('history-interview-reminder'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.interviews.manual'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('interviewId'), new expressions.AttributePathExpression('interview', ['id'])])], void 0, new expressions.ExpressionMeta('url(\'hire.interviews.manual\', {\'interviewId\': @interview.id})'))), 'target': new templates.Attribute('_blank'), 'title': new templates.Attribute('Enter feedback manually')}, [new templates.ViewInstance('interview-panel:icon-cards', {}), new templates.Text('Enter feedback manually')], void 0, false)], void 0, false)], void 0, false)]);
  views.register('interview-panel:cancel-success').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Canceled the following calendar events:'), new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#notif', ['context', 'gcalEvents'], new expressions.ExpressionMeta('each #notif.context.gcalEvents as #gcalEvent', 'each', void 0, '#gcalEvent')), [new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['interviews']), new expressions.AliasPathExpression('#gcalEvent', ['interviewId']), void 0, new expressions.ExpressionMeta('with #root.interviews[#gcalEvent.interviewId] as #interview', 'with', void 0, '#interview')), [new templates.Element('li', void 0, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#gcalEvent', ['link'], new expressions.ExpressionMeta('#gcalEvent.link'))), 'target': new templates.Attribute('_blank')}, [new templates.EachBlock(new expressions.AliasPathExpression('#interview', ['interviewers'], new expressions.ExpressionMeta('each #interview.interviewers as #interviewer', 'each', void 0, '#interviewer')), [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('history-interview-interviewer comma-separated '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#interviewer', ['status']), new expressions.LiteralExpression('dismissed')], void 0, new expressions.ExpressionMeta('if #interviewer.status === \'dismissed\'', 'if'))], [
    [new templates.Text('interview-dismissed')]
  ])]))}, [new templates.DynamicText(new expressions.AliasPathExpression('#interviewer', ['name'], new expressions.ExpressionMeta('#interviewer.name')))], void 0, false), new templates.Text(' '), new templates.DynamicText(new expressions.FnExpression(['timeRange'], [new expressions.AliasPathExpression('#interview', ['date']), new expressions.AliasPathExpression('#interview', ['duration']), new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#interview', ['timezoneName']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName'])])], void 0, new expressions.ExpressionMeta('timeRange(#interview.date, #interview.duration, #interview.timezoneName || #root._session.timezoneName)'))), new templates.Text(' ')])], void 0, false)], void 0, false)])])], void 0, false)], void 0, false)]);
  views.register('interview-panel:reminder-start').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Sending reminders to complete feedback to: '), new templates.EachBlock(new expressions.AliasPathExpression('#notif', ['context', 'recipients'], new expressions.ExpressionMeta('each #notif.context.recipients as #recipient', 'each', void 0, '#recipient')), [new templates.Element('span', {'class': new templates.Attribute('comma-separated')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#recipient', ['id']), ['name'], new expressions.ExpressionMeta('#root.users_base[#recipient.id].name')))], void 0, false)])], void 0, false)]);
  views.register('interview-panel:reminder-success').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Sent reminders to complete feedback to: '), new templates.EachBlock(new expressions.AliasPathExpression('#notif', ['context', 'recipients'], new expressions.ExpressionMeta('each #notif.context.recipients as #recipient', 'each', void 0, '#recipient')), [new templates.Element('span', {'class': new templates.Attribute('comma-separated')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#recipient', ['id']), ['name'], new expressions.ExpressionMeta('#root.users_base[#recipient.id].name')))], void 0, false)])], void 0, false)]);
  views.register('profile-applications:icon-archive:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-archive')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.867,0H2.133L0,5v11h16V5L13.867,0L13.867,0z M2.794,1H7v3 H1.514L2.794,1L2.794,1z M10.104,11.874l-1.896,1.872l-1.896-1.883L4.413,10H6V7h4v3h2L10.104,11.874L10.104,11.874z M9,4V1h4h0.206 l1.28,3H9L9,4z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-applications:icon-undo:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-undo')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M4.164,3.904C3.551,4.479,3.072,5.145,2.73,5.867L0,3v7h6.666 L4.368,7.587C4.554,6.733,5,5.948,5.673,5.318C6.579,4.467,7.784,4,9.066,4c1.281,0,2.486,0.468,3.394,1.318 s1.405,1.979,1.405,3.182s-0.498,2.332-1.405,3.182c-0.417,0.392-0.417,1.023,0,1.414c0.208,0.195,0.481,0.293,0.755,0.293 s0.547-0.098,0.754-0.293C15.279,11.868,16,10.236,16,8.5c0-1.737-0.721-3.368-2.031-4.596C12.659,2.677,10.919,2,9.066,2 C7.213,2,5.473,2.677,4.164,3.904z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-applications:icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-applications:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-applications:icon-hire:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-hire')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.557,8.255h-0.539c0.572-0.059,1.149-0.65,1.082-1.305 c-0.066-0.655-0.584-1.138-1.158-1.081L8.233,6.351L7.564,6.36c0,0,0.967-0.438,0.224-3.936c-0.74-3.496-2.7-2.184-2.7-2.184\nS5.062,3.228,4.957,3.652C4.852,4.076,2.554,8.545,2.554,8.545c0,0.236-1.423,0.473-1.422,0.712c0.017,2.056,0,3.814,0,5.944\nC2.658,14.803,3.501,16,6.762,16c1.064,0,2.369-0.174,3.491-0.358l2.935-0.3c0.51-0.053,0.794-0.572,0.803-1.279\nc-0.004-0.812-0.607-0.942-0.973-1.078c0,0,1.712,0.113,1.564-1.292c0-0.868-0.646-0.989-1.125-1.064h0.34\nc0.656-0.067,1.132-0.653,1.065-1.308C14.795,8.666,14.211,8.189,13.557,8.255z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-applications:index').template = new templates.Template([new templates.Comment('profile-applications:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'archivedAt'], new expressions.ExpressionMeta('if profile.archivedAt', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('stage-archived')}, [new templates.Element('h4', {'class': new templates.Attribute('archived-reason')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['archive_reasons']), new expressions.PathExpression(['profile', 'archiveReasonId']), ['text'], new expressions.ExpressionMeta('#root.archive_reasons[profile.archiveReasonId].text')))], void 0, false), new templates.Element('h5', {'class': new templates.Attribute('archived-at-stage')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['stages']), new expressions.PathExpression(['profile', 'stageId']), ['text'], new expressions.ExpressionMeta('#root.stages[profile.stageId].text')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('unarchive-all'), 'href': new templates.Attribute('#')}, [new templates.Text('Unarchive')], [new templates.ElementOn('click', new expressions.FnExpression(['unarchiveProfile'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)],
    [new templates.Element('div', {'class': new templates.Attribute('stage-active')}, [new templates.Element('div', {'class': new templates.Attribute('stage-cell')}, [new templates.ViewInstance('l-dropdown', {'class': 'tall-option caps-option stage-dropdown', 'buttonClass': 'btn-large-secondary archive-button stage-dropdown-btn', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stageOptions'], new expressions.ExpressionMeta('stageOptions'))), new expressions.PathExpression(['stageOptions'], new expressions.ExpressionMeta('stageOptions'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile', 'stageId'], new expressions.ExpressionMeta('profile.stageId'))), new expressions.PathExpression(['profile', 'stageId'], new expressions.ExpressionMeta('profile.stageId'))), 'optionContent': new templates.Template([new templates.ConditionalBlock([new expressions.AliasPathExpression('#option', ['action'], new expressions.ExpressionMeta('if #option.action', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), new templates.ViewInstance('profile-applications:icon-hire', {})],
      [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text')))]
    ])])}, [new templates.ComponentOn('select', new expressions.FnExpression(['onStageDropdownSelect'], []))])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('archive-cell')}, [new templates.Element('button', {'data-application-id': new templates.Attribute('all'), 'class': new templates.Attribute('btn-large-secondary archive-button archive-all archive')}, [new templates.Text('Archive'), new templates.ConditionalBlock([new expressions.OperatorExpression('>', [new expressions.PathExpression(['profile', 'applicationIds', 'length']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('if profile.applicationIds.length > 1', 'if'))], [
      [new templates.Text(' all')]
    ]), new templates.ViewInstance('profile-applications:icon-archive', {})], [new templates.ElementOn('click', new expressions.FnExpression(['archiveAllReasonMenu', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom-right')])), new templates.MarkupAs(['archiveButton'])], false)], void 0, false)], void 0, false)]
  ]), new templates.ViewInstance('profile-applications:list', {}), new templates.ViewInstance('l-popup', {'class': 'has-menu tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.EachBlock(new expressions.PathExpression(['archiveReasonOptions'], new expressions.ExpressionMeta('each archiveReasonOptions as #reason', 'each', void 0, '#reason')), [new templates.Element('li', {'class': new templates.Attribute('option'), 'data-reason': new templates.DynamicAttribute(new expressions.AliasPathExpression('#reason', [], new expressions.ExpressionMeta('#reason')))}, [new templates.Element('a', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#reason', ['text'], new expressions.ExpressionMeta('#reason.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['showConfirmation'], [new expressions.AliasPathExpression('#reason', [])]))], false)])], void 0, false)]))}, [new templates.MarkupAs(['archiveAllReasonMenu'])]), new templates.ViewInstance('l-popup', {'class': 'tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Also remove upcoming interviews and feedback reminders?'), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['closeConfirmationPopup'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('No, keep upcoming')], [new templates.ElementOn('click', new expressions.FnExpression(['selectArchiveReason'], [new expressions.PathExpression(['reason'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Yes, remove')], [new templates.ElementOn('click', new expressions.FnExpression(['selectArchiveReason'], [new expressions.PathExpression(['reason']), new expressions.LiteralExpression({'cleanInterviews': true})]))], false)], void 0, false)]))}, [new templates.MarkupAs(['archiveConfirm'])]), new templates.ViewInstance('l-popup', {'class': 'has-menu tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.EachBlock(new expressions.PathExpression(['archiveReasonOptions'], new expressions.ExpressionMeta('each archiveReasonOptions as #reason', 'each', void 0, '#reason')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#reason', ['text'], new expressions.ExpressionMeta('#reason.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['selectArchiveReason'], [new expressions.AliasPathExpression('#reason', [])]))], false)])], void 0, false)]))}, [new templates.MarkupAs(['archiveReasonMenu'])])]);
  views.register('profile-applications:list').template = new templates.Template([new templates.ConditionalBlock([new expressions.PathExpression(['profileApps'], new expressions.ExpressionMeta('if profileApps', 'if'))], [
    [new templates.Element('table', {'class': new templates.Attribute('application-list')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['profileApps'], new expressions.ExpressionMeta('each profileApps as #application', 'each', void 0, '#application')), [new templates.Element('tr', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.AliasPathExpression('#application', ['archived', 'reasonId'], new expressions.ExpressionMeta('if #application.archived.reasonId', 'if'))], [
      [new templates.Text('application-archived')]
    ]))}, [new templates.Element('td', {'class': new templates.Attribute('application-role')}, [new templates.Element('h5', void 0, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.AliasPathExpression('#application', ['titleTagId']), ['text'], new expressions.ExpressionMeta('#root.tags[#application.titleTagId].text')))], void 0, false), new templates.Element('p', {'class': new templates.Attribute('application-tags')}, [new templates.DynamicText(new expressions.FnExpression(['applicationTagsText'], [new expressions.AliasPathExpression('#application', []), new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.AliasPathExpression('#root', ['tags'])], void 0, new expressions.ExpressionMeta('applicationTagsText(#application, #root.postings_base, #root.tags)')))], void 0, false), new templates.Element('p', {'class': new templates.Attribute('application-date')}, [new templates.Text('Applied on '), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#application', ['createdAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('compactDate')], void 0, new expressions.ExpressionMeta('formatTime(#application.createdAt, #root._session.timezoneName, \'compactDate\')')))], void 0, false)], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('application-actions')}, [new templates.ViewInstance('l-popup', {'class': 'delete-popup-menu', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('This will delete all data associated with this application. Are you sure?'), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteApplication'], []))], false), new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['closePopup'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]))}, [new templates.MarkupAs(['deletePopup'])]), new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#application', ['ownerId']), void 0, new expressions.ExpressionMeta('#root.users_base[#application.ownerId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#application', ['ownerId']), void 0, new expressions.ExpressionMeta('#root.users_base[#application.ownerId]'))), 'class': 'has-tip'}), new templates.Element('button', {'data-application-id': new templates.DynamicAttribute(new expressions.AliasPathExpression('#application', ['id'], new expressions.ExpressionMeta('#application.id'))), 'class': new templates.Attribute('btn btn-invisible icon-only archive'), 'title': new templates.Attribute('Archive this application')}, [new templates.ViewInstance('profile-applications:icon-archive', {})], [new templates.ElementOn('click', new expressions.FnExpression(['archiveReasonMenu', 'open'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('bottom-right')]))], false), new templates.Element('button', {'class': new templates.Attribute('btn btn-invisible icon-only unarchive'), 'title': new templates.Attribute('Unarchive this application')}, [new templates.ViewInstance('profile-applications:icon-undo', {})], [new templates.ElementOn('click', new expressions.FnExpression(['unarchiveApplication'], [new expressions.AliasPathExpression('#application', [])]))], false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false), new templates.ViewInstance('l-popup', {'class': 'delete-popup-menu', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('This will delete all data associated with this application. Are you sure?'), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteApplication'], []))], false), new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['closePopup'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]))}, [new templates.MarkupAs(['deletePopup'])])]
  ]), new templates.ViewInstance('l-posting-picker', {'class': 'grouped-suggest', 'linkClass': 'link has-icon add-application-link', 'type': 'link', 'postings': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['postings_base'], new expressions.ExpressionMeta('#root.postings_base'))), new expressions.AliasPathExpression('#root', ['postings_base'], new expressions.ExpressionMeta('#root.postings_base'))), 'tags': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), 'placeholder': 'Search', 'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-applications:icon-plus', {}), new templates.Text(' Add job application')]))}, [new templates.ComponentOn('select', new expressions.FnExpression(['addApplication'], []))])]);
  views.register('profile-applications:notif-archive').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Archived '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'profile', 'names', 0], new expressions.ExpressionMeta('#notif.context.profile.names[0]'))), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'application'], new expressions.ExpressionMeta('if #notif.context.application as #application', 'if', void 0, '#application')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text(' for '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.AliasPathExpression('#notif', ['context', 'application', 'postingId']), ['text'], new expressions.ExpressionMeta('#root.postings_base[#notif.context.application.postingId].text'))), new templates.Text('.')],
    [new templates.Text('.')]
  ])], void 0, false)]);
  views.register('profile-applications:notif-owners-notified').template = new templates.Template([new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'recipientIds'], new expressions.ExpressionMeta('if #notif.context.recipientIds', 'if'))], [
    [new templates.Text('Notified the following users about archiving of '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'profile', 'names', 0], new expressions.ExpressionMeta('#notif.context.profile.names[0]'))), new templates.Text(': '), new templates.EachBlock(new expressions.AliasPathExpression('#notif', ['context', 'recipientIds'], new expressions.ExpressionMeta('each #notif.context.recipientIds as #userId', 'each', void 0, '#userId')), [new templates.Element('span', {'class': new templates.Attribute('comma-separated')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#userId', []), ['name'], new expressions.ExpressionMeta('#root.users_base[#userId].name')))], void 0, false)])]
  ])]);
  views.register('profile-contact:icon-close:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-close')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#979797'), 'd': new templates.Attribute('M4.1 5L4.9 4.2 8 7.4l3.2-3.1 0.8 0.8 -3.1 3.2 3.2 3.1 -0.8 0.8L8 8.9l-3.1 3.2 -0.8-0.8 3.2-3.1L4.1 5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-contact:icon-link:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-link')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M16.6751679,8.69440552 C16.6751679,10.3494829 15.2700104,11.7005307 13.5366606,11.7005307 L10.3883185,11.7005307 C9.29973107,11.7005307 8.33677879,11.1660506 7.77341801,10.3552389 C7.21106344,11.165004 6.24985876,11.7005307 5.15856569,11.7005307 L2.01022357,11.7005307 C0.282787373,11.7005307 -1.12828377,10.3546426 -1.12828377,8.69440552 L-1.12828377,8.03036154 C-1.12828377,6.37528412 0.276873826,5.02423633 2.01022357,5.02423633 L5.15856569,5.02423633 C6.2471531,5.02423633 7.21010539,5.55871644 7.77346616,6.36952817 C8.33582074,5.55976302 9.29702541,5.02423633 10.3883185,5.02423633 L13.5366606,5.02423633 C15.2640968,5.02423633 16.6751679,6.37012443 16.6751679,8.03036154 Z M10.3883185,9.6986199 L13.5366606,9.6986199 C14.1098221,9.6986199 14.5806442,9.24712236 14.5806442,8.69440552 L14.5806442,8.03036154 C14.5806442,7.47733202 14.1089772,7.02614715 13.5366606,7.02614715 L10.3883185,7.02614715 C10.013397,7.02614715 9.68226484,7.21933609 9.49806053,7.50766918 L11.0086429,7.50766918 C11.5870296,7.50766918 12.0231864,7.80957115 12.0231864,8.36238356 C12.0231864,8.91519597 11.5870296,9.21709788 11.0086429,9.21709788 L9.49817009,9.21709788 C9.68253891,9.50550171 10.0138884,9.6986199 10.3883185,9.6986199 Z M2.01022357,9.6986199 L5.15856569,9.6986199 C5.53348723,9.6986199 5.86461934,9.50543097 6.04882365,9.21709788 L4.60367807,9.21709788 C4.02529131,9.21709788 3.52369782,8.91519597 3.52369782,8.36238356 C3.52369782,7.80957115 4.0252913,7.50766918 4.60367806,7.50766918 L6.04871408,7.50766918 C5.86434526,7.21926535 5.53299573,7.02614715 5.15856569,7.02614715 L2.01022357,7.02614715 C1.43706212,7.02614715 0.966239961,7.4776447 0.966239961,8.03036154 L0.966239961,8.69440552 C0.966239961,9.24743504 1.43790694,9.6986199 2.01022357,9.6986199 Z M2.01022357,9.6986199'), 'fill': new templates.Attribute('#3F484B'), 'transform': new templates.Attribute('translate(7.773442, 8.362384) rotate(-45.000000) translate(-7.773442, -8.362384) ')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-contact:icon-location:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-location')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('10px'), 'height': new templates.Attribute('14px'), 'viewBox': new templates.Attribute('0 0 10 14'), 'enable-background': new templates.Attribute('new 0 0 10 14'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'d': new templates.Attribute('M4.813,0C2.887,0,0,0.878,0,4.376C0,6.127,3.852,12.25,4.813,14c0.96-1.75,4.812-7.873,4.812-9.624 C9.625,0.878,6.738,0,4.813,0 M4.812,7.005c-1.234,0-2.236-1-2.236-2.236c0-1.233,1.002-2.236,2.236-2.236s2.236,1.002,2.236,2.236 C7.049,6.005,6.047,7.005,4.812,7.005'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-contact:icon-mail:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-mail')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M1.91041092,2.13405025 L14.0892085,2.13405025 C14.3344049,2.13405025 14.5690915,2.17781151 14.7859018,2.25790765 L7.99949326,7.67307941 L1.20411635,2.26151146 C1.42373091,2.17910235 1.66177262,2.13405025 1.91041092,2.13405025 Z M15.6318054,2.85738206 C15.9177503,3.20216769 16.0892948,3.64458077 16.0892948,4.12703291 L16.0892948,11.0070173 C16.0892948,12.1107937 15.1938257,13 14.0892085,13 L1.91041092,13 C0.803221956,13 -0.089675347,12.1077113 -0.089675347,11.0070173 L-0.089675347,4.12703291 C-0.089675347,3.64703603 0.0796668677,3.20761653 0.361907057,2.86425825 L7.68135948,8.6931791 L8.0001262,8.94703224 L8.31864052,8.69287575 Z M15.6318054,2.85738206'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-contact:icon-phone:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-phone')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('13px'), 'height': new templates.Attribute('14px'), 'viewBox': new templates.Attribute('0 0 13 14'), 'enable-background': new templates.Attribute('new 0 0 13 14'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'d': new templates.Attribute('M10.887,13.973c-0.599,0.125-4.592-0.039-7.845-3.711c-3.454-3.894-3.096-8.284-2.962-8.556 c0.268-0.532,0.838-1.098,1.564-1.553C1.748,0.086,1.857,0.042,1.974,0.02C2.451-0.078,2.896,0.211,3.193,0.4l0.152,0.096 c0.403,0.233,0.905,2.865,0.883,3.19C4.206,4.063,3.792,4.432,2.803,5.312c0.285,0.981,1.164,2.321,1.863,3.111 c0.644,0.729,2.034,1.972,3.02,2.399c0.855-0.757,1.29-1.137,1.639-1.207c0.051-0.008,0.101-0.014,0.15-0.011 c0.324,0.019,2.876,0.832,3.059,1.259l0.078,0.166c0.186,0.383,0.495,1.021,0.061,1.565c-0.541,0.666-1.172,1.167-1.731,1.364 L10.887,13.973z'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-contact:icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-contact:index').template = new templates.Template([new templates.Comment('profile-contact:index', [new templates.ComponentMarker()]), new templates.ViewInstance('profile-contact:location', {}), new templates.ViewInstance('profile-contact:phone', {}), new templates.ViewInstance('profile-contact:email', {}), new templates.ViewInstance('profile-contact:link', {})]);
  views.register('profile-contact:location').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('indented-icon-column content-sub-section')}, [new templates.Element('div', {'class': new templates.Attribute('editable-item')}, [new templates.ViewInstance('profile-contact:icon-location', {'class': 'icon-column'}), new templates.Element('input', {'class': new templates.Attribute('hoverable-input'), 'placeholder': new templates.Attribute('Add location'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['profile', 'location', 'name'], new expressions.ExpressionMeta('profile.location.name')))}, null, void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-contact:phone').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('contact-list-item indented-icon-column content-sub-section')}, [new templates.ViewInstance('profile-contact:icon-phone', {'class': 'icon-column'}), new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['profile', 'phones'], new expressions.ExpressionMeta('each profile.phones as #phone, #i', 'each', void 0, '#phone', '#i')), [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#i', []), new expressions.LiteralExpression(0)], void 0, new expressions.ExpressionMeta('if #i == 0', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('profile-contact:phone-first', {})],
    [new templates.Element('li', void 0, [new templates.Element('button', {'tabindex': new templates.Attribute('-1'), 'class': new templates.Attribute('btn-invisible icon-only')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['remove'], [new expressions.AliasPathExpression('#phone', []), new expressions.LiteralExpression('phones')]))], false), new templates.Element('div', void 0, [new templates.Element('div', {'class': new templates.Attribute('editable-item has-dropdown')}, [new templates.Element('div', void 0, [new templates.ViewInstance('l-dropdown', {'buttonClass': 'right-float btn-invisible', 'prompt': 'TYPE', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#phone', ['type'], new expressions.ExpressionMeta('#phone.type'))), new expressions.AliasPathExpression('#phone', ['type'], new expressions.ExpressionMeta('#phone.type'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['phoneOptions'], new expressions.ExpressionMeta('phoneOptions'))), new expressions.PathExpression(['phoneOptions'], new expressions.ExpressionMeta('phoneOptions')))}), new templates.Element('div', {'class': new templates.Attribute('around-input')}, [new templates.Element('input', {'class': new templates.Attribute('hoverable-input'), 'placeholder': new templates.Attribute('Add contact number'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#phone', ['value'], new expressions.ExpressionMeta('#phone.value')))}, null, void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]
  ])], [new templates.ViewInstance('profile-contact:phone-empty', {})]), new templates.ConditionalBlock([new expressions.PathExpression(['newRow'], new expressions.ExpressionMeta('if newRow', 'if'))], [
    [new templates.ViewInstance('profile-contact:phone-empty', {})]
  ])], void 0, false)], void 0, false)]);
  views.register('profile-contact:phone-first').template = new templates.Template([new templates.Element('li', void 0, [new templates.Element('button', {'tabindex': new templates.Attribute('-1'), 'class': new templates.Attribute('btn btn-invisible icon-only')}, [new templates.ViewInstance('profile-contact:icon-plus', {})], [new templates.ElementOn('click', new expressions.FnExpression(['addPhoneRow'], []))], false), new templates.Element('div', void 0, [new templates.Element('div', {'class': new templates.Attribute('editable-item has-dropdown')}, [new templates.Element('div', void 0, [new templates.ViewInstance('l-dropdown', {'buttonClass': 'btn-invisible', 'prompt': 'TYPE', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile', 'phones', 0, 'type'], new expressions.ExpressionMeta('profile.phones[0].type'))), new expressions.PathExpression(['profile', 'phones', 0, 'type'], new expressions.ExpressionMeta('profile.phones[0].type'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['phoneOptions'], new expressions.ExpressionMeta('phoneOptions'))), new expressions.PathExpression(['phoneOptions'], new expressions.ExpressionMeta('phoneOptions')))}), new templates.Element('div', {'class': new templates.Attribute('around-input')}, [new templates.Element('input', {'class': new templates.Attribute('hoverable-input'), 'placeholder': new templates.Attribute('Add contact number'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['profile', 'phones', 0, 'value'], new expressions.ExpressionMeta('profile.phones[0].value')))}, null, void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-contact:phone-empty').template = new templates.Template([new templates.Element('li', void 0, [new templates.ConditionalBlock([new expressions.PathExpression(['newRow'], new expressions.ExpressionMeta('if newRow', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('button', {'tabindex': new templates.Attribute('-1'), 'class': new templates.Attribute('btn btn-invisible icon-only')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['closePhoneRow'], []))], false)],
    [new templates.Element('button', {'tabindex': new templates.Attribute('-1'), 'class': new templates.Attribute('btn btn-invisible icon-only')}, [new templates.ViewInstance('profile-contact:icon-plus', {})], [new templates.ElementOn('click', new expressions.FnExpression(['addPhoneRow'], []))], false)]
  ]), new templates.Element('div', void 0, [new templates.Element('div', {'class': new templates.Attribute('editable-item has-dropdown')}, [new templates.Element('div', void 0, [new templates.ViewInstance('l-dropdown', {'buttonClass': 'btn-invisible', 'prompt': 'TYPE', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['newType'], new expressions.ExpressionMeta('newType'))), new expressions.PathExpression(['newType'], new expressions.ExpressionMeta('newType'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['phoneOptions'], new expressions.ExpressionMeta('phoneOptions'))), new expressions.PathExpression(['phoneOptions'], new expressions.ExpressionMeta('phoneOptions')))}), new templates.Element('div', {'class': new templates.Attribute('around-input')}, [new templates.Element('input', {'class': new templates.Attribute('hoverable-input'), 'placeholder': new templates.Attribute('Add contact number'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['newPhone'], new expressions.ExpressionMeta('newPhone')))}, null, [new templates.ElementOn('blur', new expressions.FnExpression(['submitPhone'], [])), new templates.ElementOn('keydown', new expressions.FnExpression(['phoneKeydown'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-contact:email').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('indented-icon-column content-sub-section')}, [new templates.ViewInstance('profile-contact:icon-mail', {'class': 'icon-column'}), new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['profile', 'emails'], new expressions.ExpressionMeta('each profile.emails as #email', 'each', void 0, '#email')), [new templates.Element('li', void 0, [new templates.Element('div', {'class': new templates.Attribute('content-unit')}, [new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new templates.Template([new templates.Text('mailto:'), new templates.DynamicText(new expressions.AliasPathExpression('#email', ['value'], new expressions.ExpressionMeta('#email.value')))])), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.AliasPathExpression('#email', ['value'], new expressions.ExpressionMeta('#email.value')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('content-remove'), 'tabindex': new templates.Attribute('-1'), 'title': new templates.Attribute('Remove'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['remove'], [new expressions.AliasPathExpression('#email', []), new expressions.LiteralExpression('emails')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)])], void 0, false), new templates.Element('div', void 0, [new templates.Element('div', {'class': new templates.Attribute('editable-item')}, [new templates.Element('input', {'class': new templates.Attribute('hoverable-input add-email'), 'placeholder': new templates.Attribute('Add email'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['newEmail'], new expressions.ExpressionMeta('newEmail')))}, null, [new templates.ElementOn('blur', new expressions.FnExpression(['submitEmail'], [])), new templates.ElementOn('keydown', new expressions.FnExpression(['emailKeydown'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-contact:link').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('indented-icon-column content-sub-section')}, [new templates.ViewInstance('profile-contact:icon-link', {'class': 'icon-column'}), new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['profile', 'links'], new expressions.ExpressionMeta('each profile.links as #link', 'each', void 0, '#link')), [new templates.Element('li', void 0, [new templates.Element('div', {'class': new templates.Attribute('content-unit')}, [new templates.Element('img', {'class': new templates.Attribute('favicon'), 'src': new templates.DynamicAttribute(new templates.Template([new templates.Text('https://s2.googleusercontent.com/s2/favicons?alt=p&domain='), new templates.DynamicText(new expressions.FnExpression(['urlDomain'], [new expressions.AliasPathExpression('#link', ['url'])], void 0, new expressions.ExpressionMeta('urlDomain(#link.url)')))]))}, null, void 0, false), new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['externalUrl'], [new expressions.AliasPathExpression('#link', ['url'])], void 0, new expressions.ExpressionMeta('externalUrl(#link.url)'))), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.FnExpression(['displayUrl'], [new expressions.AliasPathExpression('#link', ['url'])], void 0, new expressions.ExpressionMeta('displayUrl(#link.url)')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('content-remove'), 'tabindex': new templates.Attribute('-1'), 'title': new templates.Attribute('Remove'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['remove'], [new expressions.AliasPathExpression('#link', []), new expressions.LiteralExpression('links')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)])], void 0, false), new templates.Element('div', void 0, [new templates.Element('div', {'class': new templates.Attribute('editable-item')}, [new templates.Element('input', {'class': new templates.Attribute('hoverable-input'), 'placeholder': new templates.Attribute('Add a link'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['newLink'], new expressions.ExpressionMeta('newLink')))}, null, [new templates.ElementOn('blur', new expressions.FnExpression(['submitLink'], [])), new templates.ElementOn('keydown', new expressions.FnExpression(['linkKeydown'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-cta:icon-double-caret-right:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-double-carat-right')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('g', {'transform': new templates.Attribute('translate(1.000000, 1.500000)'), 'fill': new templates.Attribute('#979797')}, [new templates.Element('path', {'d': new templates.Attribute('M14.0857553,6.58184906 L14.4393087,6.22829567 L14.0857553,5.87474228 L9.14619725,0.935184216 L8.43909047,1.642291 L13.0287252,6.22466558 L8.37864853,10.8747423 L9.08575531,11.5818491 L14.0857553,6.58184906 Z M14.0857553,6.58184906')}, [], void 0, false, null, 'http://www.w3.org/2000/svg'), new templates.Element('path', {'d': new templates.Attribute('M6.08575531,6.58184906 L6.4393087,6.22829567 L6.08575531,5.87474228 L1.14619725,0.935184216 L0.439090466,1.642291 L5.04987275,6.20351806 L0.37864853,10.8747423 L1.08575531,11.5818491 L6.08575531,6.58184906 Z M6.08575531,6.58184906')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-cta:icon-calendar:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.3333333,1.94117647 L5.66666667,1.94117647 L5.66666667,-0.0588235294 L2.86666667,-0.0588235294 L2.86666667,1.94117647 L2.06419881,1.94117647 C1.47645804,1.94117647 1,2.40698152 1,2.99345189 L1,14.8889011 C1,15.4700567 1.48191169,15.9411765 2.0753102,15.9411765 L13.9246898,15.9411765 C14.5185672,15.9411765 15,15.4753714 15,14.8889011 L15,2.99345189 C15,2.41229622 14.5289612,1.94117647 13.9358012,1.94117647 L13.1333333,1.94117647 L13.1333333,-0.0588235294 L10.3333333,-0.0588235294 L10.3333333,1.94117647 Z M1.93333333,6.01135164 C1.93333333,5.42031021 2.40897438,4.94117647 3.01008573,4.94117647 L12.9899143,4.94117647 C13.5845882,4.94117647 14.0666667,5.42349726 14.0666667,6.01135164 L14.0666667,13.8710013 C14.0666667,14.4620427 13.5910256,14.9411765 12.9899143,14.9411765 L3.01008573,14.9411765 C2.4154118,14.9411765 1.93333333,14.4588557 1.93333333,13.8710013 L1.93333333,6.01135164 Z M10.3333333,5.9411763 L10.3333333,7.9411763 L8.4666666,7.9411763 L8.4666666,5.9411763 L10.3333333,5.9411763 Z M13.1333333,5.9411763 L13.1333333,7.9411763 L11.2666666,7.9411763 L11.2666666,5.9411763 L13.1333333,5.9411763 Z M4.73333326,8.9411763 L4.73333326,10.9411763 L2.8666666,10.9411763 L2.8666666,8.9411763 L4.73333326,8.9411763 Z M7.53333326,8.9411763 L7.53333326,10.9411763 L5.6666666,10.9411763 L5.6666666,8.9411763 L7.53333326,8.9411763 Z M10.3333333,8.9411763 L10.3333333,10.9411763 L8.4666666,10.9411763 L8.4666666,8.9411763 L10.3333333,8.9411763 Z M13.1333333,8.9411763 L13.1333333,10.9411763 L11.2666666,10.9411763 L11.2666666,8.9411763 Z M7.53333326,5.9411763 L7.53333326,7.9411763 L5.6666666,7.9411763 L5.6666666,5.9411763 Z M12.2,2.94117647 L11.2666667,2.94117647 L11.2666667,0.941176471 L12.2,0.941176471 L12.2,2.94117647 Z M4.73333333,2.94117647 L3.8,2.94117647 L3.8,0.941176471 L4.73333333,0.941176471 L4.73333333,2.94117647 Z M4.73333326,11.9411772 L4.73333326,13.9411772 L2.8666666,13.9411772 L2.8666666,11.9411772 L4.73333326,11.9411772 Z M7.53333326,11.9411772 L7.53333326,13.9411772 L5.6666666,13.9411772 L5.6666666,11.9411772 L7.53333326,11.9411772 Z M10.3333333,11.9411772 L10.3333333,13.9411772 L8.4666666,13.9411772 L8.4666666,11.9411772 L10.3333333,11.9411772 Z M10.3333333,11.9411772'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-cta:icon-cards:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-cards')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,2.7 C0,3.52842717 0.671572834,4.2 1.5,4.2 C2.32842717,4.2 3,3.52842717 3,2.7 C3,1.87157283 2.32842717,1.2 1.5,1.2 C0.671572834,1.2 0,1.87157283 0,2.7 Z M5,2.7 C5,2.15 5.45,1.7 6,1.7 L15,1.7 C15.55,1.7 16,2.15 16,2.7 C16,3.25 15.55,3.7 15,3.7 L6,3.7 C5.45,3.7 5,3.25 5,2.7 Z M0,7.7 C0,8.52842717 0.671572834,9.2 1.5,9.2 C2.32842717,9.2 3,8.52842717 3,7.7 C3,6.87157283 2.32842717,6.2 1.5,6.2 C0.671572834,6.2 0,6.87157283 0,7.7 Z M5,7.7 C5,7.15 5.45,6.7 6,6.7 L15,6.7 C15.55,6.7 16,7.15 16,7.7 C16,8.25 15.55,8.7 15,8.7 L6,8.7 C5.45,8.7 5,8.25 5,7.7 Z M1.5,11.2 C0.671572834,11.2 0,11.8715728 0,12.7 C0,13.5284272 0.671572834,14.2 1.5,14.2 C2.32842717,14.2 3,13.5284272 3,12.7 C3,11.8715728 2.32842717,11.2 1.5,11.2 Z M6,13.7 C5.45,13.7 5,13.25 5,12.7 C5,12.15 5.45,11.7 6,11.7 L15,11.7 C15.55,11.7 16,12.15 16,12.7 C16,13.25 15.55,13.7 15,13.7 L6,13.7 Z M6,13.7'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-cta:index').template = new templates.Template([new templates.Comment('profile-cta:index', [new templates.ComponentMarker()]), new templates.EachBlock(new expressions.PathExpression(['ctas'], new expressions.ExpressionMeta('each ctas as #cta', 'each', void 0, '#cta')), [new templates.ConditionalBlock([new expressions.AliasPathExpression('#cta', ['action'], new expressions.ExpressionMeta('if #cta.action', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'title': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.AliasPathExpression('#cta', ['title'], new expressions.ExpressionMeta('if #cta.title', 'if'))], [
      [new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))]
    ])), 'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.AliasPathExpression('#cta', ['title'], new expressions.ExpressionMeta('if #cta.title', 'if'))], [
      [new templates.Text('has-tip')]
    ])), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('profile-cta:call-to-action', {})], [new templates.ElementOn('click', new expressions.FnExpression(['action'], [new expressions.AliasPathExpression('#cta', ['action']), new expressions.PathExpression(['$event'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.AliasPathExpression('#root', ['$render', 'params']), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.feedback\', #root.$render.params, #root.$render.query)'))), 'title': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.AliasPathExpression('#cta', ['title'], new expressions.ExpressionMeta('if #cta.title', 'if'))], [
      [new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))]
    ])), 'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.AliasPathExpression('#cta', ['title'], new expressions.ExpressionMeta('if #cta.title', 'if'))], [
      [new templates.Text('has-tip')]
    ]))}, [new templates.ViewInstance('profile-cta:call-to-action', {})], void 0, false)]
  ])])]);
  views.register('profile-cta:call-to-action').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('indented-icon-column content-sub-section call-to-action')}, [new templates.DynamicViewInstance(new expressions.AliasPathExpression('#cta', ['icon'], new expressions.ExpressionMeta('#cta.icon')), {'optional': true, 'class': 'icon-column'}), new templates.Element('div', {'class': new templates.Attribute('call-to-action-text')}, [new templates.Element('span', {'class': new templates.Attribute('call-to-action-main')}, [new templates.DynamicText(new expressions.AliasPathExpression('#cta', ['text'], new expressions.ExpressionMeta('#cta.text')))], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#cta', ['count'], new expressions.ExpressionMeta('if #cta.count', 'if'))], [
    [new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.Text('('), new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this'))), new templates.Text(')')], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#cta', ['date'], new expressions.ExpressionMeta('if #cta.date', 'if'))], [
    [new templates.Text(' – '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.RelativePathExpression([]), new expressions.AliasPathExpression('#cta', ['timezone']), new expressions.LiteralExpression('day')], void 0, new expressions.ExpressionMeta('formatTime(this, #cta.timezone, \'day\')'))), new templates.Text(' '), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.RelativePathExpression([]), new expressions.AliasPathExpression('#cta', ['timezone']), new expressions.LiteralExpression('compactDate')], void 0, new expressions.ExpressionMeta('formatTime(this, #cta.timezone, \'compactDate\')')))], void 0, false)]
  ])], void 0, false), new templates.ViewInstance('profile-cta:icon-double-caret-right', {'class': 'call-to-action-arrows'})], void 0, false)]);
  views.register('profile-date-edit:index').template = new templates.Template([new templates.Comment('profile-date-edit:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('resume-time')}, [new templates.ViewInstance('l-picker', {'class': 'resume-time-picker', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stringMonth'], new expressions.ExpressionMeta('stringMonth'))), new expressions.PathExpression(['stringMonth'], new expressions.ExpressionMeta('stringMonth'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['months'], new expressions.ExpressionMeta('months'))), new expressions.PathExpression(['months'], new expressions.ExpressionMeta('months'))), 'clearable': true}), new templates.ViewInstance('l-picker', {'class': 'resume-time-picker year', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stringYear'], new expressions.ExpressionMeta('stringYear'))), new expressions.PathExpression(['stringYear'], new expressions.ExpressionMeta('stringYear'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['years'], new expressions.ExpressionMeta('years'))), new expressions.PathExpression(['years'], new expressions.ExpressionMeta('years'))), 'clearable': true})], void 0, false)]);
  views.register('profile-education:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-education:index').template = new templates.Template([new templates.Comment('profile-education:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('education')}, [new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'schools'], new expressions.ExpressionMeta('if profile.schools', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('spaced-divider')}, [], void 0, false), new templates.Element('h2', {'class': new templates.Attribute('profile-section-header')}, [new templates.Text('Education')], void 0, false), new templates.EachBlock(new expressions.PathExpression(['positions'], new expressions.ExpressionMeta('each positions as #school, #i', 'each', void 0, '#school', '#i')), [new templates.ConditionalBlock([new expressions.AliasPathExpression('#school', ['editing'], new expressions.ExpressionMeta('if #school.editing', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.ViewInstance('profile-education:school-edit', {})],
      [new templates.ViewInstance('profile-education:school', {})]
    ])])]
  ])], void 0, false)]);
  views.register('profile-education:school').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('position')}, [new templates.Element('a', {'class': new templates.Attribute('has-tip edit-section'), 'title': new templates.Attribute('Edit'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-edit', {})], [new templates.ElementOn('click', new expressions.FnExpression(['edit'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('h3', {'class': new templates.Attribute('schoolName')}, [new templates.DynamicText(new expressions.AliasPathExpression('#school', ['org'], new expressions.ExpressionMeta('#school.org')))], void 0, false), new templates.Element('h4', {'class': new templates.Attribute('schoolDegree')}, [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#school', ['degree'], new expressions.ExpressionMeta('#school.degree')))], void 0, false), new templates.Text(' '), new templates.Element('span', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#school', ['field'], new expressions.ExpressionMeta('#school.field')))], void 0, false)], void 0, false), new templates.Element('h5', {'class': new templates.Attribute('schoolTime')}, [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.FnExpression(['sparseDateRange'], [new expressions.AliasPathExpression('#school', ['start']), new expressions.AliasPathExpression('#school', ['end'])], void 0, new expressions.ExpressionMeta('sparseDateRange(#school.start, #school.end)')))], void 0, false), new templates.Element('span', void 0, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#school', ['location', 'name'], new expressions.ExpressionMeta('if #school.location.name', 'if'))], [
    [new templates.Text(', '), new templates.DynamicText(new expressions.AliasPathExpression('#school', ['location', 'name'], new expressions.ExpressionMeta('#school.location.name')))]
  ])], void 0, false)], void 0, false), new templates.Element('p', {'class': new templates.Attribute('schoolGpa')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#school', ['gpa'], new expressions.ExpressionMeta('if #school.gpa', 'if'))], [
    [new templates.Text('GPA: '), new templates.DynamicText(new expressions.AliasPathExpression('#school', ['gpa'], new expressions.ExpressionMeta('#school.gpa')))]
  ])], void 0, false), new templates.Element('p', {'class': new templates.Attribute('schoolSummary')}, [new templates.DynamicText(new expressions.AliasPathExpression('#school', ['summary'], new expressions.ExpressionMeta('#school.summary')))], void 0, false)], void 0, false)]);
  views.register('profile-education:school-edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('position resume-edit')}, [new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('has-tip delete-section'), 'title': new templates.Attribute('Delete section'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('profile-education:icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['remove'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['cancel'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit'), 'type': new templates.Attribute('submit')}, [new templates.Text('Save changes')], [new templates.ElementOn('click', new expressions.FnExpression(['save'], [new expressions.AliasPathExpression('#i', [])]))], false)], void 0, false), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#school', ['org'], new expressions.ExpressionMeta('#school.org'))), 'placeholder': new templates.Attribute('School name')}, null, void 0, false), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#school', ['degree'], new expressions.ExpressionMeta('#school.degree'))), 'placeholder': new templates.Attribute('Degree')}, null, void 0, false), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#school', ['field'], new expressions.ExpressionMeta('#school.field'))), 'placeholder': new templates.Attribute('Field')}, null, void 0, false), new templates.Element('h5', {'class': new templates.Attribute('schoolTime')}, [new templates.ViewInstance('profile-date-edit', {'month': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#school', ['start', 'month'], new expressions.ExpressionMeta('#school.start.month'))), new expressions.AliasPathExpression('#school', ['start', 'month'], new expressions.ExpressionMeta('#school.start.month'))), 'year': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#school', ['start', 'year'], new expressions.ExpressionMeta('#school.start.year'))), new expressions.AliasPathExpression('#school', ['start', 'year'], new expressions.ExpressionMeta('#school.start.year')))}), new templates.Element('span', {'class': new templates.Attribute('resume-time-to')}, [new templates.Text('  to')], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#school', ['end'], new expressions.ExpressionMeta('if #school.end', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('br', void 0, null, void 0, false), new templates.ViewInstance('profile-date-edit', {'month': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#school', ['end', 'month'], new expressions.ExpressionMeta('#school.end.month'))), new expressions.AliasPathExpression('#school', ['end', 'month'], new expressions.ExpressionMeta('#school.end.month'))), 'year': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#school', ['end', 'year'], new expressions.ExpressionMeta('#school.end.year'))), new expressions.AliasPathExpression('#school', ['end', 'year'], new expressions.ExpressionMeta('#school.end.year')))}), new templates.Element('a', {'class': new templates.Attribute('resume-time-end-toggle label'), 'href': new templates.Attribute('#')}, [new templates.Text('To present')], [new templates.ElementOn('click', new expressions.FnExpression(['setEnd'], [new expressions.AliasPathExpression('#i', []), new expressions.LiteralExpression('present')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('span', {'class': new templates.Attribute('resume-time-to')}, [new templates.Text(' present')], void 0, false), new templates.Element('a', {'class': new templates.Attribute('resume-time-end-toggle label'), 'href': new templates.Attribute('#')}, [new templates.Text('To date')], [new templates.ElementOn('click', new expressions.FnExpression(['setEnd'], [new expressions.AliasPathExpression('#i', []), new expressions.LiteralExpression('date')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ]), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#school', ['location', 'name'], new expressions.ExpressionMeta('#school.location.name'))), 'placeholder': new templates.Attribute('Location')}, null, void 0, false)], void 0, false), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#school', ['gpa'], new expressions.ExpressionMeta('#school.gpa'))), 'placeholder': new templates.Attribute('GPA')}, null, void 0, false), new templates.Element('textarea', {'class': new templates.Attribute('classic-input'), 'placeholder': new templates.Attribute('Summary')}, [new templates.DynamicText(new expressions.AliasPathExpression('#school', ['summary'], new expressions.ExpressionMeta('#school.summary')))], void 0, false)], void 0, false)]);
  views.register('profile-experience:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-experience:index').template = new templates.Template([new templates.Comment('profile-experience:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('experience')}, [new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'positions'], new expressions.ExpressionMeta('if profile.positions', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('spaced-divider')}, [], void 0, false), new templates.Element('h2', {'class': new templates.Attribute('profile-section-header')}, [new templates.Text('Experience')], void 0, false), new templates.EachBlock(new expressions.PathExpression(['positions'], new expressions.ExpressionMeta('each positions as #position, #i', 'each', void 0, '#position', '#i')), [new templates.ConditionalBlock([new expressions.AliasPathExpression('#position', ['editing'], new expressions.ExpressionMeta('if #position.editing', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.ViewInstance('profile-experience:position-edit', {})],
      [new templates.ViewInstance('profile-experience:position', {})]
    ])])]
  ])], void 0, false)]);
  views.register('profile-experience:position').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('position')}, [new templates.Element('a', {'class': new templates.Attribute('has-tip edit-section'), 'title': new templates.Attribute('Edit'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-edit', {})], [new templates.ElementOn('click', new expressions.FnExpression(['edit'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('h3', {'class': new templates.Attribute('positionTitle')}, [new templates.DynamicText(new expressions.AliasPathExpression('#position', ['title'], new expressions.ExpressionMeta('#position.title')))], void 0, false), new templates.Element('h4', {'class': new templates.Attribute('positionOrg')}, [new templates.DynamicText(new expressions.AliasPathExpression('#position', ['org'], new expressions.ExpressionMeta('#position.org')))], void 0, false), new templates.Element('h5', {'class': new templates.Attribute('positionTime')}, [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.FnExpression(['sparseDateRange'], [new expressions.AliasPathExpression('#position', ['start']), new expressions.AliasPathExpression('#position', ['end'])], void 0, new expressions.ExpressionMeta('sparseDateRange(#position.start, #position.end)')))], void 0, false), new templates.Element('span', void 0, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#position', ['location', 'name'], new expressions.ExpressionMeta('if #position.location.name', 'if'))], [
    [new templates.Text(', '), new templates.DynamicText(new expressions.AliasPathExpression('#position', ['location', 'name'], new expressions.ExpressionMeta('#position.location.name')))]
  ])], void 0, false)], void 0, false), new templates.Element('p', {'class': new templates.Attribute('positionSummary')}, [new templates.DynamicText(new expressions.AliasPathExpression('#position', ['summary'], new expressions.ExpressionMeta('#position.summary')))], void 0, false)], void 0, false)]);
  views.register('profile-experience:position-edit').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('position resume-edit')}, [new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('has-tip delete-section'), 'title': new templates.Attribute('Delete section'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('profile-experience:icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['remove'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['cancel'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit'), 'type': new templates.Attribute('submit')}, [new templates.Text('Save changes')], [new templates.ElementOn('click', new expressions.FnExpression(['save'], [new expressions.AliasPathExpression('#i', [])]))], false)], void 0, false), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#position', ['title'], new expressions.ExpressionMeta('#position.title'))), 'placeholder': new templates.Attribute('Title')}, null, void 0, false), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#position', ['org'], new expressions.ExpressionMeta('#position.org'))), 'placeholder': new templates.Attribute('Organization')}, null, void 0, false), new templates.Element('h5', {'class': new templates.Attribute('positionTime')}, [new templates.ViewInstance('profile-date-edit', {'month': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#position', ['start', 'month'], new expressions.ExpressionMeta('#position.start.month'))), new expressions.AliasPathExpression('#position', ['start', 'month'], new expressions.ExpressionMeta('#position.start.month'))), 'year': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#position', ['start', 'year'], new expressions.ExpressionMeta('#position.start.year'))), new expressions.AliasPathExpression('#position', ['start', 'year'], new expressions.ExpressionMeta('#position.start.year')))}), new templates.Element('span', {'class': new templates.Attribute('resume-time-to')}, [new templates.Text('  to')], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#position', ['end'], new expressions.ExpressionMeta('if #position.end', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('br', void 0, null, void 0, false), new templates.ViewInstance('profile-date-edit', {'month': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#position', ['end', 'month'], new expressions.ExpressionMeta('#position.end.month'))), new expressions.AliasPathExpression('#position', ['end', 'month'], new expressions.ExpressionMeta('#position.end.month'))), 'year': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#position', ['end', 'year'], new expressions.ExpressionMeta('#position.end.year'))), new expressions.AliasPathExpression('#position', ['end', 'year'], new expressions.ExpressionMeta('#position.end.year')))}), new templates.Element('a', {'class': new templates.Attribute('resume-time-end-toggle label'), 'href': new templates.Attribute('#')}, [new templates.Text('To present')], [new templates.ElementOn('click', new expressions.FnExpression(['setEnd'], [new expressions.AliasPathExpression('#i', []), new expressions.LiteralExpression('present')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('span', {'class': new templates.Attribute('resume-time-to')}, [new templates.Text(' present')], void 0, false), new templates.Element('a', {'class': new templates.Attribute('resume-time-end-toggle label'), 'href': new templates.Attribute('#')}, [new templates.Text('To date')], [new templates.ElementOn('click', new expressions.FnExpression(['setEnd'], [new expressions.AliasPathExpression('#i', []), new expressions.LiteralExpression('date')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ]), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#position', ['location', 'name'], new expressions.ExpressionMeta('#position.location.name'))), 'placeholder': new templates.Attribute('Location')}, null, void 0, false)], void 0, false), new templates.Element('textarea', {'class': new templates.Attribute('classic-input'), 'placeholder': new templates.Attribute('Summary')}, [new templates.DynamicText(new expressions.AliasPathExpression('#position', ['summary'], new expressions.ExpressionMeta('#position.summary')))], void 0, false)], void 0, false)]);
  views.register('profile-export-feedback:icon-close:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-close')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#979797'), 'd': new templates.Attribute('M4.1 5L4.9 4.2 8 7.4l3.2-3.1 0.8 0.8 -3.1 3.2 3.2 3.1 -0.8 0.8L8 8.9l-3.1 3.2 -0.8-0.8 3.2-3.1L4.1 5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-export-feedback:icon-print:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-print')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13,4.161 L9.875,1 L3,1 L3,6 L1,6 L0,7 L0,12 L3,12 L3,14 L3,15 L4,15 L12,15 L13,15 L13,14 L13,12 L16,12 L16,7 L15,6 L13,6 L13,4.161 Z M1,7 L2,7 L2,8 L1,8 L1,7 Z M12,14 L4,14 L4,12 L4,11 L4,9 L12,9 L12,11 L12,12 L12,14 Z M4,2 L9,2 L9,5 L12,5 L12,6 L4,6 L4,2 Z M13.906,9.25 L14.844,9.25 L14.844,10.75 L13.906,10.75 L13.906,9.25 Z'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-export-feedback:index').template = new templates.Template([new templates.Comment('profile-export-feedback:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('profile-export-feedback settings-menu-feedback-confirm '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.Element('h3', void 0, [new templates.Text('Send all feedback')], void 0, false), new templates.Element('a', {'class': new templates.Attribute('show-hide link dark'), 'href': new templates.Attribute('#')}, [new templates.ConditionalBlock([new expressions.PathExpression(['expand'], new expressions.ExpressionMeta('if expand', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Hide')],
    [new templates.Text('Show')]
  ]), new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.Text(' ('), new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.PathExpression(['selectedFeedbackCards', 'length']), new expressions.LiteralExpression(0)], void 0, new expressions.ExpressionMeta('selectedFeedbackCards.length || 0'))), new templates.Text(')')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['toggleExpand'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ConditionalBlock([new expressions.PathExpression(['expand'], new expressions.ExpressionMeta('if expand', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('export-feedback-header')}, [new templates.Element('table', {'class': new templates.Attribute('candidate-table export-feedback-table')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['selectedFeedbackCards'], new expressions.ExpressionMeta('each selectedFeedbackCards as #profileCard', 'each', void 0, '#profileCard')), [new templates.Element('tr', void 0, [new templates.Element('td', {'class': new templates.Attribute('list-name')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#profileCard', ['userId']), ['name'], new expressions.ExpressionMeta('#root.users_base[#profileCard.userId].name')))], void 0, false), new templates.Element('td', {'class': new templates.Attribute('list-stage')}, [new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['interviews']), new expressions.AliasPathExpression('#profileCard', ['interviewId']), void 0, new expressions.ExpressionMeta('with #root.interviews[#profileCard.interviewId] as #interview', 'with', void 0, '#interview')), [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['stages']), new expressions.AliasPathExpression('#interview', ['stageId']), ['text'], new expressions.ExpressionMeta('#root.stages[#interview.stageId].text')))])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('feedback-score')}, [new templates.EachBlock(new expressions.AliasPathExpression('#profileCard', ['fields'], new expressions.ExpressionMeta('each #profileCard.fields as #field', 'each', void 0, '#field')), [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#field', ['type']), new expressions.LiteralExpression('score')], void 0, new expressions.ExpressionMeta('if #field.type === \'score\'', 'if'))], [
      [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':summary')]), {'optional': true})]
    ])])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('list-checkbox has-tip'), 'title': new templates.Attribute('Remove feedback from export')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['excludeFeedback'], [new expressions.AliasPathExpression('#profileCard', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false)], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('export-feedback-form')}, [new templates.Element('textarea', {'class': new templates.Attribute('dark-input'), 'placeholder': new templates.Attribute('Optional message...')}, [new templates.DynamicText(new expressions.PathExpression(['feedbackMessage'], new expressions.ExpressionMeta('feedbackMessage')))], void 0, false), new templates.ViewInstance('l-multi-suggest', {'matchOnClick': true, 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['recipientsList'], new expressions.ExpressionMeta('recipientsList'))), new expressions.PathExpression(['recipientsList'], new expressions.ExpressionMeta('recipientsList'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), 'placeholder': 'Send to...', 'class': 'bulk-recipient dark-suggest', 'label': new templates.Template([new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#item', ['user', 'name']), new expressions.AliasPathExpression('#item', ['text'])], void 0, new expressions.ExpressionMeta('#item.user.name || #item.text')))]), 'prepend': new templates.Template([new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user'))), new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user')))})])}, [new templates.ComponentOn('init', new expressions.FnExpression(['initMultiUser'], []))])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('export-feedback-print link dark has-icon'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.print'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.PathExpression(['profile', 'id'])]), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('excludedFeedback'), new expressions.PathExpression(['excludedCards'])])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.print\', {profileId: profile.id}, {excludedFeedback: excludedCards})'))), 'target': new templates.Attribute('_blank')}, [new templates.ViewInstance('profile-export-feedback:icon-print', {}), new templates.Text('Print')], void 0, false), new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['exportFeedbackMenu', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Send')], [new templates.ElementOn('click', new expressions.FnExpression(['sendFeedback'], []))], false)], void 0, false)], void 0, false, true)]);
  views.register('profile-export-feedback:notif-send').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Sharing feedback on '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'profile', 'names', 0], new expressions.ExpressionMeta('#notif.context.profile.names[0]'))), new templates.Text(' with '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'count'], new expressions.ExpressionMeta('#notif.context.count'))), new templates.Text(' people. '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'recipients'], new expressions.ExpressionMeta('if #notif.context.recipients', 'if'))], [
    [new templates.Text('Emails sent to: '), new templates.EachBlock(new expressions.AliasPathExpression('#notif', ['context', 'recipients'], new expressions.ExpressionMeta('each #notif.context.recipients as #recipient', 'each', void 0, '#recipient')), [new templates.Element('span', {'class': new templates.Attribute('comma-separated')}, [new templates.DynamicText(new expressions.AliasPathExpression('#recipient', [], new expressions.ExpressionMeta('#recipient')))], void 0, false)])]
  ])], void 0, false)]);
  views.register('profile-files:icon-close:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-close')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#979797'), 'd': new templates.Attribute('M4.1 5L4.9 4.2 8 7.4l3.2-3.1 0.8 0.8 -3.1 3.2 3.2 3.1 -0.8 0.8L8 8.9l-3.1 3.2 -0.8-0.8 3.2-3.1L4.1 5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-files:icon-paperclip:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-paperclip')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'fill': new templates.Attribute('#3F484B'), 'd': new templates.Attribute('M3.036,14.696c-0.614,0-1.219-0.284-1.788-0.853l-0.083-0.082c-0.586-0.578-2.305-2.956,0.008-5.391 c1.165-1.226,2.771-2.813,4.471-4.493C6.558,2.976,7.509,2.036,8.455,1.09c1.708-1.707,2.958-1.317,4.894,0.528 c2.288,2.178,2.707,4.322,1.718,5.463c-1.314,1.515-6.285,6.488-6.496,6.699c-0.278,0.279-0.729,0.279-1.008,0 c-0.278-0.278-0.278-0.729,0-1.008c0.051-0.051,5.146-5.148,6.427-6.625c0.294-0.339,0.339-1.629-1.624-3.498 c-1.13-1.076-1.465-1.989-2.902-0.551c-0.948,0.948-1.901,1.89-2.817,2.793C4.954,6.564,3.355,8.144,2.207,9.353 c-1.349,1.421-0.656,2.788-0.041,3.395l0.089,0.088c0.524,0.523,0.952,0.665,1.718-0.102c0.213-0.213,0.656-0.644,1.213-1.185 C6.729,10.05,9.6,7.26,10.18,6.534c0.184-0.23,0.452-0.787,0.196-1.011c-0.353-0.31-1.002,0.315-1.192,0.514 c-2.012,2.112-4.64,4.643-4.666,4.667c-0.283,0.273-0.734,0.265-1.007-0.02c-0.273-0.284-0.265-0.734,0.019-1.007 c0.026-0.025,2.633-2.535,4.622-4.624c1.291-1.356,2.48-1.201,3.162-0.604c0.832,0.727,0.636,2.154-0.021,2.974 c-0.586,0.734-2.847,2.945-5.113,5.146c-0.55,0.536-0.988,0.96-1.199,1.171C4.346,14.378,3.686,14.696,3.036,14.696L3.036,14.696z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-files:icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-files:icon-error:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-error')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'viewbox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M15.0875976,13.1513746 L12.9835976,9.17237457 C12.4625976,8.20337457 11.6085976,6.61937457 11.0875976,5.65137457 L8.98459759,1.74437457 C8.46359759,0.775374566 7.60959759,0.775374566 7.08859759,1.74437457 L4.98559759,5.66737457 C4.46359759,6.63637457 3.61059759,8.23937457 3.08859759,9.20737457 L0.984597585,13.1503746 C0.463597585,14.1193746 0.936597585,14.9823746 2.03659759,14.9823746 L6.03659759,14.9823746 L10.0365976,14.9823746 L14.0365976,14.9823746 C15.1355976,14.9833746 15.6095976,14.1203746 15.0875976,13.1513746 L15.0875976,13.1513746 Z M9.03659759,12.9833746 L7.03659759,12.9833746 L7.03659759,10.9833746 L9.03659759,10.9833746 L9.03659759,12.9833746 L9.03659759,12.9833746 Z M9.03659759,9.98337457 L7.03659759,9.98337457 L7.03659759,5.98337457 L9.03659759,5.98337457 L9.03659759,9.98337457 L9.03659759,9.98337457 Z M9.03659759,9.98337457'), 'fill': new templates.Attribute('#010101')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-files:index').template = new templates.Template([new templates.Comment('profile-files:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('files')}, [new templates.Element('ul', void 0, [new templates.Element('li', {'class': new templates.Attribute('contact-list-item indented-icon-column content-sub-section')}, [new templates.ViewInstance('profile-files:icon-paperclip', {'class': 'icon-column'}), new templates.Element('div', {'class': new templates.Attribute('left-block')}, [new templates.ViewInstance('profile-files:list', {}), new templates.ViewInstance('profile-files:pending', {})], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('upload-container'), new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'files'], new expressions.ExpressionMeta('unless profile.files', 'unless'))], [
    [new templates.Text(' no-files')]
  ])]))}, [new templates.ViewInstance('profile-files:upload', {})], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-files:list').template = new templates.Template([new templates.EachBlock(new expressions.PathExpression(['profile', 'files'], new expressions.ExpressionMeta('each profile.files as #file', 'each', void 0, '#file')), [new templates.Element('div', {'class': new templates.Attribute('content-unit content-file-upload')}, [new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.AliasPathExpression('#file', ['id']), new expressions.LiteralExpression('fileName'), new expressions.AliasPathExpression('#file', ['name'])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', {accountId: #root._session.accountId, userId: #root._session.userId, fileId: #file.id, fileName: #file.name})'))), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.AliasPathExpression('#file', ['name'], new expressions.ExpressionMeta('#file.name')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('content-remove has-tip'), 'title': new templates.Attribute('Delete'), 'tabindex': new templates.Attribute('-1'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['removeFile'], [new expressions.AliasPathExpression('#file', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])]);
  views.register('profile-files:upload').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('link has-icon')}, [new templates.ViewInstance('l-upload', {'class': 'fileupload', 'url': new templates.ParentWrapper(new templates.DynamicText(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.uploadProfile'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('profileId'), new expressions.PathExpression(['profile', 'id'])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.uploadProfile\', {accountId: #root._session.accountId, userId: #root._session.userId, profileId: profile.id})'))), new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.uploadProfile'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('profileId'), new expressions.PathExpression(['profile', 'id'])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.uploadProfile\', {accountId: #root._session.accountId, userId: #root._session.userId, profileId: profile.id})'))), 'files': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pendingFiles'], new expressions.ExpressionMeta('pendingFiles'))), new expressions.PathExpression(['pendingFiles'], new expressions.ExpressionMeta('pendingFiles'))), 'responses': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pendingImports'], new expressions.ExpressionMeta('pendingImports'))), new expressions.PathExpression(['pendingImports'], new expressions.ExpressionMeta('pendingImports'))), 'multiple': true}), new templates.Element('span', {'class': new templates.Attribute('pseudo-placeholder'), 'style': new templates.Attribute('pointer-events:none')}, [new templates.ViewInstance('profile-files:icon-plus', {}), new templates.Text('Upload a resume or file')], void 0, false)], void 0, false)]);
  views.register('profile-files:pending').template = new templates.Template([new templates.EachBlock(new expressions.PathExpression(['pendingFiles'], new expressions.ExpressionMeta('each pendingFiles as #file', 'each', void 0, '#file')), [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('content-unit content-file-upload pending-file '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#file', ['status']), new expressions.LiteralExpression(-1)], void 0, new expressions.ExpressionMeta('if #file.status === -1', 'if'))], [
    [new templates.Text('upload-error')]
  ])])), 'style': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.FnExpression(['isPending'], [new expressions.AliasPathExpression('#file', []), new expressions.PathExpression(['profile', 'files'])])], void 0, new expressions.ExpressionMeta('if !isPending(#file, profile.files)', 'if'))], [
    [new templates.Text('display:none')]
  ]))}, [new templates.Element('span', {'class': new templates.Attribute('content-link')}, [new templates.DynamicText(new expressions.AliasPathExpression('#file', ['name'], new expressions.ExpressionMeta('#file.name'))), new templates.DynamicText(new expressions.AliasPathExpression('#file', ['ext'], new expressions.ExpressionMeta('#file.ext')))], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#file', ['status']), new expressions.LiteralExpression(-1)], void 0, new expressions.ExpressionMeta('if #file.status === -1', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('content-progress has-tip'), 'title': new templates.Attribute('Error uploading file')}, [new templates.ViewInstance('profile-files:icon-error', {})], void 0, false)],
    [new templates.Element('div', {'class': new templates.Attribute('content-progress has-tip'), 'title': new templates.Attribute('Uploading file')}, [new templates.ViewInstance('l-progress', {'value': 60, 'width': 20, 'height': 20, 'loop': true, 'direction': 'down', 'max': 100})], void 0, false)]
  ])], void 0, false)])]);
  views.register('profile-note:icon-edit:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-edit')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14.5,16 L1.5,16 C1.225,16 1,15.775 1,15.5 L1,14.5 C1,14.225 1.225,14 1.5,14 L14.5,14 C14.775,14 15,14.225 15,14.5 L15,15.5 C15,15.775 14.775,16 14.5,16 Z M6.62946319,12.4853463 C6.80246319,12.2703463 6.78646319,11.9323463 6.59646319,11.7343463 L5.06946319,10.1423463 C4.87846319,9.9443463 4.57846319,9.9543463 4.40046319,10.1633463 L4.30446319,10.2773463 C4.12746319,10.4873463 3.82746319,10.8233463 3.63946319,11.0233463 L2.10546319,12.6533463 C1.91746319,12.8533463 1.98746319,13.0173463 2.26246319,13.0173463 L5.70346319,13.0173463 C5.97746319,13.0193463 6.34446319,12.8433463 6.51546319,12.6283463 L6.62946319,12.4853463 Z M13.434,1.33835995 L13.294,1.45335995 C13.29,1.45635995 6,8.74635995 6,8.74635995 L8.221,10.96636 L15.512,3.67635995 L15.642,3.54635995 C16.115,2.91735995 16.08,2.02335995 15.512,1.45635995 C14.944,0.888359952 14.051,0.852359952 13.434,1.33835995 Z M13.434,1.33835995'), 'fill': new templates.Attribute('#D9D9D9')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-note:index').template = new templates.Template([new templates.Comment('profile-note:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('profile-note'), 'title': new templates.Attribute('Add note')}, [new templates.Element('div', {'class': new templates.Attribute('profile-note-preview')}, [new templates.ViewInstance('profile-note:icon-edit', {}), new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.PathExpression(['value']), new expressions.LiteralExpression('Add note')], void 0, new expressions.ExpressionMeta('value || \'Add note\'')))], void 0, false)], [new templates.MarkupAs(['placeholder']), new templates.ElementOn('click', new expressions.FnExpression(['notePopup', 'toggle'], [new expressions.PathExpression(['$element'])]))], false), new templates.ViewInstance('l-popup', {'class': 'profile-note-popup', 'focus': 'textarea', 'position': 'replace', 'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('l-note-textarea', {'class': 'profile-note-textarea active', 'users': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value'))), new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value'))), 'placeholder': 'Add note - @mention to email a coworker'}, [new templates.MarkupAs(['noteTextarea']), new templates.ComponentOn('submit', new expressions.FnExpression(['submit'], []))]), new templates.ViewInstance('l-score-thumbs', {'score': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['score'], new expressions.ExpressionMeta('score'))), new expressions.PathExpression(['score'], new expressions.ExpressionMeta('score')))}), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['reset'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit add-note-submit')}, [new templates.Text('Add note'), new templates.Element('small', void 0, [new templates.Text('(⌘+Enter)')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['submit'], []))], false)], void 0, false)]))}, [new templates.MarkupAs(['notePopup'])])]);
  views.register('profile-note:notif-note-added').template = new templates.Template([new templates.Text('Added note '), new templates.Element('span', {'class': new templates.Attribute('note-snippet')}, [new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'note'], new expressions.ExpressionMeta('#notif.context.note')))], void 0, false), new templates.Text(' '), new templates.Element('a', {'class': new templates.Attribute('link dark notification-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.candidates.show'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.AliasPathExpression('#notif', ['context', 'profileId']), new expressions.LiteralExpression('historyPage'), new expressions.LiteralExpression('notes')])], void 0, new expressions.ExpressionMeta('url(\'hire.candidates.show\', {profileId: #notif.context.profileId, historyPage: \'notes\'})')))}, [new templates.Text('View note')], void 0, false)]);
  views.register('profile-schedule:icon-caret-up:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-up')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#979797'), 'd': new templates.Attribute('M8.3 4L8 3.7 7.6 4l-6.5 6.9 0.7 0.7 6.5-6.9h-0.7l6.5 7 0.7-0.7L8.3 4 8.3 4z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-schedule:icon-caret-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-down')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.6741598,11.3413318 L8.03952616,11.7324251 L8.40489252,11.3413318 L14.8653664,4.42595055 L14.1346336,3.74328687 L7.6741598,10.6586682 L8.40489252,10.6586682 L1.86536636,3.65866816 L1.13463364,4.34133184 L7.6741598,11.3413318 Z M7.6741598,11.3413318'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-schedule:icon-progress:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-history-progress')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M2.89042847,4.52415899 C4.23573121,2.63796976 6.72643398,4.78178845e-07 10.1344804,0 C15.4388974,-8.2309569e-07 15.2936452,3.11180268 22.1251496,3.11180215 C28.9566541,3.1118017 29.4782579,1.61506862 29.4782579,1.61506862 L40,17.2323741 C40,17.2323741 37.1301,19.857009 33.9880855,19.857009 C30.8460711,19.857009 24.8437331,16.9137768 21.4767708,16.9137768 C18.6204707,16.9137768 15.7302266,18.5187629 13.7574077,20.5503649 L24.7197658,37.0977823 C25.297401,37.9697089 25.0419832,39.1339095 24.1492743,39.6980973 C23.2565653,40.262285 22.0646159,40.0128134 21.4869807,39.1408869 L0.309098615,7.17338001 C-0.268536584,6.30145348 -0.0131188478,5.13725283 0.879590095,4.57306508 C1.50780285,4.17603765 2.28420396,4.18194645 2.89042847,4.52415899 Z M2.89042847,4.52415899')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-schedule:index').template = new templates.Template([new templates.Comment('profile-schedule:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('schedule '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class')))]))}, [new templates.ViewInstance('profile-schedule:schedule-screen-choose', {}), new templates.ViewInstance('profile-schedule:schedule-screen-details', {}), new templates.ViewInstance('profile-schedule:schedule-screen-preview', {})], void 0, false)]);
  views.register('profile-schedule:sheet-title').template = new templates.Template([new templates.ViewInstance('icon-calendar', {}), new templates.Element('h3', void 0, [new templates.Text('Schedule')], void 0, false), new templates.Element('p', void 0, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profiles']), new expressions.AliasPathExpression('#draft', ['data', 'profileId']), ['names', 0], new expressions.ExpressionMeta('#root.profiles[#draft.data.profileId].names[0]')))], void 0, false)]);
  views.register('profile-schedule:schedule-screen-choose').template = new templates.Template([new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('schedule-screen schedule-screen-choose '), new templates.DynamicText(new expressions.FnExpression(['screenClass'], [new expressions.LiteralExpression('choose'), new expressions.AliasPathExpression('#draft', ['data', 'screen'])], void 0, new expressions.ExpressionMeta('screenClass(\'choose\', #draft.data.screen)')))]))}, [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('schedule-assign '), new templates.ConditionalBlock([new expressions.PathExpression(['showIframe'], new expressions.ExpressionMeta('if showIframe', 'if'))], [
    [new templates.Text('show-iframe')]
  ])]))}, [new templates.ViewInstance('l-multi-suggest', {'matchOnClick': true, 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'recipientsList'], new expressions.ExpressionMeta('#draft.data.recipientsList'))), new expressions.AliasPathExpression('#draft', ['data', 'recipientsList'], new expressions.ExpressionMeta('#draft.data.recipientsList'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), 'placeholder': 'Add interviewer', 'class': 'show-delete', 'label': new templates.Template([new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#item', ['user', 'name']), new expressions.AliasPathExpression('#item', ['text'])], void 0, new expressions.ExpressionMeta('#item.user.name || #item.text')))]), 'prepend': new templates.Template([new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user'))), new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user')))})])}, [new templates.ComponentOn('init', new expressions.FnExpression(['initMultiUser'], []))])], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['showIframe'], new expressions.ExpressionMeta('if showIframe', 'if'))], [
    [new templates.ViewInstance('profile-schedule:schedule-iframe', {})]
  ]), new templates.ViewInstance('profile-schedule:schedule-date', {}), new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots'], new expressions.ExpressionMeta('if #draft.data.interviewSlots', 'if'))], [
    [new templates.ViewInstance('profile-schedule:schedule-slots', {})]
  ]), new templates.Element('div', {'class': new templates.Attribute('link-bar right schedule-actions')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteDraft'], [new expressions.AliasPathExpression('#draft', ['id'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots'], new expressions.ExpressionMeta('if #draft.data.interviewSlots', 'if'))], [
    [new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Schedule'), new templates.Element('small', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#draft', ['data', 'date']), new expressions.PathExpression(['timezone']), new expressions.LiteralExpression('compactDateWithDay')], void 0, new expressions.ExpressionMeta('formatTime(#draft.data.date, timezone, \'compactDateWithDay\')')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['nextScreen'], []))], false)]
  ])], void 0, false)], void 0, false)]);
  views.register('profile-schedule:schedule-iframe').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('schedule-iframe')}, [new templates.Element('iframe', {'x-as': new templates.Attribute('iframe'), 'src': new templates.DynamicAttribute(new expressions.PathExpression(['iframeUrl'], new expressions.ExpressionMeta('iframeUrl'))), 'width': new templates.Attribute('100%'), 'height': new templates.Attribute('600'), 'frameborder': new templates.Attribute('0'), 'scrolling': new templates.Attribute('no')}, [], void 0, false)], void 0, false)]);
  views.register('profile-schedule:schedule-date').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('schedule-date')}, [new templates.ViewInstance('select-date-timezone', {'date': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'date'], new expressions.ExpressionMeta('#draft.data.date'))), new expressions.AliasPathExpression('#draft', ['data', 'date'], new expressions.ExpressionMeta('#draft.data.date'))), 'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'timezone'], new expressions.ExpressionMeta('#draft.data.timezone'))), new expressions.AliasPathExpression('#draft', ['data', 'timezone'], new expressions.ExpressionMeta('#draft.data.timezone'))), 'recipients': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['recipients'], new expressions.ExpressionMeta('recipients'))), new expressions.PathExpression(['recipients'], new expressions.ExpressionMeta('recipients')))}, [new templates.ComponentOn('changeTimezone', new expressions.FnExpression(['changeTimezone'], [])), new templates.ComponentOn('changeDate', new expressions.FnExpression(['changeDate'], []))]), new templates.Element('div', {'class': new templates.Attribute('schedule-calendar-buttons')}, [new templates.Element('div', {'class': new templates.Attribute('button-group')}, [new templates.Element('button', {'class': new templates.Attribute('sub-week dark-button icon-only has-tip'), 'title': new templates.Attribute('Back one week')}, [new templates.ViewInstance('icon-double-caret-left', {})], [new templates.ElementOn('click', new expressions.FnExpression(['subWeek'], []))], false), new templates.Element('button', {'class': new templates.Attribute('sub-day dark-button icon-only has-tip'), 'title': new templates.Attribute('Back one day')}, [new templates.ViewInstance('icon-single-caret-left', {})], [new templates.ElementOn('click', new expressions.FnExpression(['subDay'], []))], false), new templates.Element('button', {'class': new templates.Attribute('add-day dark-button icon-only has-tip'), 'title': new templates.Attribute('Forward one day')}, [new templates.ViewInstance('icon-single-caret-right', {})], [new templates.ElementOn('click', new expressions.FnExpression(['addDay'], []))], false), new templates.Element('button', {'class': new templates.Attribute('add-week dark-button icon-only has-tip'), 'title': new templates.Attribute('Forward one week')}, [new templates.ViewInstance('icon-double-caret-right', {})], [new templates.ElementOn('click', new expressions.FnExpression(['addWeek'], []))], false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('schedule-view-calendar')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'recipientsList'], new expressions.ExpressionMeta('if #draft.data.recipientsList', 'if'))], [
    [new templates.Element('button', {'class': new templates.Attribute('dark-button')}, [new templates.ConditionalBlock([new expressions.PathExpression(['showIframe'], new expressions.ExpressionMeta('if showIframe', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Text('Hide Calendars')],
      [new templates.Text('View availability')]
    ])], [new templates.ElementOn('click', new expressions.FnExpression(['toggleIframe'], []))], false)]
  ])], void 0, false)], void 0, false)]);
  views.register('profile-schedule:schedule-slots').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('schedule-slots-wrap')}, [new templates.Element('table', {'class': new templates.Attribute('schedule-slots')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots'], new expressions.ExpressionMeta('each #draft.data.interviewSlots as #slot, #slotIndex', 'each', void 0, '#slot', '#slotIndex')), [new templates.ViewInstance('profile-schedule:schedule-slot', {})])], void 0, false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('schedule-slots-footer')}, [new templates.Element('a', {'tabindex': new templates.Attribute('5'), 'class': new templates.Attribute('schedule-slots-add link dark has-icon'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('Add another')], [new templates.ElementOn('click', new expressions.FnExpression(['addSlot'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('div', {'class': new templates.Attribute('schedule-select-calendar')}, [new templates.ConditionalBlock([new expressions.PathExpression(['calendarList'], new expressions.ExpressionMeta('if calendarList', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Add to calendar'), new templates.ViewInstance('l-dropdown', {'name': 'l-dropdown', 'tabindex': '5', 'class': 'darker', 'prompt': 'Choose calendar', 'buttonClass': 'dark btn-no-style', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['calendarList'], new expressions.ExpressionMeta('calendarList'))), new expressions.PathExpression(['calendarList'], new expressions.ExpressionMeta('calendarList'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'calendarId'], new expressions.ExpressionMeta('#draft.data.calendarId'))), new expressions.AliasPathExpression('#draft', ['data', 'calendarId'], new expressions.ExpressionMeta('#draft.data.calendarId')))})],
    []
  ])], void 0, false)], void 0, false)]);
  views.register('profile-schedule:schedule-slot').template = new templates.Template([new templates.Element('tr', {'class': new templates.Attribute('schedule-slot')}, [new templates.Element('td', {'class': new templates.Attribute('schedule-slot-assign')}, [new templates.ViewInstance('l-multi-suggest', {'tabindex': '1', 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['emails'], new expressions.ExpressionMeta('#slot.emails'))), new expressions.AliasPathExpression('#slot', ['emails'], new expressions.ExpressionMeta('#slot.emails'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), new expressions.PathExpression(['userOptions'], new expressions.ExpressionMeta('userOptions'))), 'placeholder': 'Add interviewer', 'class': 'dark-suggest show-delete', 'label': new templates.Template([new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#item', ['user', 'name']), new expressions.AliasPathExpression('#item', ['text'])], void 0, new expressions.ExpressionMeta('#item.user.name || #item.text')))]), 'prepend': new templates.Template([new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user'))), new expressions.AliasPathExpression('#result', ['option', 'user'], new expressions.ExpressionMeta('#result.option.user')))})])}, [new templates.ComponentOn('init', new expressions.FnExpression(['initMultiUser'], []))])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('schedule-slot-time')}, [new templates.Element('div', {'class': new templates.Attribute('schedule-slot-input-wrap')}, [new templates.ViewInstance('l-time-input', {'tabindex': '2', 'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['timezone'], new expressions.ExpressionMeta('timezone'))), new expressions.PathExpression(['timezone'], new expressions.ExpressionMeta('timezone'))), 'date': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['date'], new expressions.ExpressionMeta('#slot.date'))), new expressions.AliasPathExpression('#slot', ['date'], new expressions.ExpressionMeta('#slot.date')))})], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('schedule-slot-duration')}, [new templates.Element('div', {'class': new templates.Attribute('schedule-slot-input-wrap')}, [new templates.ViewInstance('l-duration-input', {'tabindex': '3', 'minutes': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['duration'], new expressions.ExpressionMeta('#slot.duration'))), new expressions.AliasPathExpression('#slot', ['duration'], new expressions.ExpressionMeta('#slot.duration')))})], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('schedule-slot-location')}, [new templates.Element('div', {'class': new templates.Attribute('schedule-slot-input-wrap')}, [new templates.ViewInstance('calendar-resource-input', {'tabindex': '4', 'calendarResources': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['calendarResources'], new expressions.ExpressionMeta('calendarResources'))), new expressions.PathExpression(['calendarResources'], new expressions.ExpressionMeta('calendarResources'))), 'freeBusy': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['activeFreeBusy'], new expressions.ExpressionMeta('activeFreeBusy'))), new expressions.PathExpression(['activeFreeBusy'], new expressions.ExpressionMeta('activeFreeBusy'))), 'date': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['date'], new expressions.ExpressionMeta('#slot.date'))), new expressions.AliasPathExpression('#slot', ['date'], new expressions.ExpressionMeta('#slot.date'))), 'duration': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['duration'], new expressions.ExpressionMeta('#slot.duration'))), new expressions.AliasPathExpression('#slot', ['duration'], new expressions.ExpressionMeta('#slot.duration'))), 'end': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['slotsEnd'], new expressions.ExpressionMeta('slotsEnd'))), new expressions.PathExpression(['slotsEnd'], new expressions.ExpressionMeta('slotsEnd'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['location'], new expressions.ExpressionMeta('#slot.location'))), new expressions.AliasPathExpression('#slot', ['location'], new expressions.ExpressionMeta('#slot.location'))), 'placeholder': 'Location'}, [new templates.ComponentOn('select', new expressions.FnExpression(['selectLocation'], [new expressions.AliasPathExpression('#slotIndex', [])]))])], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('schedule-slot-remove')}, [new templates.Element('a', {'title': new templates.Attribute('Remove interview'), 'tabindex': new templates.Attribute('-1'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['removeSlot'], [new expressions.AliasPathExpression('#slotIndex', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]);
  views.register('profile-schedule:schedule-screen-details').template = new templates.Template([new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('schedule-screen schedule-screen-details '), new templates.DynamicText(new expressions.FnExpression(['screenClass'], [new expressions.LiteralExpression('details'), new expressions.AliasPathExpression('#draft', ['data', 'screen'])], void 0, new expressions.ExpressionMeta('screenClass(\'details\', #draft.data.screen)')))]))}, [new templates.Element('p', {'class': new templates.Attribute('schedule-step')}, [new templates.Text('Add details and request feedback')], void 0, false), new templates.Element('p', {'class': new templates.Attribute('show-hide-count label')}, [new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots', 'length'], new expressions.ExpressionMeta('#draft.data.interviewSlots.length'))), new templates.Text(' events'), new templates.Element('a', {'class': new templates.Attribute('show-hide link dark label'), 'href': new templates.Attribute('#')}, [new templates.ConditionalBlock([new expressions.PathExpression(['expand'], new expressions.ExpressionMeta('if expand', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Hide')],
    [new templates.Text('Show')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['toggleExpand'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.ViewInstance('profile-schedule:schedule-details-slots', {}), new templates.ViewInstance('profile-schedule:schedule-details', {})], void 0, false)]);
  views.register('profile-schedule:schedule-details-slots').template = new templates.Template([new templates.ConditionalBlock([new expressions.PathExpression(['expand'], new expressions.ExpressionMeta('if expand', 'if'))], [
    [new templates.Element('table', {'class': new templates.Attribute('schedule-preview-slots')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots'], new expressions.ExpressionMeta('each #draft.data.interviewSlots as #slot', 'each', void 0, '#slot')), [new templates.Element('tr', {'class': new templates.Attribute('schedule-preview-slot')}, [new templates.Element('td', {'class': new templates.Attribute('schedule-preview-interviewers')}, [new templates.EachBlock(new expressions.AliasPathExpression('#slot', ['emails'], new expressions.ExpressionMeta('each #slot.emails', 'each')), [new templates.Element('span', {'class': new templates.Attribute('comma-separated')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['usersByEmail']), new expressions.RelativePathExpression([]), ['name'], new expressions.ExpressionMeta('usersByEmail[this].name')))], void 0, false)])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('schedule-preview-time')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#slot', ['date']), new expressions.PathExpression(['timezone']), new expressions.LiteralExpression('timeDayDate')], void 0, new expressions.ExpressionMeta('formatTime(#slot.date, timezone, \'timeDayDate\')')))], void 0, false), new templates.Element('td', {'class': new templates.Attribute('schedule-preview-location')}, [new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['location'], new expressions.ExpressionMeta('#slot.location')))], void 0, false)], void 0, false)])], void 0, false)], void 0, false)]
  ])]);
  views.register('profile-schedule:schedule-details').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('schedule-details')}, [new templates.Element('input', {'class': new templates.Attribute('schedule-details-subject dark-input'), 'types': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#draft', ['data', 'details', 'subject'], new expressions.ExpressionMeta('#draft.data.details.subject'))), 'placeholder': new templates.Attribute('Subject')}, null, void 0, false), new templates.Element('textarea', {'class': new templates.Attribute('schedule-details-message dark-input'), 'placeholder': new templates.Attribute('Optional note')}, [new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'details', 'note'], new expressions.ExpressionMeta('#draft.data.details.note')))], void 0, false)], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('scheduling-options')}, [new templates.ConditionalBlock([new expressions.PathExpression(['resumeOptions'], new expressions.ExpressionMeta('if resumeOptions', 'if'))], [
    [new templates.Element('li', {'class': new templates.Attribute('scheduling-option')}, [new templates.Element('div', void 0, [new templates.ViewInstance('l-dropdown', {'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['resumeOptions'], new expressions.ExpressionMeta('resumeOptions'))), new expressions.PathExpression(['resumeOptions'], new expressions.ExpressionMeta('resumeOptions'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'details', 'resume'], new expressions.ExpressionMeta('#draft.data.details.resume'))), new expressions.AliasPathExpression('#draft', ['data', 'details', 'resume'], new expressions.ExpressionMeta('#draft.data.details.resume')))})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('scheduling-option-title')}, [new templates.Text('Resume')], void 0, false)], void 0, false)]
  ]), new templates.Element('li', {'class': new templates.Attribute('scheduling-option ')}, [new templates.Element('div', {'class': new templates.Attribute('scheduling-option-title')}, [new templates.Text('Feedback form')], void 0, false), new templates.Element('div', void 0, [new templates.ViewInstance('l-dropdown', {'buttonClass': 'dark-button', 'class': 'tall-option caps-option', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['cardTemplates'], new expressions.ExpressionMeta('cardTemplates'))), new expressions.PathExpression(['cardTemplates'], new expressions.ExpressionMeta('cardTemplates'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'details', 'cardTemplateId'], new expressions.ExpressionMeta('#draft.data.details.cardTemplateId'))), new expressions.AliasPathExpression('#draft', ['data', 'details', 'cardTemplateId'], new expressions.ExpressionMeta('#draft.data.details.cardTemplateId'))), 'prompt': 'No feedback'})], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('scheduling-option')}, [new templates.Element('div', {'class': new templates.Attribute('scheduling-option-title')}, [new templates.Text('Interviewer reminders'), new templates.Element('span', {'class': new templates.Attribute('what-is-this dark has-tip'), 'title': new templates.Attribute('Sends emails to each interviewer, reminding them to complete the feedback form about the candidate.')}, [new templates.Text('[?]')], void 0, false)], void 0, false), new templates.Element('div', void 0, [new templates.ViewInstance('l-dropdown', {'buttonClass': 'dark-button', 'class': 'tall-option caps-option', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['feedbackOptions'], new expressions.ExpressionMeta('feedbackOptions'))), new expressions.PathExpression(['feedbackOptions'], new expressions.ExpressionMeta('feedbackOptions'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'details', 'feedback'], new expressions.ExpressionMeta('#draft.data.details.feedback'))), new expressions.AliasPathExpression('#draft', ['data', 'details', 'feedback'], new expressions.ExpressionMeta('#draft.data.details.feedback')))})], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('scheduling-option')}, [new templates.Element('div', {'class': new templates.Attribute('scheduling-option-title')}, [new templates.Text('Notify candidate?')], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'emails', 0, 'value'], new expressions.ExpressionMeta('if profile.emails[0].value', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('candidate-message-tabs')}, [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('candidate-message-option '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['notifyOpen']), new expressions.LiteralExpression('email')], void 0, new expressions.ExpressionMeta('if notifyOpen === \'email\'', 'if'))], [
      [new templates.Text('selected')]
    ])]))}, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('dark'), 'checked': new templates.DynamicAttribute(new expressions.AliasPathExpression('#draft', ['data', 'details', 'email', 'checked'], new expressions.ExpressionMeta('#draft.data.details.email.checked')))}, null, void 0, false), new templates.Element('span', void 0, [new templates.Text('Emails')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['notifySelect'], [new expressions.LiteralExpression('email'), new expressions.PathExpression(['$event'])]))], false), new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('candidate-message-option '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['notifyOpen']), new expressions.LiteralExpression('invite')], void 0, new expressions.ExpressionMeta('if notifyOpen === \'invite\'', 'if'))], [
      [new templates.Text('selected')]
    ])]))}, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('dark'), 'checked': new templates.DynamicAttribute(new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'checked'], new expressions.ExpressionMeta('#draft.data.details.invite.checked')))}, null, void 0, false), new templates.Element('span', void 0, [new templates.Text('Calendar invite')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['notifySelect'], [new expressions.LiteralExpression('invite'), new expressions.PathExpression(['$event'])]))], false)], void 0, false)],
    [new templates.Element('div', {'class': new templates.Attribute('candidate-message-tabs')}, [new templates.Element('span', {'class': new templates.Attribute('candidate-message-option')}, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('dark'), 'disabled': new templates.Attribute(true)}, null, void 0, false), new templates.Element('span', void 0, [new templates.Text('Emails')], void 0, false)], void 0, false), new templates.Element('span', {'class': new templates.Attribute('candidate-message-option')}, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('dark'), 'disabled': new templates.Attribute(true)}, null, void 0, false), new templates.Element('span', void 0, [new templates.Text('Calendar invite')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('candidate-message-tabs-disabled has-tip'), 'title': new templates.Attribute('Add an email address to the candidate to enable notifications')}, [], void 0, false)], void 0, false)]
  ])], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['notifyOpen']), new expressions.LiteralExpression('invite')], void 0, new expressions.ExpressionMeta('if notifyOpen === \'invite\'', 'if')), new expressions.OperatorExpression('===', [new expressions.PathExpression(['notifyOpen']), new expressions.LiteralExpression('email')], void 0, new expressions.ExpressionMeta('else if notifyOpen === \'email\'', 'else if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('candidate-message-wrapper')}, [new templates.ViewInstance('profile-schedule:schedule-detail-notify-invite', {})], void 0, false)],
    [new templates.Element('div', {'class': new templates.Attribute('candidate-message-wrapper')}, [new templates.ViewInstance('profile-schedule:schedule-detail-notify-email', {})], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('link-bar right schedule-actions')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Go back')], [new templates.ElementOn('click', new expressions.FnExpression(['prevScreen'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Preview and Send')], [new templates.ElementOn('click', new expressions.FnExpression(['nextScreen'], []))], false)], void 0, false)]);
  views.register('profile-schedule:schedule-detail-notify-invite').template = new templates.Template([new templates.Element('input', {'type': new templates.Attribute('text'), 'class': new templates.Attribute('dark-input'), 'placeholder': new templates.Attribute('Event title'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'title'], new expressions.ExpressionMeta('#draft.data.details.invite.title')))}, null, void 0, false), new templates.Element('input', {'type': new templates.Attribute('text'), 'class': new templates.Attribute('dark-input'), 'placeholder': new templates.Attribute('Location'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'location'], new expressions.ExpressionMeta('#draft.data.details.invite.location')))}, null, void 0, false), new templates.Element('div', {'class': new templates.Attribute('message-option')}, [new templates.Element('span', {'class': new templates.Attribute('option-label')}, [new templates.Text('Time')], void 0, false), new templates.Block(new expressions.FnExpression(['notifyDateText'], [new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots', 0, 'date']), new expressions.PathExpression(['slotsEnd'])], void 0, new expressions.ExpressionMeta('with notifyDateText(#draft.data.interviewSlots[0].date, slotsEnd) as #time', 'with', void 0, '#time')), [new templates.ViewInstance('profile-schedule:formatted-time-range', {})])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('message-option')}, [new templates.ConditionalBlock([new expressions.PathExpression(['calendarList'], new expressions.ExpressionMeta('if calendarList', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('span', {'class': new templates.Attribute('option-label')}, [new templates.Text('Calendar')], void 0, false), new templates.ViewInstance('l-dropdown', {'buttonClass': 'dark btn-no-style', 'class': 'caps-option', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['calendarList'], new expressions.ExpressionMeta('calendarList'))), new expressions.PathExpression(['calendarList'], new expressions.ExpressionMeta('calendarList'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'calendarId'], new expressions.ExpressionMeta('#draft.data.details.invite.calendarId'))), new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'calendarId'], new expressions.ExpressionMeta('#draft.data.details.invite.calendarId'))), 'prompt': 'Choose calendar'})],
    []
  ])], void 0, false), new templates.Element('textarea', {'class': new templates.Attribute('dark-input'), 'placeholder': new templates.Attribute('Event message')}, [new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'description'], new expressions.ExpressionMeta('#draft.data.details.invite.description')))], [new templates.MarkupAs(['notifyInviteBody'])], false)]);
  views.register('profile-schedule:schedule-detail-notify-email').template = new templates.Template([new templates.ViewInstance('email-editor', {'mode': 'interview', 'draft': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'details', 'email'], new expressions.ExpressionMeta('#draft.data.details.email'))), new expressions.AliasPathExpression('#draft', ['data', 'details', 'email'], new expressions.ExpressionMeta('#draft.data.details.email')))})]);
  views.register('profile-schedule:schedule-summary').template = new templates.Template([new templates.Text('SCHEDULE:'), new templates.Element('br', void 0, null, void 0, false), new templates.EachBlock(new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots'], new expressions.ExpressionMeta('each #draft.data.interviewSlots as #slot', 'each', void 0, '#slot')), [new templates.DynamicText(new expressions.FnExpression(['timeRange'], [new expressions.AliasPathExpression('#slot', ['date']), new expressions.AliasPathExpression('#slot', ['duration']), new expressions.PathExpression(['timezone'])], void 0, new expressions.ExpressionMeta('timeRange(#slot.date, #slot.duration, timezone)'))), new templates.Text(' - '), new templates.EachBlock(new expressions.AliasPathExpression('#slot', ['emails'], new expressions.ExpressionMeta('each #slot.emails as #email, #i', 'each', void 0, '#email', '#i')), [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#i', []), new expressions.LiteralExpression(0)], void 0, new expressions.ExpressionMeta('unless #i === 0', 'unless'))], [
    [new templates.Text(', ')]
  ]), new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['usersByEmail']), new expressions.AliasPathExpression('#email', []), ['name'], new expressions.ExpressionMeta('usersByEmail[#email].name')))]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#slot', ['location'], new expressions.ExpressionMeta('if #slot.location', 'if'))], [
    [new templates.Text(' - '), new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['location'], new expressions.ExpressionMeta('#slot.location')))]
  ]), new templates.Element('br', void 0, null, void 0, false)])]);
  views.register('profile-schedule:invite-email-title').template = new templates.Template([new templates.DynamicText(new expressions.FnExpression(['firstWord'], [new expressions.PathExpression(['profile', 'names', 0])], void 0, new expressions.ExpressionMeta('firstWord(profile.names[0])'))), new templates.Text(', you\'re invited to an interview with '), new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'account', 'name'], new expressions.ExpressionMeta('#root._session.account.name'))), new templates.Text('!')]);
  views.register('profile-schedule:invite-calendar-title').template = new templates.Template([new templates.Text('Interview with '), new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'account', 'name'], new expressions.ExpressionMeta('#root._session.account.name')))]);
  views.register('profile-schedule:schedule-screen-preview').template = new templates.Template([new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('schedule-screen schedule-screen-preview '), new templates.DynamicText(new expressions.FnExpression(['screenClass'], [new expressions.LiteralExpression('preview'), new expressions.AliasPathExpression('#draft', ['data', 'screen'])], void 0, new expressions.ExpressionMeta('screenClass(\'preview\', #draft.data.screen)')))]))}, [new templates.Element('p', {'class': new templates.Attribute('schedule-step')}, [new templates.Text('Preview Invites ('), new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots', 'length'], new expressions.ExpressionMeta('#draft.data.interviewSlots.length'))), new templates.Text(')')], void 0, false), new templates.ViewInstance('profile-schedule:schedule-preview-invites', {}), new templates.ConditionalBlock([new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#draft', ['data', 'details', 'email', 'checked']), new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'checked'])], void 0, new expressions.ExpressionMeta('if #draft.data.details.email.checked || #draft.data.details.invite.checked', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('schedule-step')}, [new templates.Text('Notify candidate')], void 0, false), new templates.ViewInstance('profile-schedule:schedule-preview-notify', {})]
  ]), new templates.Element('div', {'class': new templates.Attribute('link-bar right schedule-actions')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Go back')], [new templates.ElementOn('click', new expressions.FnExpression(['prevScreen'], []))], false), new templates.Element('button', {'class': new templates.Attribute('submit'), 'disabled': new templates.DynamicAttribute(new expressions.PathExpression(['submitting'], new expressions.ExpressionMeta('submitting')))}, [new templates.Text('Send all '), new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.Text('('), new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots', 'length'], new expressions.ExpressionMeta('#draft.data.interviewSlots.length'))), new templates.Text(')')], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['submit'], []))], false)], void 0, false)], void 0, false)]);
  views.register('profile-schedule:schedule-preview-invites').template = new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('schedule-preview-items')}, [new templates.EachBlock(new expressions.AliasPathExpression('#draft', ['data', 'interviewSlots'], new expressions.ExpressionMeta('each #draft.data.interviewSlots as #slot, #i', 'each', void 0, '#slot', '#i')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('preview-item '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#slot', ['previewOpen'], new expressions.ExpressionMeta('if #slot.previewOpen', 'if'))], [
    [new templates.Text('expanded')]
  ])]))}, [new templates.ViewInstance('profile-schedule:schedule-preview-item', {})], void 0, false)])], void 0, false)]);
  views.register('profile-schedule:schedule-preview-item').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('interview-preview-row')}, [new templates.Element('div', {'class': new templates.Attribute('column interviewer')}, [new templates.EachBlock(new expressions.AliasPathExpression('#slot', ['emails'], new expressions.ExpressionMeta('each #slot.emails', 'each')), [new templates.Element('span', {'class': new templates.Attribute('comma-separated')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['usersByEmail']), new expressions.RelativePathExpression([]), ['name'], new expressions.ExpressionMeta('usersByEmail[this].name')))], void 0, false)])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('column location')}, [new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['location'], new expressions.ExpressionMeta('#slot.location')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('column dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#slot', ['date']), new expressions.PathExpression(['timezone']), new expressions.LiteralExpression('timeDayDate')], void 0, new expressions.ExpressionMeta('formatTime(#slot.date, timezone, \'timeDayDate\')')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('expand')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#slot', ['previewOpen'], new expressions.ExpressionMeta('if #slot.previewOpen', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('profile-schedule:icon-caret-up', {})],
    [new templates.ViewInstance('profile-schedule:icon-caret-down', {})]
  ])], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['previewToggle'], [new expressions.AliasPathExpression('#i', [])]))], false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#slot', ['previewOpen'], new expressions.ExpressionMeta('if #slot.previewOpen', 'if'))], [
    [new templates.ViewInstance('profile-schedule:schedule-preview-content', {})]
  ])]);
  views.register('profile-schedule:schedule-preview-content').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('interview-preview-content')}, [new templates.Element('div', {'class': new templates.Attribute('interview-preview-inputs')}, [new templates.Element('input', {'class': new templates.Attribute('dark-input'), 'types': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#slot', ['subject'], new expressions.ExpressionMeta('#slot.subject'))), 'placeholder': new templates.Attribute('Event title')}, null, void 0, false), new templates.Element('textarea', {'class': new templates.Attribute('dark-input'), 'placeholder': new templates.Attribute('Event message')}, [new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['note'], new expressions.ExpressionMeta('#slot.note')))], void 0, false)], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('scheduling-options')}, [new templates.ConditionalBlock([new expressions.PathExpression(['resumeOptions'], new expressions.ExpressionMeta('if resumeOptions', 'if'))], [
    [new templates.Element('li', {'class': new templates.Attribute('scheduling-option')}, [new templates.Element('div', {'class': new templates.Attribute('scheduling-option-title')}, [new templates.Text('Resume')], void 0, false), new templates.Element('div', void 0, [new templates.ViewInstance('l-dropdown', {'class': 'tall-option caps-option', 'buttonClass': 'dark-button', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['resumeOptions'], new expressions.ExpressionMeta('resumeOptions'))), new expressions.PathExpression(['resumeOptions'], new expressions.ExpressionMeta('resumeOptions'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['resume'], new expressions.ExpressionMeta('#slot.resume'))), new expressions.AliasPathExpression('#slot', ['resume'], new expressions.ExpressionMeta('#slot.resume')))})], void 0, false)], void 0, false)]
  ]), new templates.Element('li', {'class': new templates.Attribute('scheduling-option')}, [new templates.Element('div', {'class': new templates.Attribute('scheduling-option-title')}, [new templates.Text('Feedback form')], void 0, false), new templates.Element('div', void 0, [new templates.ViewInstance('l-dropdown', {'class': 'tall-option caps-option', 'buttonClass': 'dark-button', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['cardTemplates'], new expressions.ExpressionMeta('cardTemplates'))), new expressions.PathExpression(['cardTemplates'], new expressions.ExpressionMeta('cardTemplates'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['cardTemplateId'], new expressions.ExpressionMeta('#slot.cardTemplateId'))), new expressions.AliasPathExpression('#slot', ['cardTemplateId'], new expressions.ExpressionMeta('#slot.cardTemplateId'))), 'prompt': 'Select form'})], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('scheduling-option')}, [new templates.Element('div', {'class': new templates.Attribute('scheduling-option-title')}, [new templates.Text('Remind')], void 0, false), new templates.Element('div', void 0, [new templates.ViewInstance('l-dropdown', {'buttonClass': 'dark-button', 'class': 'tall-option caps-option', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['feedbackOptions'], new expressions.ExpressionMeta('feedbackOptions'))), new expressions.PathExpression(['feedbackOptions'], new expressions.ExpressionMeta('feedbackOptions'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#slot', ['feedback'], new expressions.ExpressionMeta('#slot.feedback'))), new expressions.AliasPathExpression('#slot', ['feedback'], new expressions.ExpressionMeta('#slot.feedback')))})], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-schedule:schedule-preview-notify').template = new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('schedule-preview-items')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'details', 'email', 'checked'], new expressions.ExpressionMeta('if #draft.data.details.email.checked', 'if'))], [
    [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('preview-item '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'details', 'email', 'previewOpen'], new expressions.ExpressionMeta('if #draft.data.details.email.previewOpen', 'if'))], [
      [new templates.Text('expanded')]
    ])]))}, [new templates.ViewInstance('profile-schedule:schedule-preview-notify-email', {})], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'checked'], new expressions.ExpressionMeta('if #draft.data.details.invite.checked', 'if'))], [
    [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('preview-item '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'previewOpen'], new expressions.ExpressionMeta('if #draft.data.details.invite.previewOpen', 'if'))], [
      [new templates.Text('expanded')]
    ])]))}, [new templates.ViewInstance('profile-schedule:schedule-preview-notify-invite', {})], void 0, false)]
  ])], void 0, false)]);
  views.register('profile-schedule:schedule-preview-notify-email').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('interview-preview-row')}, [new templates.Element('div', {'class': new templates.Attribute('column type')}, [new templates.Text('Email')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('column description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'details', 'email', 'message', 'subject'], new expressions.ExpressionMeta('#draft.data.details.email.message.subject')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('expand')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'details', 'email', 'previewOpen'], new expressions.ExpressionMeta('if #draft.data.details.email.previewOpen', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('profile-schedule:icon-caret-up', {})],
    [new templates.ViewInstance('profile-schedule:icon-caret-down', {})]
  ])], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['previewNotifyToggle'], [new expressions.LiteralExpression('email')]))], false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'details', 'email', 'previewOpen'], new expressions.ExpressionMeta('if #draft.data.details.email.previewOpen', 'if'))], [
    [new templates.ViewInstance('profile-schedule:schedule-preview-notify-email-content', {})]
  ])]);
  views.register('profile-schedule:schedule-preview-notify-email-content').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('interview-preview-content')}, [new templates.ViewInstance('profile-schedule:schedule-detail-notify-email', {})], void 0, false)]);
  views.register('profile-schedule:schedule-preview-notify-invite').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('interview-preview-row')}, [new templates.Element('div', {'class': new templates.Attribute('column type')}, [new templates.Text('Calendar invite')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('column description')}, [new templates.DynamicText(new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'title'], new expressions.ExpressionMeta('#draft.data.details.invite.title')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('expand')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'previewOpen'], new expressions.ExpressionMeta('if #draft.data.details.invite.previewOpen', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('profile-schedule:icon-caret-up', {})],
    [new templates.ViewInstance('profile-schedule:icon-caret-down', {})]
  ])], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['previewNotifyToggle'], [new expressions.LiteralExpression('invite')]))], false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#draft', ['data', 'details', 'invite', 'previewOpen'], new expressions.ExpressionMeta('if #draft.data.details.invite.previewOpen', 'if'))], [
    [new templates.ViewInstance('profile-schedule:schedule-preview-notify-invite-content', {})]
  ])]);
  views.register('profile-schedule:schedule-preview-notify-invite-content').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('interview-preview-content')}, [new templates.ViewInstance('profile-schedule:schedule-detail-notify-invite', {})], void 0, false)]);
  views.register('profile-schedule:schedule-submit').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Scheduled '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'interviews', 'length'], new expressions.ExpressionMeta('#notif.context.interviews.length'))), new templates.Text(' interview(s) for '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'profile', 'names', 0], new expressions.ExpressionMeta('#notif.context.profile.names[0]'))), new templates.Text(' on '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#notif', ['context', 'interviews', 0, 'date']), new expressions.AliasPathExpression('#notif', ['context', 'interviews', 0, 'timezoneName']), new expressions.LiteralExpression('dayDate')], void 0, new expressions.ExpressionMeta('formatTime(#notif.context.interviews[0].date, #notif.context.interviews[0].timezoneName, \'dayDate\')'))), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'suggestedStage'], new expressions.ExpressionMeta('if #notif.context.suggestedStage', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('link-bar left')}, [new templates.Element('a', {'class': new templates.Attribute('btn submit has-icon'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('profile-schedule:icon-progress', {}), new templates.Text('Change stage to '), new templates.DynamicText(new expressions.RelativePathExpression(['text'], new expressions.ExpressionMeta('this.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['changeStage'], [new expressions.AliasPathExpression('#notif', ['context', 'profile']), new expressions.RelativePathExpression([])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]
  ])], void 0, false)]);
  views.register('profile-schedule:schedule-success').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Created calendar events'), new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#notif', ['context', 'gcalEvents'], new expressions.ExpressionMeta('each #notif.context.gcalEvents as #gcalEvent', 'each', void 0, '#gcalEvent')), [new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['interviews']), new expressions.AliasPathExpression('#gcalEvent', ['interviewId']), void 0, new expressions.ExpressionMeta('with #root.interviews[#gcalEvent.interviewId] as #interview', 'with', void 0, '#interview')), [new templates.Element('li', {'class': new templates.Attribute('event')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#gcalEvent', ['link'], new expressions.ExpressionMeta('#gcalEvent.link'))), 'target': new templates.Attribute('_blank')}, [new templates.EachBlock(new expressions.AliasPathExpression('#interview', ['interviewers'], new expressions.ExpressionMeta('each #interview.interviewers as #interviewer', 'each', void 0, '#interviewer')), [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('interviewer comma-separated '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#interviewer', ['status']), new expressions.LiteralExpression('dismissed')], void 0, new expressions.ExpressionMeta('if #interviewer.status === \'dismissed\'', 'if'))], [
    [new templates.Text('interview-dismissed')]
  ])]))}, [new templates.DynamicText(new expressions.AliasPathExpression('#interviewer', ['name'], new expressions.ExpressionMeta('#interviewer.name')))], void 0, false), new templates.Text(' '), new templates.Element('div', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['timeRange'], [new expressions.AliasPathExpression('#interview', ['date']), new expressions.AliasPathExpression('#interview', ['duration']), new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#interview', ['timezoneName']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName'])])], void 0, new expressions.ExpressionMeta('timeRange(#interview.date, #interview.duration, #interview.timezoneName || #root._session.timezoneName)')))], void 0, false), new templates.Text(' ')]), new templates.Element('div', {'class': new templates.Attribute('calendar-link')}, [new templates.Text('View')], void 0, false)], void 0, false)], void 0, false)])])], void 0, false)], void 0, false)]);
  views.register('profile-schedule:schedule-notify-success').template = new templates.Template([new templates.Element('span', void 0, [new templates.Text('Created calendar event for candidate'), new templates.Element('ul', void 0, [new templates.Element('li', {'class': new templates.Attribute('event')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#notif', ['context', 'link'], new expressions.ExpressionMeta('#notif.context.link'))), 'target': new templates.Attribute('_blank')}, [new templates.Element('div', {'class': new templates.Attribute('dates')}, [new templates.Block(new expressions.AliasPathExpression('#notif', ['context', 'time'], new expressions.ExpressionMeta('with #notif.context.time as #time', 'with', void 0, '#time')), [new templates.ViewInstance('profile-schedule:formatted-time-range', {})])], void 0, false), new templates.Text(' '), new templates.Element('div', {'class': new templates.Attribute('calendar-link')}, [new templates.Text('View')], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-schedule:formatted-time-range').template = new templates.Template([new templates.Element('span', {'class': new templates.Attribute('formatted-time-dates dates')}, [new templates.DynamicText(new expressions.AliasPathExpression('#time', ['start', 'day'], new expressions.ExpressionMeta('#time.start.day')))], void 0, false), new templates.Element('span', {'class': new templates.Attribute('formatted-time time dates')}, [new templates.DynamicText(new expressions.AliasPathExpression('#time', ['start', 'time'], new expressions.ExpressionMeta('#time.start.time'))), new templates.ConditionalBlock([new expressions.OperatorExpression('!==', [new expressions.AliasPathExpression('#time', ['start', 'suffix']), new expressions.AliasPathExpression('#time', ['end', 'suffix'])], void 0, new expressions.ExpressionMeta('if #time.start.suffix !== #time.end.suffix', 'if'))], [
    [new templates.DynamicText(new expressions.AliasPathExpression('#time', ['start', 'suffix'], new expressions.ExpressionMeta('#time.start.suffix')))]
  ]), new templates.Text('  –  ')], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('!==', [new expressions.AliasPathExpression('#time', ['start', 'day']), new expressions.AliasPathExpression('#time', ['end', 'day'])], void 0, new expressions.ExpressionMeta('if #time.start.day !== #time.end.day', 'if'))], [
    [new templates.Element('span', {'class': new templates.Attribute('formatted-time-dates dates')}, [new templates.DynamicText(new expressions.AliasPathExpression('#time', ['end', 'day'], new expressions.ExpressionMeta('#time.end.day')))], void 0, false)]
  ]), new templates.Element('span', {'class': new templates.Attribute('formatted-time time dates')}, [new templates.DynamicText(new expressions.AliasPathExpression('#time', ['end', 'time'], new expressions.ExpressionMeta('#time.end.time'))), new templates.DynamicText(new expressions.AliasPathExpression('#time', ['end', 'suffix'], new expressions.ExpressionMeta('#time.end.suffix')))], void 0, false)]);
  views.register('profile-snooze:index').template = new templates.Template([new templates.Comment('profile-snooze:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.PathExpression(['activeSnooze'], new expressions.ExpressionMeta('if activeSnooze', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ConditionalBlock([new expressions.PathExpression(['edit'], new expressions.ExpressionMeta('if edit', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.ViewInstance('profile-snooze:snooze-form', {})],
      [new templates.ViewInstance('profile-snooze:view-snooze', {})]
    ])],
    [new templates.ViewInstance('profile-snooze:create-snooze', {})]
  ])]);
  views.register('profile-snooze:view-snooze').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('snooze-form')}, [new templates.Element('p', void 0, [new templates.Text('Snoozed until: '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['activeSnooze', 'expiresAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('date')], void 0, new expressions.ExpressionMeta('formatTime(activeSnooze.expiresAt, #root._session.timezoneName, \'date\')')))], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['activeSnooze', 'note'], new expressions.ExpressionMeta('if activeSnooze.note', 'if'))], [
    [new templates.Element('div', void 0, [new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('link-bar left')}, [new templates.Element('button', {'class': new templates.Attribute('dark-button')}, [new templates.Text('Edit')], [new templates.ElementOn('click', new expressions.FnExpression(['editSnooze'], []))], false), new templates.ConditionalBlock([new expressions.PathExpression(['activeSnooze', 'gcalEvent', 'htmlLink'], new expressions.ExpressionMeta('if activeSnooze.gcalEvent.htmlLink', 'if'))], [
    [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.DynamicAttribute(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this'))), 'target': new templates.Attribute('_blank')}, [new templates.Text('View calendar event')], void 0, false)]
  ]), new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Remove')], [new templates.ElementOn('click', new expressions.FnExpression(['removeSnooze'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]);
  views.register('profile-snooze:create-snooze').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('create-snooze')}, [new templates.Element('div', {'class': new templates.Attribute('snooze-form')}, [new templates.Element('textarea', {'class': new templates.Attribute('dark-input'), 'placeholder': new templates.Attribute('Optional note...')}, [new templates.DynamicText(new expressions.PathExpression(['draftSnooze', 'note'], new expressions.ExpressionMeta('draftSnooze.note')))], [new templates.MarkupAs(['noteInput'])], false), new templates.Element('div', void 0, [new templates.Element('p', void 0, [new templates.Text('Snoozed until')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('select-date dark-input')}, [new templates.ViewInstance('icon-calendar', {}), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['draftSnooze', 'expiresAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('date')], void 0, new expressions.ExpressionMeta('formatTime(draftSnooze.expiresAt, #root._session.timezoneName, \'date\')')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['calendarPopup', 'toggle'], [new expressions.PathExpression(['$element'])]))], false)], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.EachBlock(new expressions.PathExpression(['presetOptions'], new expressions.ExpressionMeta('each presetOptions as #option', 'each', void 0, '#option')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['selectOption'], [new expressions.AliasPathExpression('#option', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar left')}, [new templates.Element('button', {'class': new templates.Attribute('btn submit'), 'disabled': new templates.DynamicAttribute(new expressions.PathExpression(['submitting'], new expressions.ExpressionMeta('submitting')))}, [new templates.ConditionalBlock([new expressions.PathExpression(['submitting'], new expressions.ExpressionMeta('if submitting', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Saving...')],
    [new templates.Text('Submit')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['saveSnooze'], []))], false)], void 0, false)], void 0, false), new templates.ViewInstance('l-popup', {'class': 'darker', 'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('l-calendar', {'class': 'dark-calendar', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['draftSnooze', 'expiresAt'], new expressions.ExpressionMeta('draftSnooze.expiresAt'))), new expressions.PathExpression(['draftSnooze', 'expiresAt'], new expressions.ExpressionMeta('draftSnooze.expiresAt'))), 'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'timezoneName'], new expressions.ExpressionMeta('#root._session.timezoneName'))), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName'], new expressions.ExpressionMeta('#root._session.timezoneName')))}, [new templates.ComponentOn('select', new expressions.FnExpression(['calendarPopup', 'close'], []))])]))}, [new templates.MarkupAs(['calendarPopup'])])]);
  views.register('profile-snooze:choose-preset').template = new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('popup-menu')}, [new templates.EachBlock(new expressions.PathExpression(['presetOptions'], new expressions.ExpressionMeta('each presetOptions as #option', 'each', void 0, '#option')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['selectOption'], [new expressions.AliasPathExpression('#option', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Custom time')], [new templates.ElementOn('click', new expressions.FnExpression(['chooseCustom'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['parent', 'snoozeMenu', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]);
  views.register('profile-snooze:snooze-form').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('snooze-form')}, [new templates.Element('p', void 0, [new templates.Text('Snoozed until')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('select-date dark-input')}, [new templates.ViewInstance('icon-calendar', {}), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['draftSnooze', 'expiresAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('date')], void 0, new expressions.ExpressionMeta('formatTime(draftSnooze.expiresAt, #root._session.timezoneName, \'date\')')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['calendarPopup', 'toggle'], [new expressions.PathExpression(['$element'])]))], false), new templates.Element('textarea', {'class': new templates.Attribute('dark-input'), 'placeholder': new templates.Attribute('Optional note...'), 'rows': new templates.Attribute('5')}, [new templates.DynamicText(new expressions.PathExpression(['draftSnooze', 'note'], new expressions.ExpressionMeta('draftSnooze.note')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['parent', 'snoozeMenu', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('submit '), new templates.ConditionalBlock([new expressions.PathExpression(['submitting'], new expressions.ExpressionMeta('if submitting', 'if'))], [
    [new templates.Text('disabled')]
  ])])), 'disabled': new templates.DynamicAttribute(new expressions.PathExpression(['submitting'], new expressions.ExpressionMeta('submitting')))}, [new templates.ConditionalBlock([new expressions.PathExpression(['submitting'], new expressions.ExpressionMeta('if submitting', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Saving...')],
    [new templates.Text('Submit')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['saveSnooze'], []))], false)], void 0, false), new templates.ViewInstance('l-popup', {'class': 'darker', 'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('l-calendar', {'class': 'dark-calendar', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['draftSnooze', 'expiresAt'], new expressions.ExpressionMeta('draftSnooze.expiresAt'))), new expressions.PathExpression(['draftSnooze', 'expiresAt'], new expressions.ExpressionMeta('draftSnooze.expiresAt'))), 'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'timezoneName'], new expressions.ExpressionMeta('#root._session.timezoneName'))), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName'], new expressions.ExpressionMeta('#root._session.timezoneName')))}, [new templates.ComponentOn('select', new expressions.FnExpression(['calendarPopup', 'close'], []))])]))}, [new templates.MarkupAs(['calendarPopup'])])], void 0, false)]);
  views.register('profile-snooze:notif-create').template = new templates.Template([new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_snoozes']), new expressions.AliasPathExpression('#notif', ['context', 'snoozeId']), void 0, new expressions.ExpressionMeta('with #root.profile_snoozes[#notif.context.snoozeId] as #snooze', 'with', void 0, '#snooze')), [new templates.Element('span', void 0, [new templates.Text('Snoozed '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'profile', 'names', 0], new expressions.ExpressionMeta('#notif.context.profile.names[0]'))), new templates.Text('. You will receive on a reminder on '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#snooze', ['expiresAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('date')], void 0, new expressions.ExpressionMeta('formatTime(#snooze.expiresAt, #root._session.timezoneName, \'date\')'))), new templates.Text('.'), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'gcalEvent', 'link'], new expressions.ExpressionMeta('if #notif.context.gcalEvent.link', 'if'))], [
    [new templates.Text(' '), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this'))), 'target': new templates.Attribute('_blank')}, [new templates.Text('View Calendar Event.')], void 0, false)]
  ])], void 0, false)])]);
  views.register('profile-snooze:notif-update').template = new templates.Template([new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_snoozes']), new expressions.AliasPathExpression('#notif', ['context', 'snoozeId']), void 0, new expressions.ExpressionMeta('with #root.profile_snoozes[#notif.context.snoozeId] as #snooze', 'with', void 0, '#snooze')), [new templates.Element('span', void 0, [new templates.Text('Snoozed updated for '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'profile', 'names', 0], new expressions.ExpressionMeta('#notif.context.profile.names[0]'))), new templates.Text('. You will receive on a reminder on '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#snooze', ['expiresAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('date')], void 0, new expressions.ExpressionMeta('formatTime(#snooze.expiresAt, #root._session.timezoneName, \'date\')'))), new templates.Text('.'), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'gcalEvent', 'link'], new expressions.ExpressionMeta('if #notif.context.gcalEvent.link', 'if'))], [
    [new templates.Text(' '), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this'))), 'target': new templates.Attribute('_blank')}, [new templates.Text('View Calendar Event.')], void 0, false)]
  ])], void 0, false)])]);
  views.register('profile-snooze:notif-remove').template = new templates.Template([new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_snoozes']), new expressions.AliasPathExpression('#notif', ['context', 'snoozeId']), void 0, new expressions.ExpressionMeta('with #root.profile_snoozes[#notif.context.snoozeId] as #snooze', 'with', void 0, '#snooze')), [new templates.Element('span', void 0, [new templates.Text('Snoozed removed for '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'profile', 'names', 0], new expressions.ExpressionMeta('#notif.context.profile.names[0]'))), new templates.Text('.'), new templates.ConditionalBlock([new expressions.AliasPathExpression('#notif', ['context', 'gcalEvent', 'link'], new expressions.ExpressionMeta('if #notif.context.gcalEvent.link', 'if'))], [
    [new templates.Text(' Calendar event removed.')]
  ])], void 0, false)])]);
  views.register('profile-snooze:notif-remove-error').template = new templates.Template([new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_snoozes']), new expressions.AliasPathExpression('#notif', ['context', 'snoozeId']), void 0, new expressions.ExpressionMeta('with #root.profile_snoozes[#notif.context.snoozeId] as #snooze', 'with', void 0, '#snooze')), [new templates.Element('span', void 0, [new templates.Text('Error removing calendar event for '), new templates.DynamicText(new expressions.AliasPathExpression('#notif', ['context', 'profile', 'names', 0], new expressions.ExpressionMeta('#notif.context.profile.names[0]'))), new templates.Text('\'s snooze. '), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#snooze', ['gcalEvent', 'htmlLink'], new expressions.ExpressionMeta('#snooze.gcalEvent.htmlLink')))}, [new templates.Text('View calendar event.')], void 0, false)], void 0, false)])]);
  views.register('profile-stories:icon-mail:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-mail')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M1.91041092,2.13405025 L14.0892085,2.13405025 C14.3344049,2.13405025 14.5690915,2.17781151 14.7859018,2.25790765 L7.99949326,7.67307941 L1.20411635,2.26151146 C1.42373091,2.17910235 1.66177262,2.13405025 1.91041092,2.13405025 Z M15.6318054,2.85738206 C15.9177503,3.20216769 16.0892948,3.64458077 16.0892948,4.12703291 L16.0892948,11.0070173 C16.0892948,12.1107937 15.1938257,13 14.0892085,13 L1.91041092,13 C0.803221956,13 -0.089675347,12.1077113 -0.089675347,11.0070173 L-0.089675347,4.12703291 C-0.089675347,3.64703603 0.0796668677,3.20761653 0.361907057,2.86425825 L7.68135948,8.6931791 L8.0001262,8.94703224 L8.31864052,8.69287575 Z M15.6318054,2.85738206'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-stories:icon-error:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-error')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'viewbox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M15.0875976,13.1513746 L12.9835976,9.17237457 C12.4625976,8.20337457 11.6085976,6.61937457 11.0875976,5.65137457 L8.98459759,1.74437457 C8.46359759,0.775374566 7.60959759,0.775374566 7.08859759,1.74437457 L4.98559759,5.66737457 C4.46359759,6.63637457 3.61059759,8.23937457 3.08859759,9.20737457 L0.984597585,13.1503746 C0.463597585,14.1193746 0.936597585,14.9823746 2.03659759,14.9823746 L6.03659759,14.9823746 L10.0365976,14.9823746 L14.0365976,14.9823746 C15.1355976,14.9833746 15.6095976,14.1203746 15.0875976,13.1513746 L15.0875976,13.1513746 Z M9.03659759,12.9833746 L7.03659759,12.9833746 L7.03659759,10.9833746 L9.03659759,10.9833746 L9.03659759,12.9833746 L9.03659759,12.9833746 Z M9.03659759,9.98337457 L7.03659759,9.98337457 L7.03659759,5.98337457 L9.03659759,5.98337457 L9.03659759,9.98337457 L9.03659759,9.98337457 Z M9.03659759,9.98337457'), 'fill': new templates.Attribute('#010101')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-stories:index').template = new templates.Template([new templates.Comment('profile-stories:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('profile-stories')}, [new templates.EachBlock(new expressions.PathExpression(['itemList'], new expressions.ExpressionMeta('each itemList as #item', 'each', void 0, '#item')), [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['type']), new expressions.LiteralExpression('card')], void 0, new expressions.ExpressionMeta('if #item.type === \'card\'', 'if')), new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['type']), new expressions.LiteralExpression('story')], void 0, new expressions.ExpressionMeta('else if #item.type === \'story\'', 'else if')), new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['type']), new expressions.LiteralExpression('email')], void 0, new expressions.ExpressionMeta('else if #item.type === \'email\'', 'else if')), new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['type']), new expressions.LiteralExpression('interview-panel')], void 0, new expressions.ExpressionMeta('else if #item.type === \'interview-panel\'', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('l-card', {'card': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_cards']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('#root.profile_cards[#item.id]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_cards']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('#root.profile_cards[#item.id]'))), 'layout': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#item', ['layout'], new expressions.ExpressionMeta('#item.layout'))), new expressions.AliasPathExpression('#item', ['layout'], new expressions.ExpressionMeta('#item.layout'))), 'edit': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['cardsEdit']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('cardsEdit[#item.id]'))), new expressions.BracketsExpression(new expressions.PathExpression(['cardsEdit']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('cardsEdit[#item.id]')))}, [new templates.ComponentOn('submit', new expressions.FnExpression(['cardSubmit'], [new expressions.AliasPathExpression('#item', ['id'])]))])],
    [new templates.ViewInstance('profile-story', {'story': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_stories']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('#root.profile_stories[#item.id]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['profile_stories']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('#root.profile_stories[#item.id]')))})],
    [new templates.ViewInstance('email-thread', {'profile': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), new expressions.PathExpression(['profile'], new expressions.ExpressionMeta('profile'))), 'thread': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['email_threads']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('#root.email_threads[#item.id]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['email_threads']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('#root.email_threads[#item.id]'))), 'emailsByThreadId': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['emailsByThreadId'], new expressions.ExpressionMeta('emailsByThreadId'))), new expressions.PathExpression(['emailsByThreadId'], new expressions.ExpressionMeta('emailsByThreadId')))})],
    [new templates.ViewInstance('interview-panel', {'panel': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['interviewsByDate']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('interviewsByDate[#item.id]'))), new expressions.BracketsExpression(new expressions.PathExpression(['interviewsByDate']), new expressions.AliasPathExpression('#item', ['id']), void 0, new expressions.ExpressionMeta('interviewsByDate[#item.id]')))})],
    [new templates.DynamicText(new expressions.FnExpression(['JSON', 'stringify'], [new expressions.AliasPathExpression('#item', [])], void 0, new expressions.ExpressionMeta('JSON.stringify(#item)')))]
  ])], [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'historyPage']), new expressions.LiteralExpression('notes')], void 0, new expressions.ExpressionMeta('if #root.$render.params.historyPage === \'notes\'', 'if')), new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'historyPage']), new expressions.LiteralExpression('emails')], void 0, new expressions.ExpressionMeta('else if #root.$render.params.historyPage === \'emails\'', 'else if')), new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'historyPage']), new expressions.LiteralExpression('feedback')], void 0, new expressions.ExpressionMeta('else if #root.$render.params.historyPage === \'feedback\'', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('profile-stories:null-state-notes', {})],
    [new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'emails'], new expressions.ExpressionMeta('unless profile.emails', 'unless')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.ViewInstance('profile-stories:null-state-emails-no-address', {})],
      [new templates.ViewInstance('profile-stories:null-state-emails', {})]
    ])],
    [new templates.ViewInstance('profile-stories:null-state-feedback', {})],
    [new templates.ViewInstance('profile-stories:null-state-everything', {})]
  ])])], void 0, false), new templates.ViewInstance('l-popup', {'class': 'darker', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('h3', void 0, [new templates.Text('Are you sure?')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteConfirmPopup', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['confirmDelete'], []))], false)], void 0, false)]))}, [new templates.MarkupAs(['deleteConfirmPopup'])])]);
  views.register('profile-stories:null-state-notes').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('null-state notes')}, [new templates.ViewInstance('icon-note', {}), new templates.Element('h3', {'class': new templates.Attribute('null-headline')}, [new templates.Text('No notes yet')], void 0, false), new templates.Element('p', void 0, [new templates.Text('Use notes to talk about this candidate with your co-workers.')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('divider')}, [], void 0, false), new templates.Element('a', {'class': new templates.Attribute('btn has-icon'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-note', {}), new templates.Text('Add note')], [new templates.ElementOn('click', new expressions.FnExpression(['page', 'profileFlyover', 'profileSummary', 'profileNote', 'notePopup', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]);
  views.register('profile-stories:null-state-emails').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('null-state emails')}, [new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tasks']), new expressions.PathExpression(['importTaskId']), void 0, new expressions.ExpressionMeta('if #root.tasks[importTaskId]', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.RelativePathExpression(['state']), new expressions.LiteralExpression('failed')], void 0, new expressions.ExpressionMeta('if this.state == \'failed\'', 'if')), new expressions.OperatorExpression('==', [new expressions.RelativePathExpression(['state']), new expressions.LiteralExpression('complete')], void 0, new expressions.ExpressionMeta('else if this.state == \'complete\'', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.ViewInstance('profile-stories:icon-error', {}), new templates.Element('p', void 0, [new templates.Text('Error occurred looking for emails')], void 0, false)],
      [new templates.ViewInstance('profile-stories:icon-error', {}), new templates.Element('h3', {'class': new templates.Attribute('null-headline')}, [new templates.Text('Didn\'t find any emails')], void 0, false), new templates.Element('p', void 0, [new templates.Text('There are no threads in your inbox with the email address on this candidate.')], void 0, false)],
      [new templates.Element('div', {'class': new templates.Attribute('loading-indicator')}, [], void 0, false), new templates.Element('h3', {'class': new templates.Attribute('null-headline')}, [new templates.Text('Importing')], void 0, false), new templates.Element('p', void 0, [new templates.Text('This might take a few seconds.')], void 0, false)]
    ])],
    [new templates.ViewInstance('profile-stories:icon-mail', {}), new templates.Element('h3', {'class': new templates.Attribute('null-headline')}, [new templates.Text('No emails yet')], void 0, false), new templates.Element('a', {'class': new templates.Attribute('submit'), 'href': new templates.Attribute('#')}, [new templates.Text('Import candidate email')], [new templates.ElementOn('click', new expressions.FnExpression(['importEmail'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('or-divider')}, [], void 0, false), new templates.Element('a', {'class': new templates.Attribute('has-icon link'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('Email candidate')], [new templates.ElementOn('click', new expressions.FnExpression(['page', 'profileFlyover', 'profileSummary', 'newEmail'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]);
  views.register('profile-stories:null-state-emails-no-address').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('null-state emails')}, [new templates.ViewInstance('profile-stories:icon-error', {}), new templates.Element('h3', {'class': new templates.Attribute('null-headline')}, [new templates.Text('No email address')], void 0, false), new templates.Element('p', void 0, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Add an email address')], [new templates.ElementOn('click', new expressions.FnExpression(['focusEmailInput'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Text(' for this candidate.')], void 0, false)], void 0, false)]);
  views.register('profile-stories:null-state-emails-importing').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('null-state emails')}, [new templates.Element('div', {'class': new templates.Attribute('loading-indicator')}, [], void 0, false), new templates.Element('h3', {'class': new templates.Attribute('null-headline')}, [new templates.Text('Importing')], void 0, false), new templates.Element('p', void 0, [new templates.Text('This might take a few seconds.')], void 0, false)], void 0, false)]);
  views.register('profile-stories:null-state-emails-error').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('null-state emails')}, [new templates.ViewInstance('profile-stories:icon-error', {}), new templates.Element('h3', {'class': new templates.Attribute('null-headline')}, [new templates.Text('Didn\'t find any emails')], void 0, false), new templates.Element('p', void 0, [new templates.Text('No threads in your inbox match the email address on this candidate.')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('or-divider')}, [], void 0, false), new templates.Element('p', void 0, [new templates.Text('You haven\'t emailed this candidate yet.')], void 0, false)], void 0, false)]);
  views.register('profile-stories:null-state-feedback').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('null-state feedback')}, [new templates.ViewInstance('icon-feedback', {}), new templates.Element('h3', {'class': new templates.Attribute('null-headline')}, [new templates.Text('No activity here yet')], void 0, false), new templates.Element('p', void 0, [new templates.Text('Add forms or feedback to enter more information about this candidate.')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('divider')}, [], void 0, false), new templates.Element('a', {'class': new templates.Attribute('btn has-icon add-postingcard-button'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-cards', {}), new templates.Text('Add form')], [new templates.MarkupAs(['formMenuBtn']), new templates.ElementOn('click', new expressions.FnExpression(['page', 'profileFlyover', 'profileSummary', 'addFormMenu', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('btn has-icon add-postingcard-button'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-calendar', {}), new templates.Text('Schedule interview')], [new templates.ElementOn('click', new expressions.FnExpression(['page', 'profileFlyover', 'profileSummary', 'scheduleInterview'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]);
  views.register('profile-stories:null-state-everything').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('null-state everything')}, [new templates.ViewInstance('icon-history-everything', {}), new templates.Element('h3', {'class': new templates.Attribute('null-headline')}, [new templates.Text('No activity yet')], void 0, false), new templates.Element('p', void 0, [new templates.Text('You haven\'t started working on this candidate, it seems.')], void 0, false)], void 0, false)]);
  views.register('profile-story:icon-secret:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-secret')])), 'title': new templates.DynamicAttribute(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title'))), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12.909,5.085C12.909,2.282,10.707,0,8,0\nC5.293,0,3.091,2.281,3.091,5.085v1.601H2V16h12V6.686h-1.091V5.085z M10.728,6.612H5.272V5.029c0-1.498,1.25-2.762,2.728-2.762\nc1.479,0,2.728,1.265,2.728,2.762V6.612L10.728,6.612z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:reaction:add').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'reaction', 'positive'], new expressions.ExpressionMeta('if story.meta.reaction.positive', 'if')), new expressions.PathExpression(['story', 'meta', 'reaction', 'negative'], new expressions.ExpressionMeta('else if story.meta.reaction.negative', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'reaction', 'negative'], new expressions.ExpressionMeta('if story.meta.reaction.negative', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Text('Had mixed reactions')],
      [new templates.Text('Reacted positively')]
    ])],
    [new templates.Text('Reacted negatively')],
    [new templates.Text('Commented')]
  ])])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('story-reaction '), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'reaction', 'positive'], new expressions.ExpressionMeta('if story.meta.reaction.positive', 'if'))], [
    [new templates.Text('story-reaction-positive')]
  ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'reaction', 'negative'], new expressions.ExpressionMeta('if story.meta.reaction.negative', 'if'))], [
    [new templates.Text('story-reaction-negative')]
  ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'reaction', 'comment'], new expressions.ExpressionMeta('if story.meta.reaction.comment', 'if'))], [
    [new templates.Text('has-comment')]
  ])]))}, [new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'reaction', 'comment'], new expressions.ExpressionMeta('if story.meta.reaction.comment', 'if'))], [
    [new templates.Element('span', {'class': new templates.Attribute('profile-story-comment')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'reaction', 'comment'], new expressions.ExpressionMeta('story.meta.reaction.comment')))], void 0, false)]
  ])], void 0, false)]))})]);
  views.register('profile-story:stage:icon-history-progress:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-history-progress')])), 'width': new templates.Attribute('40px'), 'height': new templates.Attribute('40px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M2.89042847,4.52415899 C4.23573121,2.63796976 6.72643398,4.78178845e-07 10.1344804,0 C15.4388974,-8.2309569e-07 15.2936452,3.11180268 22.1251496,3.11180215 C28.9566541,3.1118017 29.4782579,1.61506862 29.4782579,1.61506862 L40,17.2323741 C40,17.2323741 37.1301,19.857009 33.9880855,19.857009 C30.8460711,19.857009 24.8437331,16.9137768 21.4767708,16.9137768 C18.6204707,16.9137768 15.7302266,18.5187629 13.7574077,20.5503649 L24.7197658,37.0977823 C25.297401,37.9697089 25.0419832,39.1339095 24.1492743,39.6980973 C23.2565653,40.262285 22.0646159,40.0128134 21.4869807,39.1408869 L0.309098615,7.17338001 C-0.268536584,6.30145348 -0.0131188478,5.13725283 0.879590095,4.57306508 C1.50780285,4.17603765 2.28420396,4.18194645 2.89042847,4.52415899 Z M2.89042847,4.52415899'), 'fill': new templates.Attribute('#809096')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:stage:change').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.DynamicText(new expressions.FnExpression(['stageProgression'], [new expressions.PathExpression(['story'])], void 0, new expressions.ExpressionMeta('stageProgression(story)'))), new templates.Text(' the candidate')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-story:stage:icon-history-progress', {}), new templates.Element('div', {'class': new templates.Attribute('stage-text')}, [new templates.Element('span', {'class': new templates.Attribute('stage current')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['stages']), new expressions.PathExpression(['story', 'meta', 'to', 'id']), ['text'], new expressions.ExpressionMeta('#root.stages[story.meta.to.id].text')))], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'from'], new expressions.ExpressionMeta('if story.meta.from', 'if'))], [
    [new templates.Text('from'), new templates.Element('span', {'class': new templates.Attribute('stage')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['stages']), new expressions.PathExpression(['story', 'meta', 'from', 'id']), ['text'], new expressions.ExpressionMeta('#root.stages[story.meta.from.id].text')))], void 0, false)]
  ])], void 0, false)]))})]);
  views.register('profile-story:tag:add').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Added tags')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'tags'], new expressions.ExpressionMeta('each story.meta.tags as #tag', 'each', void 0, '#tag')), [new templates.Element('div', {'class': new templates.Attribute('tag-unit type-story')}, [new templates.Element('div', {'class': new templates.Attribute('tag-title')}, [new templates.DynamicText(new expressions.AliasPathExpression('#tag', ['text'], new expressions.ExpressionMeta('#tag.text')))], void 0, false)], void 0, false)])]))})]);
  views.register('profile-story:tag:remove').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Removed tags')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'tags'], new expressions.ExpressionMeta('each story.meta.tags as #tag', 'each', void 0, '#tag')), [new templates.Element('div', {'class': new templates.Attribute('tag-unit type-story')}, [new templates.Element('div', {'class': new templates.Attribute('tag-title')}, [new templates.DynamicText(new expressions.AliasPathExpression('#tag', ['text'], new expressions.ExpressionMeta('#tag.text')))], void 0, false)], void 0, false)])]))})]);
  views.register('profile-story:source:add').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Added sources')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'sources'], new expressions.ExpressionMeta('each story.meta.sources as #source', 'each', void 0, '#source')), [new templates.Element('div', {'class': new templates.Attribute('tag-unit type-story')}, [new templates.Element('div', {'class': new templates.Attribute('tag-title')}, [new templates.DynamicText(new expressions.AliasPathExpression('#source', ['text'], new expressions.ExpressionMeta('#source.text')))], void 0, false)], void 0, false)])]))})]);
  views.register('profile-story:source:remove').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Removed sources')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'sources'], new expressions.ExpressionMeta('each story.meta.sources as #source', 'each', void 0, '#source')), [new templates.Element('div', {'class': new templates.Attribute('tag-unit type-story')}, [new templates.Element('div', {'class': new templates.Attribute('tag-title')}, [new templates.DynamicText(new expressions.AliasPathExpression('#source', ['text'], new expressions.ExpressionMeta('#source.text')))], void 0, false)], void 0, false)])]))})]);
  views.register('profile-story:contact:icon-location:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-location')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('10px'), 'height': new templates.Attribute('14px'), 'viewBox': new templates.Attribute('0 0 10 14'), 'enable-background': new templates.Attribute('new 0 0 10 14'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'d': new templates.Attribute('M4.813,0C2.887,0,0,0.878,0,4.376C0,6.127,3.852,12.25,4.813,14c0.96-1.75,4.812-7.873,4.812-9.624 C9.625,0.878,6.738,0,4.813,0 M4.812,7.005c-1.234,0-2.236-1-2.236-2.236c0-1.233,1.002-2.236,2.236-2.236s2.236,1.002,2.236,2.236 C7.049,6.005,6.047,7.005,4.812,7.005'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:contact:icon-phone:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-phone')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('13px'), 'height': new templates.Attribute('14px'), 'viewBox': new templates.Attribute('0 0 13 14'), 'enable-background': new templates.Attribute('new 0 0 13 14'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'d': new templates.Attribute('M10.887,13.973c-0.599,0.125-4.592-0.039-7.845-3.711c-3.454-3.894-3.096-8.284-2.962-8.556 c0.268-0.532,0.838-1.098,1.564-1.553C1.748,0.086,1.857,0.042,1.974,0.02C2.451-0.078,2.896,0.211,3.193,0.4l0.152,0.096 c0.403,0.233,0.905,2.865,0.883,3.19C4.206,4.063,3.792,4.432,2.803,5.312c0.285,0.981,1.164,2.321,1.863,3.111 c0.644,0.729,2.034,1.972,3.02,2.399c0.855-0.757,1.29-1.137,1.639-1.207c0.051-0.008,0.101-0.014,0.15-0.011 c0.324,0.019,2.876,0.832,3.059,1.259l0.078,0.166c0.186,0.383,0.495,1.021,0.061,1.565c-0.541,0.666-1.172,1.167-1.731,1.364 L10.887,13.973z'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:contact:icon-mail:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-mail')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M1.91041092,2.13405025 L14.0892085,2.13405025 C14.3344049,2.13405025 14.5690915,2.17781151 14.7859018,2.25790765 L7.99949326,7.67307941 L1.20411635,2.26151146 C1.42373091,2.17910235 1.66177262,2.13405025 1.91041092,2.13405025 Z M15.6318054,2.85738206 C15.9177503,3.20216769 16.0892948,3.64458077 16.0892948,4.12703291 L16.0892948,11.0070173 C16.0892948,12.1107937 15.1938257,13 14.0892085,13 L1.91041092,13 C0.803221956,13 -0.089675347,12.1077113 -0.089675347,11.0070173 L-0.089675347,4.12703291 C-0.089675347,3.64703603 0.0796668677,3.20761653 0.361907057,2.86425825 L7.68135948,8.6931791 L8.0001262,8.94703224 L8.31864052,8.69287575 Z M15.6318054,2.85738206'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:contact:add').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Updated contact information')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('contact-info-added')}, [new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'location'], new expressions.ExpressionMeta('if story.meta.location', 'if'))], [
    [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:contact:icon-location', {}), new templates.Element('span', {'class': new templates.Attribute('location')}, [new templates.Text('{story.meta.location.name}}')], void 0, false)], void 0, false)]
  ]), new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'phones'], new expressions.ExpressionMeta('each story.meta.phones as #phone', 'each', void 0, '#phone')), [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:contact:icon-phone', {}), new templates.Element('span', {'class': new templates.Attribute('phone')}, [new templates.DynamicText(new expressions.AliasPathExpression('#phone', ['value'], new expressions.ExpressionMeta('#phone.value')))], void 0, false)], void 0, false)]), new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'emails'], new expressions.ExpressionMeta('each story.meta.emails as #email', 'each', void 0, '#email')), [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:contact:icon-mail', {}), new templates.Element('span', {'class': new templates.Attribute('email')}, [new templates.DynamicText(new expressions.AliasPathExpression('#email', ['value'], new expressions.ExpressionMeta('#email.value')))], void 0, false)], void 0, false)])], void 0, false)]))})]);
  views.register('profile-story:contact:remove').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Removed contact information')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('contact-info-removed')}, [new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'location'], new expressions.ExpressionMeta('if story.meta.location', 'if'))], [
    [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:contact:icon-location', {}), new templates.Element('span', {'class': new templates.Attribute('location')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'location', 'name'], new expressions.ExpressionMeta('story.meta.location.name')))], void 0, false)], void 0, false)]
  ]), new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'phones'], new expressions.ExpressionMeta('each story.meta.phones as #phone', 'each', void 0, '#phone')), [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:contact:icon-phone', {}), new templates.Element('span', {'class': new templates.Attribute('phone')}, [new templates.DynamicText(new expressions.AliasPathExpression('#phone', ['value'], new expressions.ExpressionMeta('#phone.value')))], void 0, false)], void 0, false)]), new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'emails'], new expressions.ExpressionMeta('each story.meta.emails as #email', 'each', void 0, '#email')), [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:contact:icon-mail', {}), new templates.Element('span', {'class': new templates.Attribute('email')}, [new templates.DynamicText(new expressions.AliasPathExpression('#email', ['value'], new expressions.ExpressionMeta('#email.value')))], void 0, false)], void 0, false)])], void 0, false)]))})]);
  views.register('profile-story:create:new').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Added candidate')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('story-create-new')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['story', 'user', 'id']), ['name'], new expressions.ExpressionMeta('#root.users_base[story.user.id].name'))), new templates.Text(' added '), new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'profile', 'names', 0], new expressions.ExpressionMeta('#root._page.profile.names[0]')))], void 0, false)]))})]);
  views.register('profile-story:note:add').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.ConditionalBlock([new expressions.FnExpression(['contains'], [new expressions.PathExpression(['story', 'meta', 'profileMentions']), new expressions.PathExpression(['parent', 'profile', 'id'])], void 0, new expressions.ExpressionMeta('if contains(story.meta.profileMentions, parent.profile.id)', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Mentioned from another profile')],
    [new templates.Text('Added a note')]
  ])])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('story-note profile-story-comment')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'text'], new expressions.ExpressionMeta('story.meta.text')))], void 0, false)]))})]);
  views.register('profile-story:link:icon-link:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-link')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M16.6751679,8.69440552 C16.6751679,10.3494829 15.2700104,11.7005307 13.5366606,11.7005307 L10.3883185,11.7005307 C9.29973107,11.7005307 8.33677879,11.1660506 7.77341801,10.3552389 C7.21106344,11.165004 6.24985876,11.7005307 5.15856569,11.7005307 L2.01022357,11.7005307 C0.282787373,11.7005307 -1.12828377,10.3546426 -1.12828377,8.69440552 L-1.12828377,8.03036154 C-1.12828377,6.37528412 0.276873826,5.02423633 2.01022357,5.02423633 L5.15856569,5.02423633 C6.2471531,5.02423633 7.21010539,5.55871644 7.77346616,6.36952817 C8.33582074,5.55976302 9.29702541,5.02423633 10.3883185,5.02423633 L13.5366606,5.02423633 C15.2640968,5.02423633 16.6751679,6.37012443 16.6751679,8.03036154 Z M10.3883185,9.6986199 L13.5366606,9.6986199 C14.1098221,9.6986199 14.5806442,9.24712236 14.5806442,8.69440552 L14.5806442,8.03036154 C14.5806442,7.47733202 14.1089772,7.02614715 13.5366606,7.02614715 L10.3883185,7.02614715 C10.013397,7.02614715 9.68226484,7.21933609 9.49806053,7.50766918 L11.0086429,7.50766918 C11.5870296,7.50766918 12.0231864,7.80957115 12.0231864,8.36238356 C12.0231864,8.91519597 11.5870296,9.21709788 11.0086429,9.21709788 L9.49817009,9.21709788 C9.68253891,9.50550171 10.0138884,9.6986199 10.3883185,9.6986199 Z M2.01022357,9.6986199 L5.15856569,9.6986199 C5.53348723,9.6986199 5.86461934,9.50543097 6.04882365,9.21709788 L4.60367807,9.21709788 C4.02529131,9.21709788 3.52369782,8.91519597 3.52369782,8.36238356 C3.52369782,7.80957115 4.0252913,7.50766918 4.60367806,7.50766918 L6.04871408,7.50766918 C5.86434526,7.21926535 5.53299573,7.02614715 5.15856569,7.02614715 L2.01022357,7.02614715 C1.43706212,7.02614715 0.966239961,7.4776447 0.966239961,8.03036154 L0.966239961,8.69440552 C0.966239961,9.24743504 1.43790694,9.6986199 2.01022357,9.6986199 Z M2.01022357,9.6986199'), 'fill': new templates.Attribute('#3F484B'), 'transform': new templates.Attribute('translate(7.773442, 8.362384) rotate(-45.000000) translate(-7.773442, -8.362384) ')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:link:add').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Added a link')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('contact-info-added')}, [new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'links'], new expressions.ExpressionMeta('each story.meta.links as #link', 'each', void 0, '#link')), [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:link:icon-link', {}), new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['externalUrl'], [new expressions.AliasPathExpression('#link', ['url'])], void 0, new expressions.ExpressionMeta('externalUrl(#link.url)'))), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.FnExpression(['displayUrl'], [new expressions.AliasPathExpression('#link', ['url'])], void 0, new expressions.ExpressionMeta('displayUrl(#link.url)')))], void 0, false)], void 0, false)])], void 0, false)]))})]);
  views.register('profile-story:link:remove').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Removed a link')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('contact-info-removed')}, [new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'links'], new expressions.ExpressionMeta('each story.meta.links as #link', 'each', void 0, '#link')), [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:link:icon-link', {}), new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['externalUrl'], [new expressions.AliasPathExpression('#link', ['url'])], void 0, new expressions.ExpressionMeta('externalUrl(#link.url)'))), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.FnExpression(['displayUrl'], [new expressions.AliasPathExpression('#link', ['url'])], void 0, new expressions.ExpressionMeta('displayUrl(#link.url)')))], void 0, false)], void 0, false)])], void 0, false)]))})]);
  views.register('profile-story:file:icon-paperclip:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-paperclip')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'fill': new templates.Attribute('#3F484B'), 'd': new templates.Attribute('M3.036,14.696c-0.614,0-1.219-0.284-1.788-0.853l-0.083-0.082c-0.586-0.578-2.305-2.956,0.008-5.391 c1.165-1.226,2.771-2.813,4.471-4.493C6.558,2.976,7.509,2.036,8.455,1.09c1.708-1.707,2.958-1.317,4.894,0.528 c2.288,2.178,2.707,4.322,1.718,5.463c-1.314,1.515-6.285,6.488-6.496,6.699c-0.278,0.279-0.729,0.279-1.008,0 c-0.278-0.278-0.278-0.729,0-1.008c0.051-0.051,5.146-5.148,6.427-6.625c0.294-0.339,0.339-1.629-1.624-3.498 c-1.13-1.076-1.465-1.989-2.902-0.551c-0.948,0.948-1.901,1.89-2.817,2.793C4.954,6.564,3.355,8.144,2.207,9.353 c-1.349,1.421-0.656,2.788-0.041,3.395l0.089,0.088c0.524,0.523,0.952,0.665,1.718-0.102c0.213-0.213,0.656-0.644,1.213-1.185 C6.729,10.05,9.6,7.26,10.18,6.534c0.184-0.23,0.452-0.787,0.196-1.011c-0.353-0.31-1.002,0.315-1.192,0.514 c-2.012,2.112-4.64,4.643-4.666,4.667c-0.283,0.273-0.734,0.265-1.007-0.02c-0.273-0.284-0.265-0.734,0.019-1.007 c0.026-0.025,2.633-2.535,4.622-4.624c1.291-1.356,2.48-1.201,3.162-0.604c0.832,0.727,0.636,2.154-0.021,2.974 c-0.586,0.734-2.847,2.945-5.113,5.146c-0.55,0.536-0.988,0.96-1.199,1.171C4.346,14.378,3.686,14.696,3.036,14.696L3.036,14.696z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:file:add').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Added a file')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('contact-info-added')}, [new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'files'], new expressions.ExpressionMeta('each story.meta.files as #file', 'each', void 0, '#file')), [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:file:icon-paperclip', {}), new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.AliasPathExpression('#file', ['id']), new expressions.LiteralExpression('fileName'), new expressions.AliasPathExpression('#file', ['name'])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', {\'accountId\': #root._session.accountId, \'userId\': #root._session.userId, \'fileId\': #file.id, \'fileName\': #file.name})'))), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.AliasPathExpression('#file', ['name'], new expressions.ExpressionMeta('#file.name')))], void 0, false)], void 0, false)])], void 0, false)]))})]);
  views.register('profile-story:file:remove').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Removed a file')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('contact-info-removed')}, [new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'files'], new expressions.ExpressionMeta('each story.meta.files as #file', 'each', void 0, '#file')), [new templates.Element('li', void 0, [new templates.ViewInstance('profile-story:file:icon-paperclip', {}), new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.AliasPathExpression('#file', ['id']), new expressions.LiteralExpression('fileName'), new expressions.AliasPathExpression('#file', ['name'])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', {\'accountId\': #root._session.accountId, \'userId\': #root._session.userId, \'fileId\': #file.id, \'fileName\': #file.name})'))), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.AliasPathExpression('#file', ['name'], new expressions.ExpressionMeta('#file.name')))], void 0, false)], void 0, false)])], void 0, false)]))})]);
  views.register('profile-story:email:icon-clock:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-clock')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.10709589,7.92869178 C0.10709589,12.2866096 3.6400274,15.8191027 7.99750685,15.8191027 C12.3547671,15.8191027 15.8879178,12.2866096 15.8879178,7.92869178 C15.8879178,3.57077397 12.3547671,0.0382808219 7.99750685,0.0382808219 C3.6400274,0.0382808219 0.10709589,3.57077397 0.10709589,7.92869178 Z M2.07969863,7.92869178 C2.07969863,4.66578767 4.73460274,2.01088356 7.99750685,2.01088356 C11.2606301,2.01088356 13.9153151,4.66578767 13.9153151,7.92869178 C13.9153151,11.1920342 11.2606301,13.8465 7.99750685,13.8465 C4.73460274,13.8465 2.07969863,11.1920342 2.07969863,7.92869178 Z M11.8256712,9.69723973 L8.70457534,7.58874658 L8.70457534,3.96003425 C8.70457534,3.87323973 8.66906849,3.78863699 8.60835616,3.72704795 C8.54720548,3.66589726 8.46238356,3.63082877 8.37580822,3.63082877 L7.51246575,3.63082877 C7.42545205,3.63082877 7.34106849,3.66589726 7.27991781,3.72704795 C7.21876712,3.78863699 7.18369863,3.87323973 7.18369863,3.96003425 L7.18369863,8.24518493 C7.18369863,8.33197945 7.21876712,8.41680137 7.27991781,8.47795205 C7.30468493,8.50271918 7.33339726,8.52332192 7.36473973,8.53888356 L11.0013425,10.9750479 C11.056137,11.0112123 11.1194795,11.0305 11.1836986,11.0305 C11.2071507,11.0305 11.2303836,11.0278699 11.2533973,11.0228288 C11.340411,11.0044178 11.415589,10.9513767 11.4631507,10.8755411 L11.9207945,10.1437055 C12.0146027,9.99378767 11.9725205,9.79608904 11.8256712,9.69723973 Z'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:email:icon-email-sent:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-email-sent')])), 'width': new templates.Attribute('20px'), 'height': new templates.Attribute('20px'), 'viewBox': new templates.Attribute('0 0 20 20')}, [new templates.Element('path', {'d': new templates.Attribute('M10.9474185,16.7024011 L10.2403117,15.9952943 L4.67252514,10.4275078 L6.08673871,9.01329419 L9.90572005,12.8322755 L9.90572005,1.13883975 L11.90572,1.13883975 L11.90572,12.9156724 L12.5771636,12.2442289 C13.5446545,11.2767378 14.3384569,10.4673901 14.9701557,9.80982277 C15.3467765,9.41777911 15.584497,9.16475952 15.6949007,9.04440741 L17.1687157,10.3963945 C17.1370832,10.4308774 17.0750874,10.4976419 16.9812772,10.5974895 C16.8268646,10.7618397 16.6377407,10.9608702 16.4124545,11.1953819 C15.7713305,11.8627604 14.9681732,12.6816463 13.9913772,13.6584424 L11.6545253,15.9952943 Z M10.9474185,16.7024011'), 'id': new templates.Attribute('email-sent'), 'fill': new templates.Attribute('#7D8F95'), 'transform': new templates.Attribute('translate(10.920620, 8.920620) rotate(-135.000000) translate(-10.920620, -8.920620) ')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:email:sent').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Sent email')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-story:email:icon-email-sent', {}), new templates.Element('div', {'class': new templates.Attribute('subject')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'email', 'subject'], new expressions.ExpressionMeta('story.meta.email.subject')))], void 0, false), new templates.Element('br', void 0, null, void 0, false), new templates.Element('div', {'class': new templates.Attribute('body')}, [new templates.Element('p', void 0, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'email', 'body'], new expressions.ExpressionMeta('story.meta.email.body')))], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:email:imported').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Element('div', void 0, [new templates.Text('Imported via Email')], void 0, false)])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('subject')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'email', 'subject'], new expressions.ExpressionMeta('story.meta.email.subject')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-body')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'email', 'body-plain'], new expressions.ExpressionMeta('story.meta.email[\'body-plain\']')))], void 0, false)]))})]);
  views.register('profile-story:email:scheduled').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Scheduled email')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('table', {'class': new templates.Attribute('profile-story-notification-bar')}, [new templates.Element('tbody', void 0, [new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.ViewInstance('profile-story:email:icon-clock', {}), new templates.Element('span', void 0, [new templates.Text('Scheduled to send on:  ')], void 0, false), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['story', 'meta', 'email', 'delayUntil']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('timeDayDate')], void 0, new expressions.ExpressionMeta('formatTime(story.meta.email.delayUntil, #root._session.timezoneName, \'timeDayDate\')')))], void 0, false)], void 0, false), new templates.Element('td', void 0, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['cancelScheduledEmail'], [new expressions.PathExpression(['story'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.ViewInstance('profile-story:email:icon-email-sent', {}), new templates.Element('div', {'class': new templates.Attribute('subject')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'email', 'subject'], new expressions.ExpressionMeta('story.meta.email.subject')))], void 0, false), new templates.Element('br', void 0, null, void 0, false), new templates.Element('div', {'class': new templates.Attribute('body')}, [new templates.Element('p', void 0, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'email', 'body'], new expressions.ExpressionMeta('story.meta.email.body')))], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:resume:imported').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Imported data from a resume')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('contact-info added')}, [new templates.Element('li', void 0, [new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.PathExpression(['story', 'meta', 'file', 'id']), new expressions.LiteralExpression('fileName'), new expressions.PathExpression(['story', 'meta', 'file', 'name'])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', {\'accountId\': #root._session.accountId, \'userId\': #root._session.userId, \'fileId\': story.meta.file.id, \'fileName\': story.meta.file.name})'))), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'file', 'name'], new expressions.ExpressionMeta('story.meta.file.name')))], void 0, false)], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:linkedin:imported').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Imported data from '), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'source'], new expressions.ExpressionMeta('if story.meta.source', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'source'], new expressions.ExpressionMeta('story.meta.source')))],
    [new templates.Text(' an external source')]
  ])])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('contact-info-added')}, [new templates.Element('li', void 0, [new templates.Element('a', {'class': new templates.Attribute('content-link'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['externalUrl'], [new expressions.PathExpression(['story', 'meta', 'url'])], void 0, new expressions.ExpressionMeta('externalUrl(story.meta.url)'))), 'target': new templates.Attribute('_blank')}, [new templates.DynamicText(new expressions.FnExpression(['displayUrl'], [new expressions.PathExpression(['story', 'meta', 'url'])], void 0, new expressions.ExpressionMeta('displayUrl(story.meta.url)')))], void 0, false)], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:snooze:icon-snooze:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-snooze')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#7D8F95'), 'd': new templates.Attribute('M5.07559127,1.51768124 C5.18671943,1.62854806 5.27954989,1.75246298 5.3545156,1.88688555 L0.888976184,6.34192319 C0.754236749,6.26713378 0.630029722,6.17452163 0.518901561,6.06365482 C-0.377179046,5.16968155 -0.08354615,3.42732233 1.17474903,2.17198633 C2.43304421,0.916650329 4.17951066,0.62370798 5.07559127,1.51768124 Z M7.95937135,12.6343148 C10.2404202,12.6343148 12.0895754,10.7895083 12.0895754,8.51382388 C12.0895754,6.23813948 10.2404202,4.39333298 7.95937135,4.39333298 C5.67832253,4.39333298 3.8291673,6.23813948 3.8291673,8.51382388 C3.8291673,10.7895083 5.67832253,12.6343148 7.95937135,12.6343148 Z M15.4810984,6.06365482 C15.3699703,6.17452163 15.2457633,6.26713378 15.1110238,6.34192319 L10.6454844,1.88688555 C10.7204501,1.75246298 10.8132806,1.62854806 10.9244087,1.51768124 C11.8204893,0.62370798 13.5669558,0.916650329 14.825251,2.17198633 C16.0835462,3.42732233 16.377179,5.16968155 15.4810984,6.06365482 Z M7.95937135,14.4656441 C6.87006693,14.4656441 5.84895009,14.1743851 4.96998135,13.6656603 L3.90132048,14.731808 C3.54288827,15.0893973 2.96175481,15.0893973 2.60332257,14.7318081 C2.24489033,14.3742188 2.24489031,13.794452 2.60332252,13.4368627 L3.53540821,12.506969 C2.57718692,11.4510013 1.99352105,10.0504136 1.99352105,8.51382388 C1.99352105,5.22672419 4.66452305,2.56200369 7.95937135,2.56200369 C11.2542197,2.56200369 13.9252216,5.22672419 13.9252216,8.51382388 C13.9252216,10.0137487 13.3690774,11.3840845 12.4512852,12.4307929 L13.4597264,13.4368627 C13.8181586,13.794452 13.8181586,14.3742188 13.4597264,14.7318081 C13.1012941,15.0893973 12.5201607,15.0893973 12.1617285,14.731808 L11.0394053,13.6121241 C10.1403093,14.1538999 9.08633204,14.4656441 7.95937135,14.4656441 Z M7.38618005,8.53126085 L7.38618005,6.36415805 C7.38618005,6.11130424 7.59164176,5.90632573 7.84509162,5.90632573 C8.09854147,5.90632573 8.30400318,6.11130424 8.30400318,6.36415805 L8.30400318,8.238968 L10.0566159,9.02858351 C10.2874619,9.13296513 10.389782,9.40428072 10.2851544,9.63458383 C10.1805267,9.86488695 9.90857152,9.96696649 9.67772551,9.86258487 L7.65564645,8.94826153 C7.49157247,8.87407222 7.38618005,8.71097689 7.38618005,8.53126085 Z M7.38618005,8.53126085')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:snooze:create').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Snoozed candidate for '), new templates.DynamicText(new expressions.FnExpression(['duration'], [new expressions.PathExpression(['story', 'createdAt']), new expressions.PathExpression(['story', 'meta', 'snooze', 'expiresAt'])], void 0, new expressions.ExpressionMeta('duration(story.createdAt, story.meta.snooze.expiresAt)')))])), 'body': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-story:snooze:icon-snooze', {}), new templates.Element('div', void 0, [new templates.Text('Snoozed until '), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['story', 'meta', 'snooze', 'expiresAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('compactDate')], void 0, new expressions.ExpressionMeta('formatTime(story.meta.snooze.expiresAt, #root._session.timezoneName, \'compactDate\')')))], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'snooze', 'note'], new expressions.ExpressionMeta('if story.meta.snooze.note', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('snooze-note profile-story-comment')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'snooze', 'note'], new expressions.ExpressionMeta('story.meta.snooze.note')))], void 0, false)]
  ])]))})]);
  views.register('profile-story:snooze:cancel').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Canceled snooze')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-story:snooze:icon-snooze', {}), new templates.Element('div', void 0, [new templates.Text('Snoozed scheduled for '), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['story', 'meta', 'snooze', 'expiresAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('compactDate')], void 0, new expressions.ExpressionMeta('formatTime(story.meta.snooze.expiresAt, #root._session.timezoneName, \'compactDate\')')))], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'snooze', 'note'], new expressions.ExpressionMeta('if story.meta.snooze.note', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('snooze-note profile-story-comment')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'snooze', 'note'], new expressions.ExpressionMeta('story.meta.snooze.note')))], void 0, false)]
  ])]))})]);
  views.register('profile-story:snooze:complete').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Snooze completed')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-story:snooze:icon-snooze', {}), new templates.Element('div', void 0, [new templates.Text('Completed on '), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['story', 'meta', 'snooze', 'completedAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('compactDate')], void 0, new expressions.ExpressionMeta('formatTime(story.meta.snooze.completedAt, #root._session.timezoneName, \'compactDate\')')))], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'snooze', 'note'], new expressions.ExpressionMeta('if story.meta.snooze.note', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('snooze-note profile-story-comment')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'snooze', 'note'], new expressions.ExpressionMeta('story.meta.snooze.note')))], void 0, false)]
  ])]))})]);
  views.register('profile-story:archiving:icon-history-progress:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-history-progress')])), 'width': new templates.Attribute('40px'), 'height': new templates.Attribute('40px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M2.89042847,4.52415899 C4.23573121,2.63796976 6.72643398,4.78178845e-07 10.1344804,0 C15.4388974,-8.2309569e-07 15.2936452,3.11180268 22.1251496,3.11180215 C28.9566541,3.1118017 29.4782579,1.61506862 29.4782579,1.61506862 L40,17.2323741 C40,17.2323741 37.1301,19.857009 33.9880855,19.857009 C30.8460711,19.857009 24.8437331,16.9137768 21.4767708,16.9137768 C18.6204707,16.9137768 15.7302266,18.5187629 13.7574077,20.5503649 L24.7197658,37.0977823 C25.297401,37.9697089 25.0419832,39.1339095 24.1492743,39.6980973 C23.2565653,40.262285 22.0646159,40.0128134 21.4869807,39.1408869 L0.309098615,7.17338001 C-0.268536584,6.30145348 -0.0131188478,5.13725283 0.879590095,4.57306508 C1.50780285,4.17603765 2.28420396,4.18194645 2.89042847,4.52415899 Z M2.89042847,4.52415899'), 'fill': new templates.Attribute('#809096')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:archiving:create').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Archived the candidate')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-story:archiving:icon-history-progress', {}), new templates.Element('div', {'class': new templates.Attribute('stage-text')}, [new templates.Element('span', {'class': new templates.Attribute('stage current')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['archive_reasons']), new expressions.PathExpression(['story', 'meta', 'reason', 'id']), ['text'], new expressions.ExpressionMeta('#root.archive_reasons[story.meta.reason.id].text')))], void 0, false), new templates.Text('and moved into'), new templates.Element('span', {'class': new templates.Attribute('stage')}, [new templates.Text('Archive')], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:archiving:remove').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Unarchived the candidate')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-story:archiving:icon-history-progress', {}), new templates.Element('div', {'class': new templates.Attribute('stage-text')}, [new templates.Element('span', {'class': new templates.Attribute('stage current')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'stage', 'text'], new expressions.ExpressionMeta('story.meta.stage.text')))], void 0, false), new templates.Text('from the'), new templates.Element('span', {'class': new templates.Attribute('stage')}, [new templates.Text('Archive')], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:owner:change').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Changed owner')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('span', {'class': new templates.Attribute('owner-change current')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['story', 'meta', 'to', 'id']), ['name'], new expressions.ExpressionMeta('#root.users_base[story.meta.to.id].name'))), new templates.Text(' became the owner')], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'from', 'id'], new expressions.ExpressionMeta('if story.meta.from.id', 'if'))], [
    [new templates.Element('span', {'class': new templates.Attribute('owner-change')}, [new templates.Text(' instead of '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['story', 'meta', 'from', 'id']), ['name'], new expressions.ExpressionMeta('#root.users_base[story.meta.from.id].name')))], void 0, false)]
  ])]))})]);
  views.register('profile-story:card:create').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Added form - '), new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'card', 'text'], new expressions.ExpressionMeta('story.meta.card.text')))])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['story', 'meta', 'card', 'type']), new expressions.LiteralExpression('note')], void 0, new expressions.ExpressionMeta('if story.meta.card.type === \'note\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', void 0, [], void 0, false)],
    []
  ])], void 0, false)]))})]);
  views.register('profile-story:card:update').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Updated form - '), new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'card', 'text'], new expressions.ExpressionMeta('story.meta.card.text')))])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('card')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['story', 'meta', 'card', 'type']), new expressions.LiteralExpression('note')], void 0, new expressions.ExpressionMeta('if story.meta.card.type === \'note\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [],
    []
  ])], void 0, false)]))})]);
  views.register('profile-story:interview:icon-calendar-change:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar-change')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'transform': new templates.Attribute('translate(1.000000, -1.000000)'), 'd': new templates.Attribute('M1.867,2.941H1.064C0.477,2.941,0,3.407,0,3.994v11.895\nc0,0.582,0.482,1.053,1.075,1.053h11.85c0.594,0,1.075-0.466,1.075-1.053V3.994c0-0.582-0.471-1.052-1.064-1.052h-0.803v-2H9.334\nv2H4.667v-2h-2.8V2.941z M13.066,14.871c0,0.591-0.476,1.07-1.076,1.07H2.01c-0.595,0-1.077-0.482-1.077-1.07v-8.86\nc0-0.591,0.476-1.07,1.077-1.07h9.98c0.594,0,1.076,0.482,1.076,1.07V14.871z M11.2,3.941h-0.934v-2H11.2V3.941z M3.733,3.941H2.8\nv-2h0.934V3.941z M3.464,12.684l-1.025,1.089c-0.125,0.134-0.079,0.243,0.105,0.243h2.3c0.183,0.001,0.428-0.116,0.542-0.26\nl0.076-0.096c0.116-0.145,0.105-0.369-0.022-0.502l-1.021-1.064c-0.127-0.132-0.328-0.125-0.447,0.015l-0.064,0.076\nC3.79,12.324,3.589,12.549,3.464,12.684z M11.484,7.686c0.316-0.42,0.293-1.018-0.086-1.396c-0.38-0.379-0.977-0.404-1.389-0.079\nL9.916,6.288c-0.003,0.002-4.875,4.874-4.875,4.874l1.484,1.483l4.873-4.872L11.484,7.686z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:interview:icon-calendar:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.3333333,1.94117647 L5.66666667,1.94117647 L5.66666667,-0.0588235294 L2.86666667,-0.0588235294 L2.86666667,1.94117647 L2.06419881,1.94117647 C1.47645804,1.94117647 1,2.40698152 1,2.99345189 L1,14.8889011 C1,15.4700567 1.48191169,15.9411765 2.0753102,15.9411765 L13.9246898,15.9411765 C14.5185672,15.9411765 15,15.4753714 15,14.8889011 L15,2.99345189 C15,2.41229622 14.5289612,1.94117647 13.9358012,1.94117647 L13.1333333,1.94117647 L13.1333333,-0.0588235294 L10.3333333,-0.0588235294 L10.3333333,1.94117647 Z M1.93333333,6.01135164 C1.93333333,5.42031021 2.40897438,4.94117647 3.01008573,4.94117647 L12.9899143,4.94117647 C13.5845882,4.94117647 14.0666667,5.42349726 14.0666667,6.01135164 L14.0666667,13.8710013 C14.0666667,14.4620427 13.5910256,14.9411765 12.9899143,14.9411765 L3.01008573,14.9411765 C2.4154118,14.9411765 1.93333333,14.4588557 1.93333333,13.8710013 L1.93333333,6.01135164 Z M10.3333333,5.9411763 L10.3333333,7.9411763 L8.4666666,7.9411763 L8.4666666,5.9411763 L10.3333333,5.9411763 Z M13.1333333,5.9411763 L13.1333333,7.9411763 L11.2666666,7.9411763 L11.2666666,5.9411763 L13.1333333,5.9411763 Z M4.73333326,8.9411763 L4.73333326,10.9411763 L2.8666666,10.9411763 L2.8666666,8.9411763 L4.73333326,8.9411763 Z M7.53333326,8.9411763 L7.53333326,10.9411763 L5.6666666,10.9411763 L5.6666666,8.9411763 L7.53333326,8.9411763 Z M10.3333333,8.9411763 L10.3333333,10.9411763 L8.4666666,10.9411763 L8.4666666,8.9411763 L10.3333333,8.9411763 Z M13.1333333,8.9411763 L13.1333333,10.9411763 L11.2666666,10.9411763 L11.2666666,8.9411763 Z M7.53333326,5.9411763 L7.53333326,7.9411763 L5.6666666,7.9411763 L5.6666666,5.9411763 Z M12.2,2.94117647 L11.2666667,2.94117647 L11.2666667,0.941176471 L12.2,0.941176471 L12.2,2.94117647 Z M4.73333333,2.94117647 L3.8,2.94117647 L3.8,0.941176471 L4.73333333,0.941176471 L4.73333333,2.94117647 Z M4.73333326,11.9411772 L4.73333326,13.9411772 L2.8666666,13.9411772 L2.8666666,11.9411772 L4.73333326,11.9411772 Z M7.53333326,11.9411772 L7.53333326,13.9411772 L5.6666666,13.9411772 L5.6666666,11.9411772 L7.53333326,11.9411772 Z M10.3333333,11.9411772 L10.3333333,13.9411772 L8.4666666,13.9411772 L8.4666666,11.9411772 L10.3333333,11.9411772 Z M10.3333333,11.9411772'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-story:interview:create').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Scheduled interview')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('story-interview-create')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.AliasPathExpression('#root', ['$render', 'params']), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.feedback\', #root.$render.params, #root.$render.query)')))}, [new templates.ViewInstance('profile-story:interview:summary', {})], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:interview:cancel').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Canceled interview')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('story-interview-cancel')}, [new templates.ViewInstance('profile-story:interview:summary', {})], void 0, false)]))})]);
  views.register('profile-story:interview:update').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Rescheduled interview')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('story-interview-update')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.AliasPathExpression('#root', ['$render', 'params']), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.feedback\', #root.$render.params, #root.$render.query)')))}, [new templates.Element('table', void 0, [new templates.Element('tbody', void 0, [new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.ViewInstance('profile-story:interview:icon-calendar-change', {}), new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'interview', 'interviewers'], new expressions.ExpressionMeta('each story.meta.interview.interviewers as #interviewer', 'each', void 0, '#interviewer')), [new templates.Element('span', {'class': new templates.Attribute('comma-separated')}, [new templates.DynamicText(new expressions.AliasPathExpression('#interviewer', ['name'], new expressions.ExpressionMeta('#interviewer.name')))], void 0, false)])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['story', 'meta', 'interview', 'date']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('compactDateTime')], void 0, new expressions.ExpressionMeta('formatTime(story.meta.interview.date, #root._session.timezoneName, \'compactDateTime\')')))], void 0, false), new templates.Element('td', {'class': new templates.Attribute('location')}, [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'interview', 'location'], new expressions.ExpressionMeta('story.meta.interview.location')))], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:interview:summary').template = new templates.Template([new templates.Element('table', {'class': new templates.Attribute('profile-story-notification-bar')}, [new templates.Element('tbody', void 0, [new templates.Element('tr', void 0, [new templates.Element('td', void 0, [new templates.ViewInstance('profile-story:interview:icon-calendar', {}), new templates.EachBlock(new expressions.PathExpression(['story', 'meta', 'interview', 'interviewers'], new expressions.ExpressionMeta('each story.meta.interview.interviewers as #interviewer', 'each', void 0, '#interviewer')), [new templates.Element('span', {'class': new templates.Attribute('comma-separated')}, [new templates.DynamicText(new expressions.AliasPathExpression('#interviewer', ['name'], new expressions.ExpressionMeta('#interviewer.name')))], void 0, false)])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['story', 'meta', 'interview', 'date']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('compactDateTime')], void 0, new expressions.ExpressionMeta('formatTime(story.meta.interview.date, #root._session.timezoneName, \'compactDateTime\')')))], void 0, false), new templates.Element('td', {'class': new templates.Attribute('')}, [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'interview', 'location'], new expressions.ExpressionMeta('story.meta.interview.location')))], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('profile-story:posting:applied').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Candidate applied to a posting')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('posting-application-created')}, [new templates.Element('div', {'class': new templates.Attribute('posting-application-title')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['text'], new expressions.ExpressionMeta('#root.postings_base[story.meta.postingId].text')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('posting-application-categories')}, [new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['categories', 'location'], new expressions.ExpressionMeta('if #root.postings_base[story.meta.postingId].categories.location', 'if'))], [
    [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.RelativePathExpression([]), ['text'], new expressions.ExpressionMeta('#root.tags[this].text')))], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['categories', 'commitment'], new expressions.ExpressionMeta('if #root.postings_base[story.meta.postingId].categories.commitment', 'if'))], [
    [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.RelativePathExpression([]), ['text'], new expressions.ExpressionMeta('#root.tags[this].text')))], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['categories', 'team'], new expressions.ExpressionMeta('if #root.postings_base[story.meta.postingId].categories.team', 'if'))], [
    [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.RelativePathExpression([]), ['text'], new expressions.ExpressionMeta('#root.tags[this].text')))], void 0, false)]
  ])], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'meta', 'additional'], new expressions.ExpressionMeta('if story.meta.additional', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('posting-application-additional')}, [new templates.DynamicText(new expressions.PathExpression(['story', 'meta', 'additional'], new expressions.ExpressionMeta('story.meta.additional')))], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('posting-application-owner')}, [new templates.Text('Posting owned by '), new templates.Element('span', {'class': new templates.Attribute('posting-application-owner-name')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['ownerId']), ['name'], new expressions.ExpressionMeta('#root.users_base[#root.postings_base[story.meta.postingId].ownerId].name')))], void 0, false), new templates.Text(' – '), new templates.Element('a', {'href': new templates.DynamicAttribute(new templates.Template([new templates.Text('mailto:'), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['ownerId']), ['email'], new expressions.ExpressionMeta('#root.users_base[#root.postings_base[story.meta.postingId].ownerId].email')))]))}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['ownerId']), ['email'], new expressions.ExpressionMeta('#root.users_base[#root.postings_base[story.meta.postingId].ownerId].email')))], void 0, false)], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:posting:archived').template = new templates.Template([new templates.ViewInstance('profile-story:default', {'title': new templates.ParentWrapper(new templates.Template([new templates.Text('Archived candidate for a posting')])), 'body': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('posting-application-archived')}, [new templates.Element('div', {'class': new templates.Attribute('posting-application-title')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['text'], new expressions.ExpressionMeta('#root.postings_base[story.meta.postingId].text')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('posting-application-categories')}, [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['categories', 'location']), ['text'], new expressions.ExpressionMeta('#root.tags[#root.postings_base[story.meta.postingId].categories.location].text')))], void 0, false), new templates.Element('span', void 0, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['categories', 'commitment']), ['text'], new expressions.ExpressionMeta('#root.tags[#root.postings_base[story.meta.postingId].categories.commitment].text')))], void 0, false), new templates.Element('span', void 0, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['categories', 'team']), ['text'], new expressions.ExpressionMeta('#root.tags[#root.postings_base[story.meta.postingId].categories.team].text')))], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('posting-application-owner')}, [new templates.Text('Posting owned by '), new templates.Element('span', {'class': new templates.Attribute('posting-application-owner-name')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['ownerId']), ['name'], new expressions.ExpressionMeta('#root.users_base[#root.postings_base[story.meta.postingId].ownerId].name')))], void 0, false), new templates.Text(' – '), new templates.Element('a', {'href': new templates.DynamicAttribute(new templates.Template([new templates.Text('mailto:'), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['ownerId']), ['email'], new expressions.ExpressionMeta('#root.users_base[#root.postings_base[story.meta.postingId].ownerId].email')))]))}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['postings_base']), new expressions.PathExpression(['story', 'meta', 'postingId']), ['ownerId']), ['email'], new expressions.ExpressionMeta('#root.users_base[#root.postings_base[story.meta.postingId].ownerId].email')))], void 0, false)], void 0, false)], void 0, false)]))})]);
  views.register('profile-story:index').template = new templates.Template([new templates.Comment('profile-story:index', [new templates.ComponentMarker()]), new templates.DynamicViewInstance(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['story', 'category'], new expressions.ExpressionMeta('story.category'))), new templates.Text(':'), new templates.DynamicText(new expressions.PathExpression(['story', 'action'], new expressions.ExpressionMeta('story.action')))]), {})]);
  views.register('profile-story:default', null, {'attributes': 'title body'}).template = new templates.Template([new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('profile-story '), new templates.DynamicText(new expressions.PathExpression(['story', 'type'], new expressions.ExpressionMeta('story.type'))), new templates.Text(' profile-story-type-'), new templates.DynamicText(new expressions.PathExpression(['story', 'action'], new expressions.ExpressionMeta('story.action'))), new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'visibleTo'], new expressions.ExpressionMeta('if story.visibleTo', 'if'))], [
    [new templates.Text('secret')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('story-header')}, [new templates.Element('div', {'class': new templates.Attribute('story-actor')}, [new templates.ViewInstance('l-identicon', {'class': 'large has-tip', 'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['story', 'user', 'id']), void 0, new expressions.ExpressionMeta('#root.users_base[story.user.id]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['story', 'user', 'id']), void 0, new expressions.ExpressionMeta('#root.users_base[story.user.id]')))}), new templates.Element('div', {'class': new templates.Attribute('actor-name')}, [new templates.Text(' '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['story', 'user', 'id']), ['name'], new expressions.ExpressionMeta('#root.users_base[story.user.id].name')))], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('story-title')}, [new templates.DynamicText(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('story-info')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('||', [new expressions.AliasPathExpression('#root', ['_session', 'hasAccess', 'admin']), new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.PathExpression(['story', 'user', 'id'])])], void 0, new expressions.ExpressionMeta('if #root._session.hasAccess.admin || #root._session.userId === story.user.id', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('story-edit')}, [new templates.Element('div', {'class': new templates.Attribute('story-delete')}, [new templates.Element('a', {'class': new templates.Attribute('story-settings-label has-icon link'), 'data-type': new templates.Attribute('story'), 'data-id': new templates.DynamicAttribute(new expressions.PathExpression(['story', 'id'], new expressions.ExpressionMeta('story.id'))), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {}), new templates.Text('Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['parent', 'deleteConfirmPopup', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('story-hide '), new templates.ConditionalBlock([new expressions.OperatorExpression('!==', [new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.PathExpression(['story', 'user', 'id'])], void 0, new expressions.ExpressionMeta('if #root._session.userId !== story.user.id', 'if'))], [
      [new templates.Text('story-hide')]
    ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.PathExpression(['story', 'visibleTo'], new expressions.ExpressionMeta('if story.visibleTo', 'if'))], [
      [new templates.Text('active')]
    ])]))}, [new templates.ConditionalBlock([new expressions.PathExpression(['story', 'visibleTo'], new expressions.ExpressionMeta('if story.visibleTo', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('div', {'class': new templates.Attribute('secret-wrapper has-tip'), 'title': new templates.DynamicAttribute(new templates.Template([new templates.Text('Visible only to '), new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.PathExpression(['story', 'user', 'id']), ['name'], new expressions.ExpressionMeta('#root.users_base[story.user.id].name'))), new templates.Text(' and admins')]))}, [new templates.Element('span', {'class': new templates.Attribute('story-settings-label')}, [new templates.Text('Secret')], void 0, false), new templates.ViewInstance('profile-story:icon-secret', {})], void 0, false)],
      [new templates.ViewInstance('profile-story:icon-secret', {'class': 'has-tip', 'title': 'Make secret'})]
    ])], [new templates.ElementOn('click', new expressions.FnExpression(['hide'], [new expressions.PathExpression(['story'])]))], false)], void 0, false)],
    [new templates.Element('div', {'class': new templates.Attribute('story-edit')}, [], void 0, false)]
  ]), new templates.Element('span', {'class': new templates.Attribute('story-time')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['story', 'occurredAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('timeDayDate')], void 0, new expressions.ExpressionMeta('formatTime(story.occurredAt, #root._session.timezoneName, \'timeDayDate\')')))], void 0, false)], void 0, false), new templates.Text(' ')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('story-content')}, [new templates.DynamicText(new expressions.AttributePathExpression('body', [], new expressions.ExpressionMeta('@body')))], void 0, false)], void 0, false)]);
  views.register('profile-tags-sources:icon-source:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-source')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8,0 C12.4182782,0 16,3.58172178 16,8 C16,8.22438702 15.9907619,8.44661636 15.9726454,8.66632846 C15.9906359,8.77401137 16,8.88460994 16,8.9973917 L16,14.0026083 C16,15.1041422 15.1057373,16 14.0026083,16 L8.9973917,16 C8.88466474,16 8.77409177,15.9906346 8.66641248,15.9726385 C8.44667302,15.9907596 8.22441562,16 8,16 C3.58172178,16 0,12.4182782 0,8 C0,3.58172178 3.58172178,0 8,0 Z M12,8 C12,5.79086089 10.2091391,4 8,4 C5.79086089,4 4,5.79086089 4,8 C4,10.2091391 5.79086089,12 8,12 C10.2091391,12 12,10.2091391 12,8 Z M12,8'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-tags-sources:icon-tag:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-tag')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8.57543251,0.570992566 C9.33518071,-0.188997532 10.5632763,-0.190232657 11.319981,0.56671304 L15.4317057,4.6797468 C16.193772,5.44205578 16.186495,6.66585997 15.4274275,7.42516918 L8.58346121,14.2713145 C8.53876079,14.3160292 8.49243912,14.3581173 8.44468758,14.397579 C7.55790567,15.3814977 6.27370542,16 4.84509211,16 C2.1692215,16 -5.5067062e-14,13.8300878 -5.5067062e-14,11.1533652 C-5.5067062e-14,9.71244038 0.628607895,8.41838161 1.62646849,7.53062665 C1.65970295,7.49177765 1.69470286,7.45391301 1.73146623,7.41713792 L8.57543251,0.570992566 Z M6.46898462,11.4441633 C6.46898462,10.3734743 5.60129602,9.50550942 4.53094777,9.50550942 C3.46059953,9.50550942 2.59291093,10.3734743 2.59291093,11.4441633 C2.59291093,12.5148524 3.46059953,13.3828172 4.53094777,13.3828172 C5.60129602,13.3828172 6.46898462,12.5148524 6.46898462,11.4441633 Z M6.46898462,11.4441633'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-tags-sources:icon-cards:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-cards')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,2.7 C0,3.52842717 0.671572834,4.2 1.5,4.2 C2.32842717,4.2 3,3.52842717 3,2.7 C3,1.87157283 2.32842717,1.2 1.5,1.2 C0.671572834,1.2 0,1.87157283 0,2.7 Z M5,2.7 C5,2.15 5.45,1.7 6,1.7 L15,1.7 C15.55,1.7 16,2.15 16,2.7 C16,3.25 15.55,3.7 15,3.7 L6,3.7 C5.45,3.7 5,3.25 5,2.7 Z M0,7.7 C0,8.52842717 0.671572834,9.2 1.5,9.2 C2.32842717,9.2 3,8.52842717 3,7.7 C3,6.87157283 2.32842717,6.2 1.5,6.2 C0.671572834,6.2 0,6.87157283 0,7.7 Z M5,7.7 C5,7.15 5.45,6.7 6,6.7 L15,6.7 C15.55,6.7 16,7.15 16,7.7 C16,8.25 15.55,8.7 15,8.7 L6,8.7 C5.45,8.7 5,8.25 5,7.7 Z M1.5,11.2 C0.671572834,11.2 0,11.8715728 0,12.7 C0,13.5284272 0.671572834,14.2 1.5,14.2 C2.32842717,14.2 3,13.5284272 3,12.7 C3,11.8715728 2.32842717,11.2 1.5,11.2 Z M6,13.7 C5.45,13.7 5,13.25 5,12.7 C5,12.15 5.45,11.7 6,11.7 L15,11.7 C15.55,11.7 16,12.15 16,12.7 C16,13.25 15.55,13.7 15,13.7 L6,13.7 Z M6,13.7'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('profile-tags-sources:index').template = new templates.Template([new templates.Comment('profile-tags-sources:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('indented-icon-column content-sub-section')}, [new templates.ViewInstance('profile-tags-sources:icon-tag', {'class': 'icon-column'}), new templates.ViewInstance('profile-tags-sources:tags', {})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('indented-icon-column content-sub-section profile-sources')}, [new templates.ViewInstance('profile-tags-sources:icon-source', {'class': 'icon-column'}), new templates.ConditionalBlock([new expressions.PathExpression(['referralCards'], new expressions.ExpressionMeta('if referralCards', 'if'))], [
    [new templates.ViewInstance('profile-tags-sources:source-cards', {})]
  ]), new templates.ViewInstance('profile-tags-sources:sources', {}), new templates.ViewInstance('l-popup', {'within': true, 'class': 'referral-delete-popup', 'content': new templates.Template([new templates.Element('div', {'class': new templates.Attribute('cards')}, [new templates.Element('p', {'class': new templates.Attribute('larger white')}, [new templates.Text('Also remove the referral form'), new templates.ConditionalBlock([new expressions.OperatorExpression('>', [new expressions.PathExpression(['data', 'referralCards', 'length']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('if data.referralCards.length > 1', 'if'))], [
    [new templates.Text('s')]
  ]), new templates.Text('?')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('source-card-summaries')}, [new templates.EachBlock(new expressions.PathExpression(['data', 'referralCards'], new expressions.ExpressionMeta('each data.referralCards as #card', 'each', void 0, '#card')), [new templates.ViewInstance('l-card', {'card': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#card', [], new expressions.ExpressionMeta('#card'))), new expressions.AliasPathExpression('#card', [], new expressions.ExpressionMeta('#card'))), 'layout': 'summary'})])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['referralDeletePopup', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Keep form'), new templates.ConditionalBlock([new expressions.OperatorExpression('>', [new expressions.PathExpression(['data', 'referralCards', 'length']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('if data.referralCards.length > 1', 'if'))], [
    [new templates.Text('s')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['dontDeleteReferralCards'], [new expressions.PathExpression(['data', 'source'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('dark-button'), 'href': new templates.Attribute('#')}, [new templates.Text('Remove'), new templates.ConditionalBlock([new expressions.OperatorExpression('>', [new expressions.PathExpression(['data', 'referralCards', 'length']), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('if data.referralCards.length > 1', 'if'))], [
    [new templates.Text(' all')]
  ])], [new templates.ElementOn('click', new expressions.FnExpression(['deleteReferralCards'], [new expressions.PathExpression(['data', 'source'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])}, [new templates.MarkupAs(['referralDeletePopup'])])], void 0, false)]);
  views.register('profile-tags-sources:tags').template = new templates.Template([new templates.ViewInstance('l-multi-suggest', {'inherit': true, 'placeholder': 'Add tag', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile', 'tagIds'], new expressions.ExpressionMeta('profile.tagIds'))), new expressions.PathExpression(['profile', 'tagIds'], new expressions.ExpressionMeta('profile.tagIds'))), 'hiddenIds': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['applicationTagIds'], new expressions.ExpressionMeta('applicationTagIds'))), new expressions.PathExpression(['applicationTagIds'], new expressions.ExpressionMeta('applicationTagIds'))), 'filter': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), 'sort': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), 'class': 'tags', 'label': new templates.Template([new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['class']), new expressions.LiteralExpression('referral')], void 0, new expressions.ExpressionMeta('if #item.class === \'referral\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'title': new templates.Attribute('See details'), 'tabindex': new templates.Attribute('-1'), 'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))], void 0, false)],
    [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))]
  ])]), 'prepend': new templates.Template([new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'count'], new expressions.ExpressionMeta('#result.option.count')))], void 0, false)])}, [new templates.MarkupAs(['tagsSuggest'])])]);
  views.register('profile-tags-sources:source-cards').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('source-card-summaries')}, [new templates.EachBlock(new expressions.PathExpression(['referralCards'], new expressions.ExpressionMeta('each referralCards as #card', 'each', void 0, '#card')), [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.AliasPathExpression('#root', ['$render', 'params']), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.feedback\', #root.$render.params, #root.$render.query)')))}, [new templates.ViewInstance('l-card', {'card': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#card', [], new expressions.ExpressionMeta('#card'))), new expressions.AliasPathExpression('#card', [], new expressions.ExpressionMeta('#card'))), 'layout': 'summary'})], void 0, false)])], void 0, false)]);
  views.register('profile-tags-sources:sources').template = new templates.Template([new templates.ViewInstance('l-multi-suggest', {'inherit': true, 'placeholder': 'Add source', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['sources'], new expressions.ExpressionMeta('#root.sources'))), new expressions.AliasPathExpression('#root', ['sources'], new expressions.ExpressionMeta('#root.sources'))), 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profile', 'sourceIds'], new expressions.ExpressionMeta('profile.sourceIds'))), new expressions.PathExpression(['profile', 'sourceIds'], new expressions.ExpressionMeta('profile.sourceIds'))), 'filter': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), 'sort': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), 'class': 'sources tags', 'label': new templates.Template([new templates.ConditionalBlock([new expressions.AliasPathExpression('#item', ['referral'], new expressions.ExpressionMeta('if #item.referral', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.Attribute('has-tip'), 'title': new templates.Attribute('See details'), 'tabindex': new templates.Attribute('-1'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.feedback'), new expressions.AliasPathExpression('#root', ['$render', 'params']), new expressions.AliasPathExpression('#root', ['$render', 'query'])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.feedback\', #root.$render.params, #root.$render.query)')))}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text'))), new templates.ViewInstance('profile-tags-sources:icon-cards', {})], void 0, false)],
    [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))]
  ])]), 'prepend': new templates.Template([new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'count'], new expressions.ExpressionMeta('#result.option.count')))], void 0, false)])}, [new templates.MarkupAs(['sourcesSuggest'])])]);
  views.register('score-summary:index').template = new templates.Template([new templates.Comment('score-summary:index', [new templates.ComponentMarker()]), new templates.ConditionalBlock([new expressions.PathExpression(['scoresByStage'], new expressions.ExpressionMeta('if scoresByStage', 'if'))], [
    [new templates.Element('table', {'class': new templates.Attribute('feedback-summary')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['scoresByStage'], new expressions.ExpressionMeta('each scoresByStage as #group', 'each', void 0, '#group')), [new templates.Element('tr', {'class': new templates.Attribute('feedback-summary-stage')}, [new templates.Element('td', {'class': new templates.Attribute('feedback-summary-stage-title')}, [new templates.DynamicText(new expressions.AliasPathExpression('#group', ['text'], new expressions.ExpressionMeta('#group.text')))], void 0, false), new templates.Element('td', {'class': new templates.Attribute('feedback-summary-stage-scores')}, [new templates.EachBlock(new expressions.AliasPathExpression('#group', ['scores'], new expressions.ExpressionMeta('each #group.scores as #score', 'each', void 0, '#score')), [new templates.Element('div', {'class': new templates.Attribute('card-callout')}, [new templates.Block(new expressions.AliasPathExpression('#score', ['field'], new expressions.ExpressionMeta('with #score.field as #field', 'with', void 0, '#field')), [new templates.DynamicViewInstance(new templates.Template([new templates.Text('l-card:fields:'), new templates.DynamicText(new expressions.AliasPathExpression('#field', ['type'], new expressions.ExpressionMeta('#field.type'))), new templates.Text(':callout')]), {})]), new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#score', ['userId']), void 0, new expressions.ExpressionMeta('#root.users_base[#score.userId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#score', ['userId']), void 0, new expressions.ExpressionMeta('#root.users_base[#score.userId]'))), 'class': 'has-tip'})], void 0, false)])], void 0, false)], void 0, false)])], void 0, false)], void 0, false)]
  ])]);
  views.register('search-box:index').template = new templates.Template([new templates.Comment('search-box:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('header-search-container')}, [new templates.ViewInstance('l-suggest', {'class': 'header-search tall-option', 'position': 'none', 'placeholder': 'Search candidates', 'noFocus': true, 'selectOnFocus': true, 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value'))), new expressions.PathExpression(['value'], new expressions.ExpressionMeta('value')))}, [new templates.MarkupAs(['suggest']), new templates.ComponentOn('submit', new expressions.FnExpression(['submit'], [])), new templates.ComponentOn('select', new expressions.FnExpression(['select'], []))])], void 0, false)]);
  views.register('search-box:org').template = new templates.Template([new templates.ViewInstance('icon-resume', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {}), new templates.Text(', '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['duration'], new expressions.ExpressionMeta('#result.duration')))], void 0, false)]);
  views.register('search-box:school').template = new templates.Template([new templates.ViewInstance('icon-resume', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {}), new templates.Text(', '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['duration'], new expressions.ExpressionMeta('#result.duration')))], void 0, false)]);
  views.register('search-box:tag').template = new templates.Template([new templates.ViewInstance('icon-tag', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {})], void 0, false)]);
  views.register('search-box:title').template = new templates.Template([new templates.ViewInstance('icon-resume', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {}), new templates.Text(', '), new templates.DynamicText(new expressions.AliasPathExpression('#result', ['duration'], new expressions.ExpressionMeta('#result.duration')))], void 0, false)]);
  views.register('search-box:position_summary').template = new templates.Template([new templates.ViewInstance('icon-resume', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {})], void 0, false)]);
  views.register('search-box:email').template = new templates.Template([new templates.ViewInstance('icon-mail', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {})], void 0, false, true)]);
  views.register('search-box:degree').template = new templates.Template([new templates.ViewInstance('icon-resume', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {})], void 0, false, true)]);
  views.register('search-box:summary').template = new templates.Template([new templates.ViewInstance('icon-resume', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {})], void 0, false)]);
  views.register('search-box:note').template = new templates.Template([new templates.ViewInstance('icon-note', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {})], void 0, false)]);
  views.register('search-box:card').template = new templates.Template([new templates.ViewInstance('icon-cards', {}), new templates.ViewInstance('search-box:name-fragments', {}), new templates.Element('span', {'class': new templates.Attribute('snippet')}, [new templates.ViewInstance('search-box:fragments', {})], void 0, false)]);
  views.register('search-box:name').template = new templates.Template([new templates.ViewInstance('icon-candidate', {}), new templates.ViewInstance('search-box:name-fragments', {})]);
  views.register('search-box:name-fragments').template = new templates.Template([new templates.Element('span', {'class': new templates.Attribute('name')}, [new templates.EachBlock(new expressions.AliasPathExpression('#result', ['nameFragments'], new expressions.ExpressionMeta('each #result.nameFragments as #fragment', 'each', void 0, '#fragment')), [new templates.ConditionalBlock([new expressions.AliasPathExpression('#fragment', ['highlight'], new expressions.ExpressionMeta('if #fragment.highlight', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('b', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#fragment', ['value'], new expressions.ExpressionMeta('#fragment.value')))], void 0, false)],
    [new templates.DynamicText(new expressions.AliasPathExpression('#fragment', ['value'], new expressions.ExpressionMeta('#fragment.value')))]
  ])])], void 0, false)]);
  views.register('search-box:fragments').template = new templates.Template([new templates.EachBlock(new expressions.AliasPathExpression('#result', ['fragments'], new expressions.ExpressionMeta('each #result.fragments as #fragment', 'each', void 0, '#fragment')), [new templates.ConditionalBlock([new expressions.AliasPathExpression('#fragment', ['highlight'], new expressions.ExpressionMeta('if #fragment.highlight', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('b', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#fragment', ['value'], new expressions.ExpressionMeta('#fragment.value')))], void 0, false)],
    [new templates.DynamicText(new expressions.AliasPathExpression('#fragment', ['value'], new expressions.ExpressionMeta('#fragment.value')))]
  ])])]);
  views.register('select-date-timezone:index').template = new templates.Template([new templates.Comment('select-date-timezone:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('select-date-timezone '), new templates.ConditionalBlock([new expressions.PathExpression(['conflicts', 'text'], new expressions.ExpressionMeta('if conflicts.text', 'if'))], [
    [new templates.Text('conflict')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('select-date dark-input')}, [new templates.ViewInstance('icon-calendar', {}), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['date']), new expressions.PathExpression(['timezone']), new expressions.LiteralExpression('compactDateOrToday')], void 0, new expressions.ExpressionMeta('formatTime(date, timezone, \'compactDateOrToday\')')))], void 0, false), new templates.Element('span', {'class': new templates.Attribute('selected-timezone')}, [new templates.DynamicText(new expressions.FnExpression(['displayTimezoneCompact'], [new expressions.PathExpression(['timezone'])], void 0, new expressions.ExpressionMeta('displayTimezoneCompact(timezone)')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['calendarPopup', 'toggle'], [new expressions.PathExpression(['$element'])]))], false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('select-timezone '), new templates.ConditionalBlock([new expressions.PathExpression(['timezone'], new expressions.ExpressionMeta('if timezone', 'if'))], [
    [new templates.Text('selected')]
  ]), new templates.Text(' has-tip')])), 'title': new templates.Attribute('Select timezone')}, [new templates.ViewInstance('icon-globe', {})], [new templates.ElementOn('click', new expressions.FnExpression(['timezonePopup', 'toggle'], [new expressions.PathExpression(['$element']), new expressions.LiteralExpression('right'), new expressions.LiteralExpression(5)]))], false), new templates.Element('div', {'class': new templates.Attribute('select-date-conflict')}, [new templates.ConditionalBlock([new expressions.PathExpression(['conflicts', 'text'], new expressions.ExpressionMeta('if conflicts.text', 'if'))], [
    [new templates.DynamicText(new expressions.PathExpression(['conflicts', 'text'], new expressions.ExpressionMeta('conflicts.text'))), new templates.Text(' not in this timezone.'), new templates.ConditionalBlock([new expressions.PathExpression(['conflicts', 'timezone'], new expressions.ExpressionMeta('if conflicts.timezone', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Change to '), new templates.DynamicText(new expressions.FnExpression(['displayTimezoneCompact'], [new expressions.RelativePathExpression([])], void 0, new expressions.ExpressionMeta('displayTimezoneCompact(this)')))], [new templates.ElementOn('click', new expressions.FnExpression(['setTimezone'], [new expressions.RelativePathExpression([])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
      [new templates.Text(' Change to'), new templates.EachBlock(new expressions.PathExpression(['conflicts', 'timezones'], new expressions.ExpressionMeta('each conflicts.timezones', 'each')), [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.FnExpression(['displayTimezoneCompact'], [new expressions.RelativePathExpression([])], void 0, new expressions.ExpressionMeta('displayTimezoneCompact(this)')))], [new templates.ElementOn('click', new expressions.FnExpression(['setTimezone'], [new expressions.RelativePathExpression([])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)])]
    ])]
  ])], void 0, false), new templates.ViewInstance('l-popup', {'class': 'darker', 'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('l-calendar', {'class': 'dark-calendar', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['date'], new expressions.ExpressionMeta('date'))), new expressions.PathExpression(['date'], new expressions.ExpressionMeta('date'))), 'timezone': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['timezone'], new expressions.ExpressionMeta('timezone'))), new expressions.PathExpression(['timezone'], new expressions.ExpressionMeta('timezone')))}, [new templates.ComponentOn('select', new expressions.FnExpression(['selectDate'], []))])]))}, [new templates.MarkupAs(['calendarPopup'])]), new templates.ViewInstance('l-popup', {'class': 'darker', 'focus': 'input', 'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('l-picker', {'type': 'input', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['timezoneOptions'], new expressions.ExpressionMeta('timezoneOptions'))), new expressions.PathExpression(['timezoneOptions'], new expressions.ExpressionMeta('timezoneOptions')))}, [new templates.ComponentOn('select', new expressions.FnExpression(['selectTimezone'], []))])]))}, [new templates.MarkupAs(['timezonePopup'])])], void 0, false)]);
  views.register('invite-user:icon-close:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-close')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0 1.6L1.6 0 8 6.4 14.4 0 16 1.6 9.6 8 16 14.4 14.4 16 8 9.6 1.6 16 0 14.4 6.4 8 0 1.6z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('invite-user:index').template = new templates.Template([new templates.Comment('invite-user:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('invite-user')}, [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('response-message '), new templates.ConditionalBlock([new expressions.PathExpression(['responseMessage'], new expressions.ExpressionMeta('unless responseMessage', 'unless'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('dismiss')}, [new templates.ViewInstance('icon-close-large', {})], [new templates.ElementOn('click', new expressions.FnExpression(['_dismiss'], []))], false), new templates.DynamicText(new expressions.PathExpression(['responseMessage'], new expressions.ExpressionMeta('responseMessage')))], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('invite-user-start '), new templates.ConditionalBlock([new expressions.PathExpression(['showForm'], new expressions.ExpressionMeta('if showForm', 'if'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.Element('button', {'class': new templates.Attribute('btn')}, [new templates.Text('Invite users')], [new templates.ElementOn('click', new expressions.FnExpression(['_showForm'], []))], false)], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('invite-user-form '), new templates.ConditionalBlock([new expressions.PathExpression(['showForm'], new expressions.ExpressionMeta('unless showForm', 'unless'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.ViewInstance('invite-user:form', {})], void 0, false)], void 0, false)]);
  views.register('invite-user:form').template = new templates.Template([new templates.Element('div', void 0, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['email'], new expressions.ExpressionMeta('email'))), 'placeholder': new templates.Attribute('Email address')}, null, void 0, false), new templates.ViewInstance('l-dropdown', {'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['accessRoles'], new expressions.ExpressionMeta('accessRoles'))), new expressions.PathExpression(['accessRoles'], new expressions.ExpressionMeta('accessRoles'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['accessRole'], new expressions.ExpressionMeta('accessRole'))), new expressions.PathExpression(['accessRole'], new expressions.ExpressionMeta('accessRole'))), 'prompt': 'Choose role', 'class': 'role-dropdown tall-option caps-option', 'optionContent': new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), new templates.Element('small', void 0, [new templates.Element('br', void 0, null, void 0, false), new templates.DynamicText(new expressions.AliasPathExpression('#option', ['description'], new expressions.ExpressionMeta('#option.description')))], void 0, false)])}), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('invite-limited-tags '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['accessRole']), new expressions.LiteralExpression('limited')], void 0, new expressions.ExpressionMeta('unless accessRole === \'limited\'', 'unless'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.ViewInstance('l-multi-suggest', {'placeholder': 'Add tags user can see', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['tagIds'], new expressions.ExpressionMeta('tagIds'))), new expressions.PathExpression(['tagIds'], new expressions.ExpressionMeta('tagIds'))), 'filter': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), 'sort': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), 'class': 'tags', 'label': new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))]), 'prepend': new templates.Template([new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'count'], new expressions.ExpressionMeta('#result.option.count')))], void 0, false)])}, [new templates.MarkupAs(['tagsSuggest'])])], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['isFormValid'], new expressions.ExpressionMeta('if isFormValid', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.DynamicText(new expressions.PathExpression(['submitButtonText'], new expressions.ExpressionMeta('submitButtonText')))], [new templates.ElementOn('click', new expressions.FnExpression(['_submitInvite'], []))], false)],
    [new templates.Element('button', {'class': new templates.Attribute('submit disabled'), 'disabled': new templates.Attribute(true)}, [new templates.DynamicText(new expressions.PathExpression(['submitButtonText'], new expressions.ExpressionMeta('submitButtonText')))], void 0, false)]
  ])], void 0, false)]);
  views.register('pending-invites:icon-edit:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-edit')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14.5,16 L1.5,16 C1.225,16 1,15.775 1,15.5 L1,14.5 C1,14.225 1.225,14 1.5,14 L14.5,14 C14.775,14 15,14.225 15,14.5 L15,15.5 C15,15.775 14.775,16 14.5,16 Z M6.62946319,12.4853463 C6.80246319,12.2703463 6.78646319,11.9323463 6.59646319,11.7343463 L5.06946319,10.1423463 C4.87846319,9.9443463 4.57846319,9.9543463 4.40046319,10.1633463 L4.30446319,10.2773463 C4.12746319,10.4873463 3.82746319,10.8233463 3.63946319,11.0233463 L2.10546319,12.6533463 C1.91746319,12.8533463 1.98746319,13.0173463 2.26246319,13.0173463 L5.70346319,13.0173463 C5.97746319,13.0193463 6.34446319,12.8433463 6.51546319,12.6283463 L6.62946319,12.4853463 Z M13.434,1.33835995 L13.294,1.45335995 C13.29,1.45635995 6,8.74635995 6,8.74635995 L8.221,10.96636 L15.512,3.67635995 L15.642,3.54635995 C16.115,2.91735995 16.08,2.02335995 15.512,1.45635995 C14.944,0.888359952 14.051,0.852359952 13.434,1.33835995 Z M13.434,1.33835995'), 'fill': new templates.Attribute('#D9D9D9')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('pending-invites:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('pending-invites:index').template = new templates.Template([new templates.Comment('pending-invites:index', [new templates.ComponentMarker()]), new templates.Element('table', {'class': new templates.Attribute('team-access-table')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['invites'], new expressions.ExpressionMeta('each invites as #invite', 'each', void 0, '#invite')), [new templates.Element('tr', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#invite', ['id']), void 0, new expressions.ExpressionMeta('if editing[#invite.id]', 'if'))], [
    [new templates.Text('editing')]
  ]))}, [new templates.Element('td', {'class': new templates.Attribute('team-access-identicon')}, [], void 0, false), new templates.ViewInstance('pending-invites:email', {}), new templates.ViewInstance('pending-invites:access-level', {}), new templates.ViewInstance('pending-invites:tags', {}), new templates.ViewInstance('pending-invites:actions', {})], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('pending-invites:email').template = new templates.Template([new templates.Element('td', {'class': new templates.Attribute('team-access-user')}, [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#invite', ['id']), void 0, new expressions.ExpressionMeta('unless editing[#invite.id]', 'unless'))], [
    [new templates.Text('hidden')]
  ]))}, [new templates.Element('input', {'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#invite', ['id']), ['email'], new expressions.ExpressionMeta('working[#invite.id].email')))}, null, void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#invite', ['userId'], new expressions.ExpressionMeta('if #invite.userId', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#invite', ['id']), void 0, new expressions.ExpressionMeta('if editing[#invite.id]', 'if'))], [
      [new templates.Text('hidden')]
    ])), 'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users']), new expressions.AliasPathExpression('#invite', ['userId']), ['email'], new expressions.ExpressionMeta('#root.users[#invite.userId].email')))], [new templates.ElementOn('click', new expressions.FnExpression(['_edit'], [new expressions.AliasPathExpression('#invite', [])]))], false)],
    [new templates.DynamicText(new expressions.AliasPathExpression('#invite', ['email', 'canonical'], new expressions.ExpressionMeta('#invite.email.canonical')))]
  ])], void 0, false)]);
  views.register('pending-invites:access-level').template = new templates.Template([new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#invite', ['id']), void 0, new expressions.ExpressionMeta('if editing[#invite.id]', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('td', {'class': new templates.Attribute('team-access-level')}, [new templates.ViewInstance('l-dropdown', {'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['accessRoles'], new expressions.ExpressionMeta('accessRoles'))), new expressions.PathExpression(['accessRoles'], new expressions.ExpressionMeta('accessRoles'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#invite', ['id']), ['accessRole'], new expressions.ExpressionMeta('working[#invite.id].accessRole'))), new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#invite', ['id']), ['accessRole'], new expressions.ExpressionMeta('working[#invite.id].accessRole'))), 'prompt': 'Choose role', 'class': 'role-dropdown tall-option caps-option', 'optionContent': new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), new templates.Element('small', void 0, [new templates.Element('br', void 0, null, void 0, false), new templates.DynamicText(new expressions.AliasPathExpression('#option', ['description'], new expressions.ExpressionMeta('#option.description')))], void 0, false)])})], void 0, false)],
    [new templates.Element('td', {'class': new templates.Attribute('team-access-level')}, [new templates.Element('span', {'class': new templates.Attribute('access-level')}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#invite', ['userId'], new expressions.ExpressionMeta('if #invite.userId', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.DynamicText(new expressions.FnExpression(['getUserAccessRole'], [new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users']), new expressions.AliasPathExpression('#invite', ['userId']), ['accessRoles'])], void 0, new expressions.ExpressionMeta('getUserAccessRole(#root.users[#invite.userId].accessRoles)')))],
      [new templates.DynamicText(new expressions.FnExpression(['getUserAccessRole'], [new expressions.AliasPathExpression('#invite', ['accessRoles'])], void 0, new expressions.ExpressionMeta('getUserAccessRole(#invite.accessRoles)')))]
    ])], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#invite', ['userId'], new expressions.ExpressionMeta('if #invite.userId', 'if'))], [
      [new templates.Element('span', {'class': new templates.Attribute('inline-action-link has-icon')}, [new templates.ViewInstance('pending-invites:icon-edit', {'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Edit')]))})], [new templates.ElementOn('click', new expressions.FnExpression(['_edit'], [new expressions.AliasPathExpression('#invite', [])]))], false)]
    ])], void 0, false)]
  ])]);
  views.register('pending-invites:tags').template = new templates.Template([new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#invite', ['id']), void 0, new expressions.ExpressionMeta('if editing[#invite.id]', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-tags '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#invite', ['id']), ['accessRole']), new expressions.LiteralExpression('limited')], void 0, new expressions.ExpressionMeta('if working[#invite.id].accessRole === \'limited\'', 'if'))], [
      [new templates.Text('limited')]
    ])]))}, [new templates.ViewInstance('l-multi-suggest', {'placeholder': 'Add tags', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#invite', ['id']), ['tagIds'], new expressions.ExpressionMeta('working[#invite.id].tagIds'))), new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#invite', ['id']), ['tagIds'], new expressions.ExpressionMeta('working[#invite.id].tagIds'))), 'filter': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), 'sort': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), 'class': 'tags', 'label': new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))]), 'prepend': new templates.Template([new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'count'], new expressions.ExpressionMeta('#result.option.count')))], void 0, false)])}, [new templates.MarkupAs(['tagsSuggest'])])], void 0, false)],
    [new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-tags '), new templates.ConditionalBlock([new expressions.FnExpression(['contains'], [new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users']), new expressions.AliasPathExpression('#invite', ['userId']), ['accessRoles']), new expressions.LiteralExpression('limited')], void 0, new expressions.ExpressionMeta('if contains(#root.users[#invite.userId].accessRoles, \'limited\')', 'if'))], [
      [new templates.Text('limited')]
    ])]))}, [new templates.Element('div', {'class': new templates.Attribute('tags ')}, [new templates.EachBlock(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users']), new expressions.AliasPathExpression('#invite', ['userId']), ['followedTagIds'], new expressions.ExpressionMeta('each #root.users[#invite.userId].followedTagIds as #tagId', 'each', void 0, '#tagId')), [new templates.Element('div', {'class': new templates.Attribute('tag-unit selectable type- ')}, [new templates.Element('div', {'class': new templates.Attribute('tag-title')}, [new templates.Element('a', {'class': new templates.Attribute('tags-link')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.AliasPathExpression('#tagId', []), ['text'], new expressions.ExpressionMeta('#root.tags[#tagId].text')))], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('tag-details countable')}, [new templates.Element('div', {'class': new templates.Attribute('tag-count')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.AliasPathExpression('#tagId', []), ['count'], new expressions.ExpressionMeta('#root.tags[#tagId].count')))], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false)]
  ])]);
  views.register('pending-invites:actions').template = new templates.Template([new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#invite', ['id']), void 0, new expressions.ExpressionMeta('if editing[#invite.id]', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-actions '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#invite', ['id']), ['accessRole']), new expressions.LiteralExpression('limited')], void 0, new expressions.ExpressionMeta('if working[#invite.id].accessRole === \'limited\'', 'if'))], [
      [new templates.Text('limited')]
    ])]))}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['_cancel'], [new expressions.AliasPathExpression('#invite', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('btn submit')}, [new templates.Text('Save Changes')], [new templates.ElementOn('click', new expressions.FnExpression(['_save'], [new expressions.AliasPathExpression('#invite', [])]))], false)], void 0, false)],
    [new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-actions '), new templates.ConditionalBlock([new expressions.FnExpression(['contains'], [new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users']), new expressions.AliasPathExpression('#invite', ['userId']), ['accessRoles']), new expressions.LiteralExpression('limited')], void 0, new expressions.ExpressionMeta('if contains(#root.users[#invite.userId].accessRoles, \'limited\')', 'if'))], [
      [new templates.Text('limited')]
    ])]))}, [new templates.Element('span', {'class': new templates.Attribute('hidden inline-action-link has-icon')}, [], void 0, false)], void 0, false)]
  ])]);
  views.register('team-list:icon-edit:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-edit')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14.5,16 L1.5,16 C1.225,16 1,15.775 1,15.5 L1,14.5 C1,14.225 1.225,14 1.5,14 L14.5,14 C14.775,14 15,14.225 15,14.5 L15,15.5 C15,15.775 14.775,16 14.5,16 Z M6.62946319,12.4853463 C6.80246319,12.2703463 6.78646319,11.9323463 6.59646319,11.7343463 L5.06946319,10.1423463 C4.87846319,9.9443463 4.57846319,9.9543463 4.40046319,10.1633463 L4.30446319,10.2773463 C4.12746319,10.4873463 3.82746319,10.8233463 3.63946319,11.0233463 L2.10546319,12.6533463 C1.91746319,12.8533463 1.98746319,13.0173463 2.26246319,13.0173463 L5.70346319,13.0173463 C5.97746319,13.0193463 6.34446319,12.8433463 6.51546319,12.6283463 L6.62946319,12.4853463 Z M13.434,1.33835995 L13.294,1.45335995 C13.29,1.45635995 6,8.74635995 6,8.74635995 L8.221,10.96636 L15.512,3.67635995 L15.642,3.54635995 C16.115,2.91735995 16.08,2.02335995 15.512,1.45635995 C14.944,0.888359952 14.051,0.852359952 13.434,1.33835995 Z M13.434,1.33835995'), 'fill': new templates.Attribute('#D9D9D9')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('team-list:index').template = new templates.Template([new templates.Comment('team-list:index', [new templates.ComponentMarker()]), new templates.Element('table', {'class': new templates.Attribute('team-access-table')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['members'], new expressions.ExpressionMeta('each members as #user', 'each', void 0, '#user')), [new templates.Element('tr', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#user', ['id']), void 0, new expressions.ExpressionMeta('if editing[#user.id]', 'if'))], [
    [new templates.Text('editing')]
  ]))}, [new templates.Element('td', {'class': new templates.Attribute('team-access-identicon')}, [new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#user', [], new expressions.ExpressionMeta('#user'))), new expressions.AliasPathExpression('#user', [], new expressions.ExpressionMeta('#user'))), 'class': 'has-tip'})], void 0, false), new templates.ViewInstance('team-list:team-list-user', {}), new templates.ViewInstance('team-list:team-list-access-level', {}), new templates.ViewInstance('team-list:team-list-tags', {}), new templates.ViewInstance('team-list:team-list-actions', {})], void 0, false)])], void 0, false)], void 0, false), new templates.Element('h4', void 0, [new templates.Text('Interviewers')], void 0, false), new templates.Element('table', {'class': new templates.Attribute('team-access-table')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['interviewers'], new expressions.ExpressionMeta('each interviewers as #user', 'each', void 0, '#user')), [new templates.Element('tr', void 0, [new templates.Element('td', {'class': new templates.Attribute('team-access-identicon')}, [new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#user', [], new expressions.ExpressionMeta('#user'))), new expressions.AliasPathExpression('#user', [], new expressions.ExpressionMeta('#user'))), 'class': 'has-tip'})], void 0, false), new templates.ViewInstance('team-list:team-list-user', {}), new templates.ViewInstance('team-list:team-list-access-level', {}), new templates.Element('td', {'class': new templates.Attribute('team-access-tags')}, [], void 0, false), new templates.ViewInstance('team-list:team-list-actions', {})], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('team-list:team-list-user').template = new templates.Template([new templates.Element('td', {'class': new templates.Attribute('team-access-user')}, [new templates.Element('div', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#user', ['name'], new expressions.ExpressionMeta('#user.name')))], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#user', ['email'], new expressions.ExpressionMeta('#user.email')))], void 0, false)], void 0, false)]);
  views.register('team-list:team-list-access-level').template = new templates.Template([new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-level '), new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#user', ['id']), void 0, new expressions.ExpressionMeta('unless editing[#user.id]', 'unless'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.ViewInstance('l-dropdown', {'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['accessRoles'], new expressions.ExpressionMeta('accessRoles'))), new expressions.PathExpression(['accessRoles'], new expressions.ExpressionMeta('accessRoles'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#user', ['id']), ['accessRole'], new expressions.ExpressionMeta('working[#user.id].accessRole'))), new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#user', ['id']), ['accessRole'], new expressions.ExpressionMeta('working[#user.id].accessRole'))), 'prompt': 'Choose role', 'buttonClass': 'role-dropdown', 'class': 'tall-option caps-option', 'optionContent': new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text'))), new templates.Element('small', void 0, [new templates.Element('br', void 0, null, void 0, false), new templates.DynamicText(new expressions.AliasPathExpression('#option', ['description'], new expressions.ExpressionMeta('#option.description')))], void 0, false)])})], void 0, false), new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-level '), new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#user', ['id']), void 0, new expressions.ExpressionMeta('if editing[#user.id]', 'if'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.Element('span', {'class': new templates.Attribute('access-level')}, [new templates.DynamicText(new expressions.FnExpression(['userAccessRole'], [new expressions.AliasPathExpression('#user', ['accessRoles'])], void 0, new expressions.ExpressionMeta('userAccessRole(#user.accessRoles)')))], void 0, false), new templates.Element('span', {'class': new templates.Attribute('inline-action-link has-icon')}, [new templates.ViewInstance('team-list:icon-edit', {}), new templates.Text('Edit')], [new templates.ElementOn('click', new expressions.FnExpression(['_edit'], [new expressions.AliasPathExpression('#user', [])]))], false)], void 0, false)]);
  views.register('team-list:team-list-tags').template = new templates.Template([new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#user', ['id']), void 0, new expressions.ExpressionMeta('if editing[#user.id]', 'if'))], [
    [new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-tags '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#user', ['id']), ['accessRole']), new expressions.LiteralExpression('limited')], void 0, new expressions.ExpressionMeta('if working[#user.id].accessRole === \'limited\'', 'if'))], [
      [new templates.Text('limited')]
    ])]))}, [new templates.ViewInstance('l-multi-suggest', {'placeholder': 'Add tags user should see', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#user', ['id']), ['tagIds'], new expressions.ExpressionMeta('working[#user.id].tagIds'))), new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#user', ['id']), ['tagIds'], new expressions.ExpressionMeta('working[#user.id].tagIds'))), 'filter': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), 'sort': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), 'class': 'tags', 'label': new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))]), 'prepend': new templates.Template([new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'count'], new expressions.ExpressionMeta('#result.option.count')))], void 0, false)])})], void 0, false)]
  ]), new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-tags '), new templates.ConditionalBlock([new expressions.FnExpression(['contains'], [new expressions.AliasPathExpression('#user', ['accessRoles']), new expressions.LiteralExpression('limited')], void 0, new expressions.ExpressionMeta('if contains(#user.accessRoles, \'limited\')', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('limited')],
    [new templates.Text('hide-tags')]
  ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#user', ['id']), void 0, new expressions.ExpressionMeta('if editing[#user.id]', 'if'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('tags')}, [new templates.EachBlock(new expressions.AliasPathExpression('#user', ['followedTagIds'], new expressions.ExpressionMeta('each #user.followedTagIds as #tagId', 'each', void 0, '#tagId')), [new templates.Element('div', {'class': new templates.Attribute('tag-unit selectable type- ')}, [new templates.Element('div', {'class': new templates.Attribute('tag-title')}, [new templates.Element('a', {'class': new templates.Attribute('tags-link')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.AliasPathExpression('#tagId', []), ['text'], new expressions.ExpressionMeta('#root.tags[#tagId].text')))], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('tag-details countable')}, [new templates.Element('div', {'class': new templates.Attribute('tag-count')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.AliasPathExpression('#tagId', []), ['count'], new expressions.ExpressionMeta('#root.tags[#tagId].count')))], void 0, false)], void 0, false)], void 0, false)], [])], void 0, false)], void 0, false)]);
  views.register('team-list:team-list-actions').template = new templates.Template([new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-actions '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.BracketsExpression(new expressions.PathExpression(['working']), new expressions.AliasPathExpression('#user', ['id']), ['accessRole']), new expressions.LiteralExpression('limited')], void 0, new expressions.ExpressionMeta('if working[#user.id].accessRole === \'limited\'', 'if'))], [
    [new templates.Text('limited')]
  ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#user', ['id']), void 0, new expressions.ExpressionMeta('unless editing[#user.id]', 'unless'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['_cancel'], [new expressions.AliasPathExpression('#user', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('btn submit')}, [new templates.Text('Save Changes')], [new templates.ElementOn('click', new expressions.FnExpression(['_save'], [new expressions.AliasPathExpression('#user', [])]))], false)], void 0, false), new templates.Element('td', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team-access-actions '), new templates.ConditionalBlock([new expressions.FnExpression(['contains'], [new expressions.AliasPathExpression('#user', ['accessRoles']), new expressions.LiteralExpression('limited')], void 0, new expressions.ExpressionMeta('if contains(#user.accessRoles, \'limited\')', 'if'))], [
    [new templates.Text('limited')]
  ]), new templates.Text(' '), new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['editing']), new expressions.AliasPathExpression('#user', ['id']), void 0, new expressions.ExpressionMeta('if editing[#user.id]', 'if'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.Element('span', {'class': new templates.Attribute('inline-action-link hidden')}, [new templates.Text('Revoke access')], void 0, false)], void 0, false)]);
  views.register('view-toggle:icon-all-list:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-all-list')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#7D8F95'), 'd': new templates.Attribute('M14.8,9.197c-0.59-0.29-1.439-0.98-2.71-1.21\nc0.31-0.37,0.56-0.94,0.83-1.61c0.13-0.41,0.1-0.74,0.1-1.21c0-0.36,0.081-0.91-0.02-1.23c-0.28-1.05-0.98-1.34-1.811-1.34\nc-0.409,0-0.779,0.07-1.089,0.25c0.119,0.22,0.219,0.47,0.299,0.77c0.131,0.44,0.031,1.2,0.031,1.68c0,0.65,0.029,1.1-0.141,1.65\nl-0.271,0.67c0.081,0.14,0.17,0.27,0.271,0.37c-0.17,0.03-0.33,0.07-0.49,0.12c-0.189,0.41-0.39,0.77-0.619,1.04\nc1.699,0.31,2.839,1.259,3.619,1.65c0.42,0.2,0.73,0.41,0.96,0.6h1.351c0.55,0,0.89-0.439,0.89-0.84v-0.199\nC16,10.357,15.99,9.747,14.8,9.197z M11.2,10.797c-0.78-0.391-1.92-1.34-3.62-1.65c0.42-0.5,0.76-1.29,1.109-2.2\nc0.171-0.55,0.141-1,0.141-1.65c0-0.48,0.101-1.24-0.03-1.68c-0.369-1.43-1.31-1.82-2.42-1.82c-1.12,0-2.061,0.39-2.43,1.82\nc-0.11,0.44-0.03,1.21-0.03,1.68c0,0.65-0.03,1.1,0.181,1.65c0.33,0.91,0.649,1.71,1.08,2.2c-1.681,0.33-2.83,1.27-3.58,1.65\nC0,11.547,0,12.387,0,12.387v0.311c0,0.55,0.59,1.1,1.17,1.1h10.45c0.73,0,1.18-0.6,1.18-1.15v-0.26\nC12.8,12.387,12.78,11.547,11.2,10.797z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('view-toggle:icon-mine-list:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-mine-list')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#7D8F95'), 'd': new templates.Attribute('M13.376,10.658c-0.856-0.429-2.099-1.461-3.951-1.802 c0.454-0.551,0.82-1.408,1.206-2.404c0.191-0.604,0.157-1.102,0.157-1.802c0-0.533,0.104-1.355-0.035-1.836 C10.351,1.249,9.319,0.82,8.112,0.82c-1.225,0-2.256,0.429-2.659,1.994C5.331,3.295,5.419,4.135,5.419,4.65 c0,0.7-0.035,1.198,0.192,1.802c0.367,0.997,0.716,1.871,1.189,2.404c-1.837,0.359-3.096,1.39-3.918,1.802 c-1.749,0.821-1.749,1.731-1.749,1.731v0.35c0,0.596,0.647,1.198,1.276,1.198h11.421c0.804,0,1.294-0.656,1.294-1.25V12.39 C15.125,12.39,15.108,11.479,13.376,10.658z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('view-toggle:icon-tag:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-tag')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8.57543251,0.570992566 C9.33518071,-0.188997532 10.5632763,-0.190232657 11.319981,0.56671304 L15.4317057,4.6797468 C16.193772,5.44205578 16.186495,6.66585997 15.4274275,7.42516918 L8.58346121,14.2713145 C8.53876079,14.3160292 8.49243912,14.3581173 8.44468758,14.397579 C7.55790567,15.3814977 6.27370542,16 4.84509211,16 C2.1692215,16 -5.5067062e-14,13.8300878 -5.5067062e-14,11.1533652 C-5.5067062e-14,9.71244038 0.628607895,8.41838161 1.62646849,7.53062665 C1.65970295,7.49177765 1.69470286,7.45391301 1.73146623,7.41713792 L8.57543251,0.570992566 Z M6.46898462,11.4441633 C6.46898462,10.3734743 5.60129602,9.50550942 4.53094777,9.50550942 C3.46059953,9.50550942 2.59291093,10.3734743 2.59291093,11.4441633 C2.59291093,12.5148524 3.46059953,13.3828172 4.53094777,13.3828172 C5.60129602,13.3828172 6.46898462,12.5148524 6.46898462,11.4441633 Z M6.46898462,11.4441633'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('view-toggle:index').template = new templates.Template([new templates.Comment('view-toggle:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('all-mine-control')}, [new templates.EachBlock(new expressions.PathExpression(['options'], new expressions.ExpressionMeta('each options as #option', 'each', void 0, '#option')), [new templates.Element('a', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('all-mine-toggle '), new templates.DynamicText(new expressions.AliasPathExpression('#option', ['class'], new expressions.ExpressionMeta('#option.class')))])), 'href': new templates.DynamicAttribute(new expressions.AliasPathExpression('#option', ['link'], new expressions.ExpressionMeta('#option.link')))}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('icon-'), new templates.DynamicText(new expressions.AliasPathExpression('#option', ['icon'], new expressions.ExpressionMeta('#option.icon')))]), {}), new templates.Element('span', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#option', ['text'], new expressions.ExpressionMeta('#option.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['setDefault'], [new expressions.AliasPathExpression('#option', ['value'])]))], false)])], void 0, false)]);
  views.register('icon-all-list:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-all-list')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#7D8F95'), 'd': new templates.Attribute('M14.8,9.197c-0.59-0.29-1.439-0.98-2.71-1.21\nc0.31-0.37,0.56-0.94,0.83-1.61c0.13-0.41,0.1-0.74,0.1-1.21c0-0.36,0.081-0.91-0.02-1.23c-0.28-1.05-0.98-1.34-1.811-1.34\nc-0.409,0-0.779,0.07-1.089,0.25c0.119,0.22,0.219,0.47,0.299,0.77c0.131,0.44,0.031,1.2,0.031,1.68c0,0.65,0.029,1.1-0.141,1.65\nl-0.271,0.67c0.081,0.14,0.17,0.27,0.271,0.37c-0.17,0.03-0.33,0.07-0.49,0.12c-0.189,0.41-0.39,0.77-0.619,1.04\nc1.699,0.31,2.839,1.259,3.619,1.65c0.42,0.2,0.73,0.41,0.96,0.6h1.351c0.55,0,0.89-0.439,0.89-0.84v-0.199\nC16,10.357,15.99,9.747,14.8,9.197z M11.2,10.797c-0.78-0.391-1.92-1.34-3.62-1.65c0.42-0.5,0.76-1.29,1.109-2.2\nc0.171-0.55,0.141-1,0.141-1.65c0-0.48,0.101-1.24-0.03-1.68c-0.369-1.43-1.31-1.82-2.42-1.82c-1.12,0-2.061,0.39-2.43,1.82\nc-0.11,0.44-0.03,1.21-0.03,1.68c0,0.65-0.03,1.1,0.181,1.65c0.33,0.91,0.649,1.71,1.08,2.2c-1.681,0.33-2.83,1.27-3.58,1.65\nC0,11.547,0,12.387,0,12.387v0.311c0,0.55,0.59,1.1,1.17,1.1h10.45c0.73,0,1.18-0.6,1.18-1.15v-0.26\nC12.8,12.387,12.78,11.547,11.2,10.797z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-archive:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-archive')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13.867,0H2.133L0,5v11h16V5L13.867,0L13.867,0z M2.794,1H7v3 H1.514L2.794,1L2.794,1z M10.104,11.874l-1.896,1.872l-1.896-1.883L4.413,10H6V7h4v3h2L10.104,11.874L10.104,11.874z M9,4V1h4h0.206 l1.28,3H9L9,4z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-bold:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-bold')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M4,4h4.668c1.145,0,1.949,0.287,2.482,0.82c0.363,0.363,0.584,0.844,0.584,1.469\nv0.025c0,1.053-0.598,1.678-1.402,2.028c1.104,0.364,1.807,0.988,1.807,2.225v0.024c0,1.562-1.273,2.511-3.445,2.511H4.001L4,4L4,4\nL4,4z M8.044,7.628c0.767,0,1.195-0.261,1.195-0.793V6.809c0-0.494-0.39-0.779-1.144-0.779H6.456v1.599L8.044,7.628L8.044,7.628\nL8.044,7.628z M8.407,11.073c0.768,0,1.209-0.3,1.209-0.832v-0.025c0-0.493-0.39-0.817-1.234-0.817H6.457v1.676L8.407,11.073\nL8.407,11.073L8.407,11.073z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-calendar:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-calendar')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.3333333,1.94117647 L5.66666667,1.94117647 L5.66666667,-0.0588235294 L2.86666667,-0.0588235294 L2.86666667,1.94117647 L2.06419881,1.94117647 C1.47645804,1.94117647 1,2.40698152 1,2.99345189 L1,14.8889011 C1,15.4700567 1.48191169,15.9411765 2.0753102,15.9411765 L13.9246898,15.9411765 C14.5185672,15.9411765 15,15.4753714 15,14.8889011 L15,2.99345189 C15,2.41229622 14.5289612,1.94117647 13.9358012,1.94117647 L13.1333333,1.94117647 L13.1333333,-0.0588235294 L10.3333333,-0.0588235294 L10.3333333,1.94117647 Z M1.93333333,6.01135164 C1.93333333,5.42031021 2.40897438,4.94117647 3.01008573,4.94117647 L12.9899143,4.94117647 C13.5845882,4.94117647 14.0666667,5.42349726 14.0666667,6.01135164 L14.0666667,13.8710013 C14.0666667,14.4620427 13.5910256,14.9411765 12.9899143,14.9411765 L3.01008573,14.9411765 C2.4154118,14.9411765 1.93333333,14.4588557 1.93333333,13.8710013 L1.93333333,6.01135164 Z M10.3333333,5.9411763 L10.3333333,7.9411763 L8.4666666,7.9411763 L8.4666666,5.9411763 L10.3333333,5.9411763 Z M13.1333333,5.9411763 L13.1333333,7.9411763 L11.2666666,7.9411763 L11.2666666,5.9411763 L13.1333333,5.9411763 Z M4.73333326,8.9411763 L4.73333326,10.9411763 L2.8666666,10.9411763 L2.8666666,8.9411763 L4.73333326,8.9411763 Z M7.53333326,8.9411763 L7.53333326,10.9411763 L5.6666666,10.9411763 L5.6666666,8.9411763 L7.53333326,8.9411763 Z M10.3333333,8.9411763 L10.3333333,10.9411763 L8.4666666,10.9411763 L8.4666666,8.9411763 L10.3333333,8.9411763 Z M13.1333333,8.9411763 L13.1333333,10.9411763 L11.2666666,10.9411763 L11.2666666,8.9411763 Z M7.53333326,5.9411763 L7.53333326,7.9411763 L5.6666666,7.9411763 L5.6666666,5.9411763 Z M12.2,2.94117647 L11.2666667,2.94117647 L11.2666667,0.941176471 L12.2,0.941176471 L12.2,2.94117647 Z M4.73333333,2.94117647 L3.8,2.94117647 L3.8,0.941176471 L4.73333333,0.941176471 L4.73333333,2.94117647 Z M4.73333326,11.9411772 L4.73333326,13.9411772 L2.8666666,13.9411772 L2.8666666,11.9411772 L4.73333326,11.9411772 Z M7.53333326,11.9411772 L7.53333326,13.9411772 L5.6666666,13.9411772 L5.6666666,11.9411772 L7.53333326,11.9411772 Z M10.3333333,11.9411772 L10.3333333,13.9411772 L8.4666666,13.9411772 L8.4666666,11.9411772 L10.3333333,11.9411772 Z M10.3333333,11.9411772'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-candidate:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-candidate')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.0745290309,13.091525 C0.0745290309,13.091525 1.29617492,11.4446243 3.26174032,10.1333507 C4.38955372,11.0829558 5.92145746,11.6666667 7.60891935,11.6666667 C9.46303,11.6666667 11.1293404,10.9619718 12.2781743,9.84151426 C14.511393,11.1852065 15.925471,13.091525 15.925471,13.091525 C15.925471,13.091525 16.7782443,15.0993732 15.3894553,16 L0.847930119,16 C-0.689985834,15.0946703 0.0745290309,13.091525 0.0745290309,13.091525 Z M11.6666667,5.66666667 C11.6666667,8.0599007 9.87580578,10 7.66666667,10 C5.45752756,10 3.66666667,8.0599007 3.66666667,5.66666667 C3.66666667,3.27343263 5.45752756,1.33333333 7.66666667,1.33333333 C9.87580578,1.33333333 11.6666667,3.27343263 11.6666667,5.66666667 Z M11.6666667,5.66666667'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-cards:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-cards')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,2.7 C0,3.52842717 0.671572834,4.2 1.5,4.2 C2.32842717,4.2 3,3.52842717 3,2.7 C3,1.87157283 2.32842717,1.2 1.5,1.2 C0.671572834,1.2 0,1.87157283 0,2.7 Z M5,2.7 C5,2.15 5.45,1.7 6,1.7 L15,1.7 C15.55,1.7 16,2.15 16,2.7 C16,3.25 15.55,3.7 15,3.7 L6,3.7 C5.45,3.7 5,3.25 5,2.7 Z M0,7.7 C0,8.52842717 0.671572834,9.2 1.5,9.2 C2.32842717,9.2 3,8.52842717 3,7.7 C3,6.87157283 2.32842717,6.2 1.5,6.2 C0.671572834,6.2 0,6.87157283 0,7.7 Z M5,7.7 C5,7.15 5.45,6.7 6,6.7 L15,6.7 C15.55,6.7 16,7.15 16,7.7 C16,8.25 15.55,8.7 15,8.7 L6,8.7 C5.45,8.7 5,8.25 5,7.7 Z M1.5,11.2 C0.671572834,11.2 0,11.8715728 0,12.7 C0,13.5284272 0.671572834,14.2 1.5,14.2 C2.32842717,14.2 3,13.5284272 3,12.7 C3,11.8715728 2.32842717,11.2 1.5,11.2 Z M6,13.7 C5.45,13.7 5,13.25 5,12.7 C5,12.15 5.45,11.7 6,11.7 L15,11.7 C15.55,11.7 16,12.15 16,12.7 C16,13.25 15.55,13.7 15,13.7 L6,13.7 Z M6,13.7'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-caret-down:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-down')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.6741598,11.3413318 L8.03952616,11.7324251 L8.40489252,11.3413318 L14.8653664,4.42595055 L14.1346336,3.74328687 L7.6741598,10.6586682 L8.40489252,10.6586682 L1.86536636,3.65866816 L1.13463364,4.34133184 L7.6741598,11.3413318 Z M7.6741598,11.3413318'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-caret-left:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-left')])), 'width': new templates.Attribute('7px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 7 16')}, [new templates.Element('path', {'fill': new templates.Attribute('none'), 'stroke': new templates.Attribute('#DCDCDC'), 'd': new templates.Attribute('M7,16.168L1.456,8.024L7-0.36')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-caret-right:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-caret-right')])), 'width': new templates.Attribute('7px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 7 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.456054688,-0.360057188 L6,8.02441406 L0.456054688,16.1682129'), 'stroke': new templates.Attribute('#DCDCDC'), 'fill': new templates.Attribute('none')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-clock:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-clock')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.10709589,7.92869178 C0.10709589,12.2866096 3.6400274,15.8191027 7.99750685,15.8191027 C12.3547671,15.8191027 15.8879178,12.2866096 15.8879178,7.92869178 C15.8879178,3.57077397 12.3547671,0.0382808219 7.99750685,0.0382808219 C3.6400274,0.0382808219 0.10709589,3.57077397 0.10709589,7.92869178 Z M2.07969863,7.92869178 C2.07969863,4.66578767 4.73460274,2.01088356 7.99750685,2.01088356 C11.2606301,2.01088356 13.9153151,4.66578767 13.9153151,7.92869178 C13.9153151,11.1920342 11.2606301,13.8465 7.99750685,13.8465 C4.73460274,13.8465 2.07969863,11.1920342 2.07969863,7.92869178 Z M11.8256712,9.69723973 L8.70457534,7.58874658 L8.70457534,3.96003425 C8.70457534,3.87323973 8.66906849,3.78863699 8.60835616,3.72704795 C8.54720548,3.66589726 8.46238356,3.63082877 8.37580822,3.63082877 L7.51246575,3.63082877 C7.42545205,3.63082877 7.34106849,3.66589726 7.27991781,3.72704795 C7.21876712,3.78863699 7.18369863,3.87323973 7.18369863,3.96003425 L7.18369863,8.24518493 C7.18369863,8.33197945 7.21876712,8.41680137 7.27991781,8.47795205 C7.30468493,8.50271918 7.33339726,8.52332192 7.36473973,8.53888356 L11.0013425,10.9750479 C11.056137,11.0112123 11.1194795,11.0305 11.1836986,11.0305 C11.2071507,11.0305 11.2303836,11.0278699 11.2533973,11.0228288 C11.340411,11.0044178 11.415589,10.9513767 11.4631507,10.8755411 L11.9207945,10.1437055 C12.0146027,9.99378767 11.9725205,9.79608904 11.8256712,9.69723973 Z'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-close:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-close')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#979797'), 'd': new templates.Attribute('M4.1 5L4.9 4.2 8 7.4l3.2-3.1 0.8 0.8 -3.1 3.2 3.2 3.1 -0.8 0.8L8 8.9l-3.1 3.2 -0.8-0.8 3.2-3.1L4.1 5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-close-large:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-close')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0 1.6L1.6 0 8 6.4 14.4 0 16 1.6 9.6 8 16 14.4 14.4 16 8 9.6 1.6 16 0 14.4 6.4 8 0 1.6z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-closed:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-closed')])), 'width': new templates.Attribute('16'), 'height': new templates.Attribute('16'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8 0C3.6 0 0 3.6 0 8 0 12.4 3.6 16 8 16 12.4 16 16 12.4 16 8 16 3.6 12.4 0 8 0ZM3.6 9C3.3 9 3 8.8 3 8.5L3 7.5C3 7.2 3.3 7 3.6 7L12.4 7C12.7 7 13 7.2 13 7.5L13 8.5C13 8.8 12.7 9 12.4 9L3.6 9Z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-copy:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-copy')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M1,16h11v-3h-2v1H3V5h1v8h11V4.125L11.163,0H4v3H1V16z M10,2v3h3v6H6V2H10z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-double-caret-left:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-double-caret-left')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('g', {'fill': new templates.Attribute('#979797')}, [new templates.Element('path', {'d': new templates.Attribute('M6.76779808,8.06481578 L7.12135147,7.71126239 L6.76779808,7.357709 L1.82824002,2.41815094 L1.12113323,3.12525772 L5.69616137,7.72223893 L1.0606913,12.357709 L1.76779808,13.0648158 L6.76779808,8.06481578 Z M6.76779808,8.06481578'), 'transform': new templates.Attribute('translate(4.091021, 7.741483) rotate(-180.000000) translate(-4.091021, -7.741483) ')}, [], void 0, false, null, 'http://www.w3.org/2000/svg'), new templates.Element('path', {'d': new templates.Attribute('M14.7677981,8.06481578 L15.1213515,7.71126239 L14.7677981,7.357709 L9.82824002,2.41815094 L9.12113323,3.12525772 L13.6935677,7.72483263 L9.0606913,12.357709 L9.76779808,13.0648158 L14.7677981,8.06481578 Z M14.7677981,8.06481578'), 'transform': new templates.Attribute('translate(12.091021, 7.741483) rotate(-180.000000) translate(-12.091021, -7.741483)')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-double-caret-right:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-double-carat-right')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('g', {'transform': new templates.Attribute('translate(1.000000, 1.500000)'), 'fill': new templates.Attribute('#979797')}, [new templates.Element('path', {'d': new templates.Attribute('M14.0857553,6.58184906 L14.4393087,6.22829567 L14.0857553,5.87474228 L9.14619725,0.935184216 L8.43909047,1.642291 L13.0287252,6.22466558 L8.37864853,10.8747423 L9.08575531,11.5818491 L14.0857553,6.58184906 Z M14.0857553,6.58184906')}, [], void 0, false, null, 'http://www.w3.org/2000/svg'), new templates.Element('path', {'d': new templates.Attribute('M6.08575531,6.58184906 L6.4393087,6.22829567 L6.08575531,5.87474228 L1.14619725,0.935184216 L0.439090466,1.642291 L5.04987275,6.20351806 L0.37864853,10.8747423 L1.08575531,11.5818491 L6.08575531,6.58184906 Z M6.08575531,6.58184906')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-edit:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-edit')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14.5,16 L1.5,16 C1.225,16 1,15.775 1,15.5 L1,14.5 C1,14.225 1.225,14 1.5,14 L14.5,14 C14.775,14 15,14.225 15,14.5 L15,15.5 C15,15.775 14.775,16 14.5,16 Z M6.62946319,12.4853463 C6.80246319,12.2703463 6.78646319,11.9323463 6.59646319,11.7343463 L5.06946319,10.1423463 C4.87846319,9.9443463 4.57846319,9.9543463 4.40046319,10.1633463 L4.30446319,10.2773463 C4.12746319,10.4873463 3.82746319,10.8233463 3.63946319,11.0233463 L2.10546319,12.6533463 C1.91746319,12.8533463 1.98746319,13.0173463 2.26246319,13.0173463 L5.70346319,13.0173463 C5.97746319,13.0193463 6.34446319,12.8433463 6.51546319,12.6283463 L6.62946319,12.4853463 Z M13.434,1.33835995 L13.294,1.45335995 C13.29,1.45635995 6,8.74635995 6,8.74635995 L8.221,10.96636 L15.512,3.67635995 L15.642,3.54635995 C16.115,2.91735995 16.08,2.02335995 15.512,1.45635995 C14.944,0.888359952 14.051,0.852359952 13.434,1.33835995 Z M13.434,1.33835995'), 'fill': new templates.Attribute('#D9D9D9')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-email-token:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-email-token')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M10.242,11.688c-0.359-0.418-0.314-1.049,0.104-1.41l3.362-2.904l-3.322-2.582\nc-0.436-0.34-0.516-0.968-0.176-1.403c0.338-0.438,0.967-0.518,1.402-0.176l4.286,3.33c0.235,0.185,0.378,0.465,0.386,0.765\nc0.008,0.299-0.119,0.586-0.347,0.782l-4.285,3.702c-0.188,0.163-0.422,0.243-0.653,0.243C10.719,12.034,10.44,11.918,10.242,11.688\nz M4.632,11.791L0.346,8.089C0.119,7.894-0.007,7.606,0,7.307c0.008-0.3,0.15-0.58,0.386-0.765l4.286-3.33\nC5.107,2.87,5.735,2.95,6.075,3.388c0.339,0.436,0.26,1.063-0.176,1.403L2.577,7.374l3.362,2.904\nc0.418,0.361,0.464,0.992,0.104,1.41c-0.198,0.23-0.478,0.347-0.758,0.347C5.054,12.034,4.82,11.954,4.632,11.791z M10,7.5\nC10,6.671,9.328,6,8.5,6C7.671,6,7,6.671,7,7.5S7.671,9,8.5,9C9.328,9,10,8.329,10,7.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-error:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-error')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'viewbox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M15.0875976,13.1513746 L12.9835976,9.17237457 C12.4625976,8.20337457 11.6085976,6.61937457 11.0875976,5.65137457 L8.98459759,1.74437457 C8.46359759,0.775374566 7.60959759,0.775374566 7.08859759,1.74437457 L4.98559759,5.66737457 C4.46359759,6.63637457 3.61059759,8.23937457 3.08859759,9.20737457 L0.984597585,13.1503746 C0.463597585,14.1193746 0.936597585,14.9823746 2.03659759,14.9823746 L6.03659759,14.9823746 L10.0365976,14.9823746 L14.0365976,14.9823746 C15.1355976,14.9833746 15.6095976,14.1203746 15.0875976,13.1513746 L15.0875976,13.1513746 Z M9.03659759,12.9833746 L7.03659759,12.9833746 L7.03659759,10.9833746 L9.03659759,10.9833746 L9.03659759,12.9833746 L9.03659759,12.9833746 Z M9.03659759,9.98337457 L7.03659759,9.98337457 L7.03659759,5.98337457 L9.03659759,5.98337457 L9.03659759,9.98337457 L9.03659759,9.98337457 Z M9.03659759,9.98337457'), 'fill': new templates.Attribute('#010101')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-feedback:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-feedback')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M14.8796121,19.472194 C15.7390916,18.7842279 16.4358374,19.123167 16.4358374,20.2362942 L16.4358374,26.5916371 C16.5965938,26.4812121 16.7911207,26.4164149 17.0006946,26.4164149 L30.8571429,26.4164149 L30.8571429,32.1591139 L17.0006946,32.1591139 C16.791015,32.1591139 16.5965273,32.0947797 16.4358374,31.9848006 L16.4358374,39.0896724 C16.4358374,40.1996393 15.7370433,40.5400991 14.8796121,39.8537726 L3.70443154,30.9086559 C2.84495205,30.2206899 2.84700031,29.1036371 3.70443154,28.4173106 Z M34.2857143,26.4164149 L38.9993054,26.4164149 C39.5525308,26.4164149 40,26.8642653 40,27.4167168 L40,31.158812 C40,31.7084939 39.5519738,32.1591139 38.9993054,32.1591139 L34.2857143,32.1591139 Z M25.1203879,20.527806 C24.2609084,21.2157721 23.5641626,20.876833 23.5641626,19.7637058 L23.5641626,13.4083629 C23.4034062,13.5187879 23.2088793,13.5835851 22.9993054,13.5835851 L9.14285714,13.5835851 L9.14285714,7.84088615 L22.9993054,7.84088615 C23.208985,7.84088615 23.4034727,7.90522026 23.5641626,8.01519936 L23.5641626,0.910327599 C23.5641626,-0.199639294 24.2629567,-0.540099082 25.1203879,0.146227404 L36.2955685,9.09134407 C37.155048,9.77931008 37.1529997,10.8963629 36.2955685,11.5826894 Z M5.71428571,13.5835851 L1.00069463,13.5835851 C0.44746922,13.5835851 0,13.1357347 0,12.5832832 L0,8.84118796 C0,8.2915061 0.448026248,7.84088615 1.00069463,7.84088615 L5.71428571,7.84088615 Z M5.71428571,13.5835851')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-flyover-close:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-flyover-close')])), 'width': new templates.Attribute('30px'), 'height': new templates.Attribute('30px'), 'viewBox': new templates.Attribute('0 0 30 30')}, [new templates.Element('path', {'fill': new templates.Attribute('#0577A0'), 'd': new templates.Attribute('M10.097393,8.58889852 L8.58889852,10.097393 L13.4915055,15 L8.58889852,19.902607 L10.097393,21.4111015 L15,16.5084945 L19.902607,21.4111015 L21.4111015,19.902607 L16.5084945,15 L21.4111015,10.097393 L19.902607,8.58889852 L15,13.4915055 Z M15,30 C6.71572834,30 0,23.2842717 0,15 C0,6.71572834 6.71572834,0 15,0 C23.2842717,0 30,6.71572834 30,15 C30,23.2842717 23.2842717,30 15,30 Z M15,30')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-flyover-control:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-flyover-control')])), 'width': new templates.Attribute('30px'), 'height': new templates.Attribute('30px'), 'viewBox': new templates.Attribute('0 0 30 30')}, [new templates.Element('path', {'fill': new templates.Attribute('#0577A0'), 'd': new templates.Attribute('M10.136039,14.4333333 L10.1088294,14.4605429 L16.4727904,20.824504 L17.887004,19.4102904 L12.9121302,14.4354167 L17.8890873,9.4584596 L16.4748737,8.04424604 L10.1109127,14.4082071 Z M15,30 C6.71572834,30 0,23.2842717 0,15 C0,6.71572834 6.71572834,0 15,0 C23.2842717,0 30,6.71572834 30,15 C30,23.2842717 23.2842717,30 15,30 Z M15,30')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-globe:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-globe')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0 8C0 12.4 3.6 16 8 16 12.4 16 16 12.4 16 8 16 3.6 12.4 0 8 0 3.6 0 0 3.6 0 8ZM10.3 12.1C10.3 12.2 10.3 12.3 10.3 12.4 10.2 11.9 10.7 11.9 10.9 11.7 11 11.6 11.1 11.3 11.2 11.2 11.2 11.3 11.2 11.4 11.2 11.5 11.2 11.4 11.2 11.5 11.2 11.5 11.2 11.6 11.2 11.7 11.2 11.8 11.1 11.8 11.1 11.7 11.1 11.7 10.8 12 10.8 12.8 10.3 13 10 13.1 10.1 12.8 10.2 12.7 10.3 12.5 10.1 12.4 10.2 12.2 10.2 12.2 10.2 12.2 10.2 12.2 10.1 12.1 10 11.9 10 11.8 10.1 11.8 10.2 11.7 10.2 11.8 10.2 11.7 10.3 11.5 10.3 11.5 10.4 11.7 10.1 12 10.2 12.2 10.2 12.2 10.2 12.2 10.3 12.1ZM13.4 6.3C13.3 6.1 13.2 5.6 12.9 5.4 13 5.5 13 5.6 12.9 5.7 12.8 5.6 12.7 5.6 12.6 5.4 12.6 5.4 12.7 5.5 12.7 5.4 12.5 5.4 12.3 5.2 12.2 5 11.9 5 11.5 5.3 11.2 5.1 11.2 5 11.1 4.8 11 4.9 10.9 5 10.9 5 10.8 5 10.4 4.9 10.3 4.6 10 4.6 10 4.7 10.2 4.9 10.3 5 10.5 5 10.6 5.4 10.6 5.1 10.8 5.2 10.6 5.4 10.9 5.3 11.1 5.4 11.1 5.1 11.1 5 11.2 5 11.2 5.2 11.3 5.2 11.4 5.4 11.5 5.3 11.6 5.4 11.7 5.5 11.8 5.7 11.8 5.9 11.7 5.9 11.8 6 11.7 6.2 11.6 6.3 11.6 6.3 11.6 6.4 11.4 6.5 11.3 6.5 11.3 6.7 11.2 6.9 10.3 7.5 10.2 7.3 10 7.1 10 6.8 9.9 6.6 9.7 6.5 9.4 6.1 9.3 5.9 9.3 5.6 8.5 5 8.4 5 8.5 5.4 8.9 5.6 9 5.9 9.2 6.2 9.4 6.8 9.6 6.9 10 6.9 10.2 7.5 10.4 7.7 10.6 7.8 11.1 7.3 11.3 7.3 11.3 7.6 11.3 7.7 11.3 8 11.1 8.7 10.8 9 10.4 9.5 10.2 9.8 10 10 9.9 10.3 9.7 10.6 10.1 11.2 10 11.3 10.1 11.7 10 12 9.6 12.2 9.3 12.4 9.1 12.5 9.2 12.8 9.3 13.1 8.9 13.1 8.9 13.3 8.7 13.6 8.6 13.7 8.4 13.8 8.3 13.9 8.1 13.9 8 13.9 7.8 13.9 7.5 13.8 7.3 13.8 7 13.4 6.7 13 6.4 12.7 6.2 12.4 5.9 12 6.2 11.7 6.2 11.6 6 11.1 5.9 11 5.7 10.7 5 10.1 5.3 9.7 5.3 9.5 5.1 9.3 5.1 9.1 5 9 4.8 9.3 4.6 9 4.5 8.7 4.1 8.8 3.9 9 3.8 9 3.1 9.2 3.1 9.1 2.5 8.6 2.3 7.9 2.5 7.2 2.6 6.9 2.6 6.4 2.8 6.3 2.9 6 3.2 5.7 3.4 5.5 3.5 5.3 3.6 5.3 3.7 5.2 3.9 5 4 4.8 4.2 4.6 4.4 4.5 4.9 4.2 4.5 4.1 4.6 3.9 4.9 3.7 5 3.4 5.1 3.3 5.3 3.3 5.5 3.2 5.6 3 5.7 3 5.6 2.8 5.6 2.7 6 2.6 6.1 2.6 6.2 2.6 6.3 2.4 6.4 2.3 6.9 2.2 7.5 2.1 8 2.1 10.9 2.1 13.3 4.3 13.8 7.1 13.7 6.8 13.5 6.5 13.4 6.3ZM5.9 3.7C6 3.6 6.1 3.3 6.2 3.3 6.2 3.4 6.1 3.6 6.1 3.7 6 3.7 6 3.7 5.9 3.7ZM9.7 3.6C9.8 3.7 9.9 3.7 10 3.6 10 3.4 9.4 2.9 9.2 2.8 9.2 2.8 9.2 2.7 9.3 2.7 9.2 2.4 8.9 2.7 8.9 2.8 9 2.9 9.5 3.2 9.5 3.3 9.4 3.3 9.5 3.6 9.7 3.6ZM9.7 2.6C9.6 2.6 9.6 2.6 9.6 2.7 9.7 2.7 9.8 3 10 2.8 9.9 2.8 9.8 2.6 9.7 2.6ZM5.5 3.3C5.5 3.3 5.5 3.3 5.5 3.3 5.5 3.3 5.5 3.2 5.6 3.2 5.5 3.2 5.5 3.2 5.5 3.3Z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-history-details:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-history-details')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M28.2380952,35.5555556 L28.2380952,40 L2,40 L2,8.88888889 L7.42857143,8.88888889 L7.42857143,4.44444444 L12.8571429,4.44444444 L12.8571429,0 L30.047619,0 L31.6589077,0 L38.2554766,7.19770156 L40,9.10120007 L40,9.77777778 L40,31.1111111 L33.6666667,31.1111111 L33.6666667,35.5555556 Z M4.71428571,37.3333333 L25.5238095,37.3333333 L25.5238095,35.5555556 L7.42857143,35.5555556 L7.42857143,11.5555556 L4.71428571,11.5555556 Z M10.1428571,32.8888889 L30.952381,32.8888889 L30.952381,31.1111111 L12.8571429,31.1111111 L12.8571429,7.11111111 L10.1428571,7.11111111 Z M37.2857143,28.4444444 L37.2857143,9.77777778 L30.047619,9.77777778 L30.047619,2.66666667 L15.5714286,2.66666667 L15.5714286,28.4444444 L37.2857143,28.4444444 Z M37.2857143,28.4444444'), 'fill': new templates.Attribute('#809096')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-history-everything:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-history-everything')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M29.128644,9.63305039 C28.6681642,10.3421271 27.7256074,10.5631236 26.9928422,10.1420425 C26.3101921,9.64411994 26.1264567,8.69681295 26.5893529,7.98401542 L29.0902134,4.13302796 C29.5506932,3.42395124 30.49325,3.20295476 31.2260157,3.62403624 C31.9086652,4.12195841 32.0924006,5.0692654 31.6295045,5.78206293 Z M20.4686505,7.90632548 C20.4980453,7.90792102 20.5276516,7.90872921 20.5574476,7.90872921 L20.3801374,7.90872921 C20.4098326,7.90872921 20.4393463,7.90792091 20.4686505,7.90632548 C19.624944,7.86053039 18.9549101,7.16612137 18.9549101,6.31620777 L18.9549101,1.72443168 C18.9549101,0.878954632 19.6250415,0.180258127 20.4689279,0.134313977 C21.3126339,0.180109062 21.9826677,0.874518079 21.9826677,1.72443168 L21.9826677,6.31620777 C21.9826677,7.16168482 21.3125363,7.86038133 20.4686505,7.90632548 Z M33.2614574,16.1191277 C32.4951949,16.4764417 31.5787511,16.1643783 31.18047,15.4189749 C30.8654087,14.6349632 31.2115884,13.7342364 31.9818717,13.3750474 L36.1434342,11.434479 C36.9096966,11.0771649 37.8261404,11.3892283 38.2244218,12.1346323 C38.5394829,12.9186434 38.1933031,13.8193702 37.4230198,14.1785592 Z M33.2985281,24.0754285 C32.4612791,23.9577609 31.8626466,23.1969114 31.9345957,22.354844 C32.0973664,21.5257218 32.8782682,20.9588518 33.7199105,21.0771369 L38.2669997,21.7161886 C39.1042487,21.8338563 39.7028812,22.5947057 39.6309321,23.4367731 C39.4681614,24.2658953 38.6872596,24.8327654 37.8456173,24.7144802 Z M29.0447108,30.7755682 C28.4066212,30.2208853 28.318954,29.2567446 28.8379188,28.5897134 C29.4260017,27.9830047 30.3896606,27.932897 31.0310985,28.4904905 L34.4965559,31.5029667 C35.1346455,32.0576495 35.2223127,33.0217903 34.7033483,33.688821 C34.1152651,34.2955302 33.1516062,34.3456378 32.5101682,33.7880443 Z M21.8725374,34.0576871 C21.6394924,33.2449624 22.0910772,32.388619 22.8896089,32.111848 C23.7132539,31.9233122 24.5487369,32.4061347 24.7830048,33.2231241 L26.0486698,37.6370225 C26.2817149,38.4497472 25.8301301,39.3060907 25.031599,39.5828615 C24.2079533,39.7713974 23.3724704,39.288575 23.1382025,38.4715856 Z M15.9605399,38.2131541 C15.7274948,39.0258788 14.8907363,39.5127958 14.0668773,39.3243537 C13.2684774,39.0477756 12.8158045,38.1955804 13.0500725,37.378591 L14.3157375,32.9646926 C14.5487826,32.1519679 15.3855411,31.6650509 16.2094007,31.8534932 C17.0078,32.1300711 17.4604728,32.9822663 17.2262049,33.7992557 Z M6.87472537,33.0804453 C6.23663574,33.6351282 5.26967704,33.5877598 4.68136365,32.9810132 C4.16240435,32.3142155 4.24689973,31.3529612 4.88833767,30.7953677 L8.35379507,27.7828915 C8.9918847,27.2282087 9.9588434,27.2755771 10.5471572,27.8823242 C11.0661161,28.5491214 10.9816207,29.5103757 10.3401828,30.0679692 Z M2.02389707,23.7860268 C1.18664814,23.9036945 0.40148704,23.3373245 0.238543727,22.508045 C0.166471968,21.6661765 0.760872355,20.9060203 1.60251466,20.7877352 L6.1496039,20.1486835 C6.98685282,20.0310158 7.77201392,20.5973858 7.93495724,21.4266653 C8.007029,22.2685338 7.41262861,23.02869 6.57098631,23.1469751 Z M2.97321772,13.3288251 C2.20695529,12.9715111 1.85693097,12.0688839 2.17193324,11.2846462 C2.57000321,10.5393428 3.48252005,10.2255558 4.25280337,10.5847448 L8.41436579,12.5253133 C9.18062823,12.8826273 9.53065255,13.7852545 9.21565055,14.5694916 C8.81758031,15.3147956 7.90506347,15.6285826 7.13478015,15.2693935 Z M9.15681443,5.27142143 C8.69633462,4.56234471 8.87781671,3.61138881 9.56053642,3.11324332 C10.2930695,2.69213513 11.2332095,2.90958894 11.6961056,3.62238646 L14.1969661,7.47337392 C14.6574459,8.18245064 14.4759638,9.13340655 13.7932446,9.63155171 C13.060711,10.0526602 12.1205711,9.83520642 11.6576749,9.12240889 Z M9.15681443,5.27142143'), 'fill': new templates.Attribute('#809096')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-indicator-dot:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-indicator-dot')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8,12c2.209,0,4-1.791,4-4s-1.791-4-4-4S4,5.791,4,8S5.791,12,8,12z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-italic:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-italic')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M9.947,5l0.544-2H7.502L6.957,5H9.947L9.947,5z M6.686,6l-2.174,7h2.99l2.174-7\nH6.686L6.686,6z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-link:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-link')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M16.6751679,8.69440552 C16.6751679,10.3494829 15.2700104,11.7005307 13.5366606,11.7005307 L10.3883185,11.7005307 C9.29973107,11.7005307 8.33677879,11.1660506 7.77341801,10.3552389 C7.21106344,11.165004 6.24985876,11.7005307 5.15856569,11.7005307 L2.01022357,11.7005307 C0.282787373,11.7005307 -1.12828377,10.3546426 -1.12828377,8.69440552 L-1.12828377,8.03036154 C-1.12828377,6.37528412 0.276873826,5.02423633 2.01022357,5.02423633 L5.15856569,5.02423633 C6.2471531,5.02423633 7.21010539,5.55871644 7.77346616,6.36952817 C8.33582074,5.55976302 9.29702541,5.02423633 10.3883185,5.02423633 L13.5366606,5.02423633 C15.2640968,5.02423633 16.6751679,6.37012443 16.6751679,8.03036154 Z M10.3883185,9.6986199 L13.5366606,9.6986199 C14.1098221,9.6986199 14.5806442,9.24712236 14.5806442,8.69440552 L14.5806442,8.03036154 C14.5806442,7.47733202 14.1089772,7.02614715 13.5366606,7.02614715 L10.3883185,7.02614715 C10.013397,7.02614715 9.68226484,7.21933609 9.49806053,7.50766918 L11.0086429,7.50766918 C11.5870296,7.50766918 12.0231864,7.80957115 12.0231864,8.36238356 C12.0231864,8.91519597 11.5870296,9.21709788 11.0086429,9.21709788 L9.49817009,9.21709788 C9.68253891,9.50550171 10.0138884,9.6986199 10.3883185,9.6986199 Z M2.01022357,9.6986199 L5.15856569,9.6986199 C5.53348723,9.6986199 5.86461934,9.50543097 6.04882365,9.21709788 L4.60367807,9.21709788 C4.02529131,9.21709788 3.52369782,8.91519597 3.52369782,8.36238356 C3.52369782,7.80957115 4.0252913,7.50766918 4.60367806,7.50766918 L6.04871408,7.50766918 C5.86434526,7.21926535 5.53299573,7.02614715 5.15856569,7.02614715 L2.01022357,7.02614715 C1.43706212,7.02614715 0.966239961,7.4776447 0.966239961,8.03036154 L0.966239961,8.69440552 C0.966239961,9.24743504 1.43790694,9.6986199 2.01022357,9.6986199 Z M2.01022357,9.6986199'), 'fill': new templates.Attribute('#3F484B'), 'transform': new templates.Attribute('translate(7.773442, 8.362384) rotate(-45.000000) translate(-7.773442, -8.362384) ')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-location:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-location')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('10px'), 'height': new templates.Attribute('14px'), 'viewBox': new templates.Attribute('0 0 10 14'), 'enable-background': new templates.Attribute('new 0 0 10 14'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'d': new templates.Attribute('M4.813,0C2.887,0,0,0.878,0,4.376C0,6.127,3.852,12.25,4.813,14c0.96-1.75,4.812-7.873,4.812-9.624 C9.625,0.878,6.738,0,4.813,0 M4.812,7.005c-1.234,0-2.236-1-2.236-2.236c0-1.233,1.002-2.236,2.236-2.236s2.236,1.002,2.236,2.236 C7.049,6.005,6.047,7.005,4.812,7.005'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-logo-lever:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon-logo-lever')])), 'width': new templates.Attribute('117px'), 'height': new templates.Attribute('17px'), 'viewBox': new templates.Attribute('0 0 117 17')}, [new templates.Element('path', {'d': new templates.Attribute('M34.1985924,14.4338235 L34.1985924,2.5 L36.7160586,2.5 L36.7160586,12.4044118 L41.6173201,12.4044118 L41.1494725,14.4338235 Z M51.5789751,2.5 L59.1536521,2.5 L58.7971967,4.46323529 L54.0741628,4.46323529 L54.0741628,7.22058824 L58.0174505,7.22058824 L58.0174505,9.18382353 L54.0964413,9.18382353 L54.0964413,12.3602941 L59.3318798,12.3602941 L59.3318798,14.4338235 L51.5789751,14.4338235 Z M72.4570763,14.5 L67.8454347,2.5 L70.607964,2.5 L72.8135317,8.67647059 C72.902646,8.92647184 72.9954719,9.21323368 73.0920124,9.53676471 C73.1885529,9.86029574 73.2739528,10.1654397 73.3482147,10.4522059 C73.4224766,10.738972 73.4818853,10.9852931 73.5264424,11.1911765 L73.6155563,11.4779412 L73.6823917,11.1911765 C73.7269488,10.999999 73.7863574,10.7610308 73.8606194,10.4742647 C73.9348813,10.1874986 74.0202812,9.88235456 74.1168217,9.55882353 C74.2133621,9.2352925 74.3136142,8.94853066 74.4175809,8.69852941 L76.8013763,2.5 L79.4079563,2.5 L74.7072009,14.5 Z M88.7012574,2.5 L96.2759344,2.5 L95.919479,4.46323529 L91.1964451,4.46323529 L91.1964451,7.22058824 L95.1397328,7.22058824 L95.1397328,9.18382353 L91.2187236,9.18382353 L91.2187236,12.3602941 L96.4541621,12.3602941 L96.4541621,14.4338235 L88.7012574,14.4338235 Z M112.542394,12.5147059 C112.067118,11.794114 111.706953,11.2536783 111.461889,10.8933824 C111.216824,10.5330864 111.012607,10.2573539 110.849231,10.0661765 C110.700707,9.90441096 110.537333,9.76470647 110.359105,9.64705882 C110.180876,9.52941118 109.950668,9.47058824 109.668472,9.47058824 L109.668472,14.4338235 L107.195563,14.4338235 L107.195563,2.5 L111.250243,2.5 C112.052272,2.5 112.731758,2.56249937 113.288722,2.6875 C113.845687,2.81250063 114.317243,3.02941022 114.703405,3.33823529 C115.535138,4.02941522 115.950999,4.91175934 115.950999,5.98529412 C115.950999,6.92647529 115.672521,7.69484996 115.115556,8.29044118 C114.558592,8.88603239 113.849401,9.22794074 112.987963,9.31617647 C113.166192,9.43382412 113.344418,9.62499868 113.522646,9.88970588 C113.715727,10.1397071 113.957075,10.4558804 114.246696,10.8382353 C114.536318,11.2205901 114.822222,11.617645 115.104417,12.0294118 L116.753023,14.4338235 L113.745431,14.4338235 Z M113.344419,6.02941176 C113.344419,5.66176287 113.270158,5.36764816 113.121634,5.14705882 C112.97311,4.92646949 112.780032,4.76102996 112.542394,4.65073529 C112.304756,4.54044063 112.037417,4.47058838 111.740369,4.44117647 C111.443322,4.41176456 111.153705,4.39705882 110.871509,4.39705882 L109.668472,4.39705882 L109.668472,7.68382353 L110.760117,7.68382353 C111.072017,7.68382353 111.383912,7.67279423 111.695812,7.65073529 C112.007712,7.62867636 112.28619,7.56250055 112.531255,7.45220588 C112.776319,7.34191121 112.97311,7.17647169 113.121634,6.95588235 C113.270158,6.73529301 113.344419,6.42647257 113.344419,6.02941176 Z M113.344419,6.02941176'), 'fill': new templates.Attribute('#FFFFFF')}, [], void 0, false, null, 'http://www.w3.org/2000/svg'), new templates.Element('g', {'transform': new templates.Attribute('translate(2.000000, 0.500000)')}, [new templates.Element('path', {'d': new templates.Attribute('M11.7658156,12.3650942 C12.0004001,12.132721 12.3802959,12.1318198 12.6157747,12.3650942 L15.8643385,15.5792648 C16.0989231,15.811638 16.0212747,16 15.6932438,16 L8.68849546,16 C8.35927229,16 8.28177295,15.8125393 8.51740076,15.5792648 L11.7658156,12.3650942 L11.7658156,12.3650942 Z M11.7658156,12.3650942'), 'fill': new templates.Attribute('#FFFFFF')}, [], void 0, false, null, 'http://www.w3.org/2000/svg'), new templates.Element('path', {'d': new templates.Attribute('M0,15.8100985 L15.0950682,0.761904762 C15.2618775,0.932532328 15.3752944,1.05051993 15.40621,1.20486163 L15.9838529,4.0798306 C16.0489859,4.40375393 15.9112161,4.85587201 15.6760468,5.08984985 L5.1428071,15.5765689 C4.90763788,15.8102479 4.448255,16 4.11643679,16 L0.438822457,16 C0.273288541,16 0.122762233,15.9275356 0,15.8100985 Z M0,15.8100985'), 'fill': new templates.Attribute('#D9D9D9')}, [], void 0, false, null, 'http://www.w3.org/2000/svg'), new templates.Element('path', {'d': new templates.Attribute('M0,15.5892434 L0,11.9049129 C0,11.5729398 0.189639983,11.1124172 0.423330198,10.8768185 L10.9037017,0.32434273 C11.1375413,0.0888943907 11.5893921,-0.0489766993 11.913124,0.0161249168 L14.7863937,0.594822655 C14.9496035,0.627749338 15.1104242,0.724574836 15.2380952,0.854176668 L0.160970001,16 C0.0612223566,15.8924996 0,15.7481635 0,15.5892434 L0,15.5892434 Z M0,15.5892434'), 'fill': new templates.Attribute('#FFFFFF')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-logo-lever-dark:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon logo icon-logo-lever-dark')])), 'width': new templates.Attribute('32px'), 'height': new templates.Attribute('32px'), 'viewBox': new templates.Attribute('0 0 32 32')}, [new templates.Element('path', {'d': new templates.Attribute('M23.0638976,25.1945443 C23.5130167,24.7752195 24.2403386,24.7735932 24.6911698,25.1945443 L30.9106424,30.9946162 C31.3597616,31.413941 31.2111014,31.7538462 30.5830765,31.7538462 L17.1722762,31.7538462 C16.5419686,31.7538462 16.3935938,31.4155674 16.8447103,30.9946162 L23.0638976,25.1945443 L23.0638976,25.1945443 Z M23.0638976,25.1945443'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg'), new templates.Element('path', {'d': new templates.Attribute('M0.399000902,31.4514355 L29.9842248,1.92195012 C30.3127108,2.2555115 30.5236566,2.52897167 30.5845367,2.83069566 L31.7220487,8.45099864 C31.8503107,9.0842393 31.5790101,9.96808905 31.1159076,10.4254944 L10.3735278,30.9260768 C9.91042537,31.382898 9.00579447,31.7538462 8.35236784,31.7538462 L1.11029653,31.7538462 C0.78432205,31.7538462 0.525165265,31.7538459 0.399000902,31.4514355 Z M0.399000902,31.4514355'), 'fill': new templates.Attribute('#6A6F71')}, [], void 0, false, null, 'http://www.w3.org/2000/svg'), new templates.Element('path', {'d': new templates.Attribute('M0.246153846,23.6896746 C0.246153846,23.0359429 0.616486694,22.1290678 1.07284174,21.6651196 L21.5391262,0.884859529 C21.9957729,0.421207416 22.8781565,0.149707423 23.5103467,0.277907528 L29.1213268,1.41749692 C29.4400463,1.48233716 29.7541002,1.67300891 30.0034188,1.92822482 L0.565091661,31.6662776 C0.370302415,31.4545846 0.246153846,31.257922 0.246153846,30.9449716 L0.246153846,23.6896746 Z M0.246153846,23.6896746'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-logout:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-logout')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.529,7.111h1.883V0.418H7.529V7.111z M0,7.892\nC0,12.367,3.579,16,8,16c4.422,0,8-3.633,8-8.108c0-2.176-0.851-4.218-2.338-5.729L12.32,3.484c1.144,1.161,1.797,2.73,1.797,4.408\nc0,3.442-2.742,6.226-6.117,6.226c-3.375,0-6.118-2.783-6.118-6.226c0-1.678,0.654-3.247,1.797-4.408L2.338,2.163\nC0.851,3.673,0,5.716,0,7.892z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-mail:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-mail')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M1.91041092,2.13405025 L14.0892085,2.13405025 C14.3344049,2.13405025 14.5690915,2.17781151 14.7859018,2.25790765 L7.99949326,7.67307941 L1.20411635,2.26151146 C1.42373091,2.17910235 1.66177262,2.13405025 1.91041092,2.13405025 Z M15.6318054,2.85738206 C15.9177503,3.20216769 16.0892948,3.64458077 16.0892948,4.12703291 L16.0892948,11.0070173 C16.0892948,12.1107937 15.1938257,13 14.0892085,13 L1.91041092,13 C0.803221956,13 -0.089675347,12.1077113 -0.089675347,11.0070173 L-0.089675347,4.12703291 C-0.089675347,3.64703603 0.0796668677,3.20761653 0.361907057,2.86425825 L7.68135948,8.6931791 L8.0001262,8.94703224 L8.31864052,8.69287575 Z M15.6318054,2.85738206'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-mine-list:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-mine-list')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#7D8F95'), 'd': new templates.Attribute('M13.376,10.658c-0.856-0.429-2.099-1.461-3.951-1.802 c0.454-0.551,0.82-1.408,1.206-2.404c0.191-0.604,0.157-1.102,0.157-1.802c0-0.533,0.104-1.355-0.035-1.836 C10.351,1.249,9.319,0.82,8.112,0.82c-1.225,0-2.256,0.429-2.659,1.994C5.331,3.295,5.419,4.135,5.419,4.65 c0,0.7-0.035,1.198,0.192,1.802c0.367,0.997,0.716,1.871,1.189,2.404c-1.837,0.359-3.096,1.39-3.918,1.802 c-1.749,0.821-1.749,1.731-1.749,1.731v0.35c0,0.596,0.647,1.198,1.276,1.198h11.421c0.804,0,1.294-0.656,1.294-1.25V12.39 C15.125,12.39,15.108,11.479,13.376,10.658z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-note:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-note')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0.348,13.454L0.698,11l2.104,2.104l2.103,2.104l-2.452,0.352L0,15.904L0.348,13.454\nz M5.207,12.816l-0.701-0.699l6.311-6.312L9.412,4.402l-6.311,6.309l-0.701-0.7l6.312-6.31L8.01,3L1,10.011l4.207,4.206l7.009-7.011\nl-0.7-0.701L5.207,12.816z M14.607,4.102l-2.803-2.805C11.42,0.912,10.801,0.9,10.432,1.269c-0.029,0.03-0.043,0.069-0.068,0.102\nl-0.018-0.018L9,2.701l4.207,4.207l1.346-1.347l-0.018-0.018c0.033-0.025,0.07-0.037,0.101-0.067\nC15.007,5.106,14.994,4.488,14.607,4.102z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-notification:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-notification')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,1c0,0-2.6,2.6-5.4,3C8.3,4.8,8.2,5.6,8.2,6.5S8.3,8.2,8.6,9C11.4,9.4,14,12,14,12C16,9,16,4,14,1L14,1L14,1z M7,12\nc-0.5-0.5-0.8-1.8-0.7-3H7V6V4H2C0.9,4,0,5.1,0,6.5S0.9,9,2,9h1.4C3.7,9.6,4,10.5,4,11c0,1,1,3,2,3S8,13,7,12L7,12L7,12z M2,8\nC1.4,8,1,7.4,1,6.8c0-0.7,0.4-1.3,1-1.3V8L2,8z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-paperclip:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-paperclip')])), 'x': new templates.Attribute('0px'), 'y': new templates.Attribute('0px'), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'fill': new templates.Attribute('#3F484B'), 'd': new templates.Attribute('M3.036,14.696c-0.614,0-1.219-0.284-1.788-0.853l-0.083-0.082c-0.586-0.578-2.305-2.956,0.008-5.391 c1.165-1.226,2.771-2.813,4.471-4.493C6.558,2.976,7.509,2.036,8.455,1.09c1.708-1.707,2.958-1.317,4.894,0.528 c2.288,2.178,2.707,4.322,1.718,5.463c-1.314,1.515-6.285,6.488-6.496,6.699c-0.278,0.279-0.729,0.279-1.008,0 c-0.278-0.278-0.278-0.729,0-1.008c0.051-0.051,5.146-5.148,6.427-6.625c0.294-0.339,0.339-1.629-1.624-3.498 c-1.13-1.076-1.465-1.989-2.902-0.551c-0.948,0.948-1.901,1.89-2.817,2.793C4.954,6.564,3.355,8.144,2.207,9.353 c-1.349,1.421-0.656,2.788-0.041,3.395l0.089,0.088c0.524,0.523,0.952,0.665,1.718-0.102c0.213-0.213,0.656-0.644,1.213-1.185 C6.729,10.05,9.6,7.26,10.18,6.534c0.184-0.23,0.452-0.787,0.196-1.011c-0.353-0.31-1.002,0.315-1.192,0.514 c-2.012,2.112-4.64,4.643-4.666,4.667c-0.283,0.273-0.734,0.265-1.007-0.02c-0.273-0.284-0.265-0.734,0.019-1.007 c0.026-0.025,2.633-2.535,4.622-4.624c1.291-1.356,2.48-1.201,3.162-0.604c0.832,0.727,0.636,2.154-0.021,2.974 c-0.586,0.734-2.847,2.945-5.113,5.146c-0.55,0.536-0.988,0.96-1.199,1.171C4.346,14.378,3.686,14.696,3.036,14.696L3.036,14.696z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-plus:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-plus')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M7.5,3h1v4.5H13v1H8.5V13h-1V8.5H3v-1h4.5V3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-postings:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-postings')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M0,13c0,1.1,0.9,2,2,2V4C0.9,4,0,4.9,0,6V13z M14,15c1.1,0,2-0.9,2-2V6\nc0-1.1-0.9-2-2-2V15z M9.5,1h-3C5.673,1,5,1.673,5,2.5V4H3v11h10V4h-2V2.5C11,1.673,10.327,1,9.5,1z M10,3v1H6V3H10z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-print:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-print')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M13,4.161 L9.875,1 L3,1 L3,6 L1,6 L0,7 L0,12 L3,12 L3,14 L3,15 L4,15 L12,15 L13,15 L13,14 L13,12 L16,12 L16,7 L15,6 L13,6 L13,4.161 Z M1,7 L2,7 L2,8 L1,8 L1,7 Z M12,14 L4,14 L4,12 L4,11 L4,9 L12,9 L12,11 L12,12 L12,14 Z M4,2 L9,2 L9,5 L12,5 L12,6 L4,6 L4,2 Z M13.906,9.25 L14.844,9.25 L14.844,10.75 L13.906,10.75 L13.906,9.25 Z'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-reactions-list:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-reactions-list')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 40 40')}, [new templates.Element('path', {'d': new templates.Attribute('M14.8796121,19.472194 C15.7390916,18.7842279 16.4358374,19.123167 16.4358374,20.2362942 L16.4358374,26.5916371 C16.5965938,26.4812121 16.7911207,26.4164149 17.0006946,26.4164149 L30.8571429,26.4164149 L30.8571429,32.1591139 L17.0006946,32.1591139 C16.791015,32.1591139 16.5965273,32.0947797 16.4358374,31.9848006 L16.4358374,39.0896724 C16.4358374,40.1996393 15.7370433,40.5400991 14.8796121,39.8537726 L3.70443154,30.9086559 C2.84495205,30.2206899 2.84700031,29.1036371 3.70443154,28.4173106 Z M34.2857143,26.4164149 L38.9993054,26.4164149 C39.5525308,26.4164149 40,26.8642653 40,27.4167168 L40,31.158812 C40,31.7084939 39.5519738,32.1591139 38.9993054,32.1591139 L34.2857143,32.1591139 Z M25.1203879,20.527806 C24.2609084,21.2157721 23.5641626,20.876833 23.5641626,19.7637058 L23.5641626,13.4083629 C23.4034062,13.5187879 23.2088793,13.5835851 22.9993054,13.5835851 L9.14285714,13.5835851 L9.14285714,7.84088615 L22.9993054,7.84088615 C23.208985,7.84088615 23.4034727,7.90522026 23.5641626,8.01519936 L23.5641626,0.910327599 C23.5641626,-0.199639294 24.2629567,-0.540099082 25.1203879,0.146227404 L36.2955685,9.09134407 C37.155048,9.77931008 37.1529997,10.8963629 36.2955685,11.5826894 Z M5.71428571,13.5835851 L1.00069463,13.5835851 C0.44746922,13.5835851 0,13.1357347 0,12.5832832 L0,8.84118796 C0,8.2915061 0.448026248,7.84088615 1.00069463,7.84088615 L5.71428571,7.84088615 Z M5.71428571,13.5835851'), 'fill': new templates.Attribute('#7D8F95')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-reports:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-reports')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'id': new templates.Attribute('Graph'), 'sketch:type': new templates.Attribute('MSShapeGroup'), 'd': new templates.Attribute('M0,15h16v-1H0V15z M0,13h4V4H0V13z M6,13h4V8H6V13z M12,13h4V1h-4V13z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-resume:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-resume')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8,4.33421904 L8,5.2315868 L8,6.12895457 L14,6.12895457 L14,16 L2,16 L2,0 L8,0 L8,4.33421904 Z M9.71428571,4.33421904 L9.71428571,0.456728732 L13.3456255,4.33421904 L9.71428571,4.33421904 Z M9.71428571,4.33421904'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-share:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-share')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16'), 'enable-background': new templates.Attribute('new 0 0 16 16'), 'xml:space': new templates.Attribute('preserve')}, [new templates.Element('path', {'fill-rule': new templates.Attribute('evenodd'), 'clip-rule': new templates.Attribute('evenodd'), 'fill': new templates.Attribute('#7D8F95'), 'd': new templates.Attribute('M3.075,14.098l6.081-3.31L0.285,0.378l10.451,9.55l5.319-2.879\nl-15.95-6.95L3.075,14.098z M11.056,16.107v-5.01l-3,1.771L11.056,16.107z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-secret:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-secret')])), 'title': new templates.DynamicAttribute(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title'))), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12.909,5.085C12.909,2.282,10.707,0,8,0\nC5.293,0,3.091,2.281,3.091,5.085v1.601H2V16h12V6.686h-1.091V5.085z M10.728,6.612H5.272V5.029c0-1.498,1.25-2.762,2.728-2.762\nc1.479,0,2.728,1.265,2.728,2.762V6.612L10.728,6.612z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-settings:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-settings')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M6.52502701,13.7140196 C5.98367819,13.5746841 5.4723997,13.360448 5.00290501,13.0830218 L4.09060001,13.9953268 C3.70110935,14.3848175 3.0699328,14.3836413 2.67990949,13.993618 L2.00638201,13.3200905 C1.61698973,12.9306982 1.61559365,12.2984795 2.0046732,11.9094 L2.91697684,10.9970963 C2.63954617,10.5275897 2.42531253,10.016313 2.28598103,9.47497299 L0.996300527,9.47497299 C0.445477546,9.47497299 4.71468693e-16,9.0278321 5.05242997e-16,8.47625585 L5.63567518e-16,7.52374415 C5.97287178e-16,6.97306031 0.44605894,6.52502701 0.996300527,6.52502701 L2.28598051,6.52502701 C2.42531083,5.98368456 2.63954289,5.47241018 2.91697542,5.00290223 L2.0046732,4.09060001 C1.61518254,3.70110935 1.6163587,3.0699328 2.00638201,2.67990949 L2.67990949,2.00638201 C3.06930177,1.61698973 3.70152046,1.61559365 4.09060001,2.0046732 L5.00290485,2.91697804 C5.47239813,2.63955271 5.98367736,2.42531615 6.52502701,2.28598039 L6.52502701,0.996300527 C6.52502701,0.445477546 6.9721679,0 7.52374415,0 L8.47625585,0 C9.02693969,0 9.47497299,0.44605894 9.47497299,0.996300527 L9.47497299,2.28598039 C10.0163218,2.42531594 10.5276003,2.63955205 10.997095,2.9169782 L11.9094,2.0046732 C12.2988907,1.61518254 12.9300672,1.6163587 13.3200905,2.00638201 L13.993618,2.67990949 C14.3830103,3.06930177 14.3844064,3.70152046 13.9953268,4.09060001 L13.0830232,5.00290365 C13.3604538,5.47241028 13.5746875,5.983687 13.714019,6.52502701 L15.0036995,6.52502701 C15.5545225,6.52502701 16,6.9721679 16,7.52374415 L16,8.47625585 C16,9.02693969 15.5539411,9.47497299 15.0036995,9.47497299 L13.7140196,9.47497299 C13.5746841,10.0163218 13.360448,10.5276003 13.0830218,10.997095 L13.9953268,11.9094 C14.3848175,12.2988907 14.3836413,12.9300672 13.993618,13.3200905 L13.3200905,13.993618 C12.9306982,14.3830103 12.2984795,14.3844064 11.9094,13.9953268 L11.1728523,13.2587791 C10.6034742,13.4441957 10.0427192,13.6163554 9.47497299,13.7354829 L9.47497299,15.0036995 C9.47497299,15.5545225 9.0278321,16 8.47625585,16 L7.52374415,16 C6.97306031,16 6.52502701,15.5539411 6.52502701,15.0036995 Z M8,10.949946 C9.62921026,10.949946 10.949946,9.62921026 10.949946,8 C10.949946,6.37078974 9.62921026,5.05005402 8,5.05005402 C6.37078974,5.05005402 5.05005402,6.37078974 5.05005402,8 C5.05005402,9.62921026 6.37078974,10.949946 8,10.949946 Z M8,10.949946'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-single-caret-left:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-single-caret-left')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M4.91424469,7.41815094 L4.5606913,7.77170433 L4.91424469,8.12525772 L9.85380275,13.0648158 L10.5609095,12.357709 L5.97815815,7.76845104 L10.6213515,3.12525772 L9.91424469,2.41815094 L4.91424469,7.41815094 Z M4.91424469,7.41815094'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-single-caret-right:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-single-caret-right')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M11.6213515,8.06481578 L11.9749049,7.71126239 L11.6213515,7.357709 L6.68179341,2.41815094 L5.97468662,3.12525772 L10.5764289,7.69552479 L5.91424469,12.357709 L6.62135147,13.0648158 L11.6213515,8.06481578 Z M11.6213515,8.06481578'), 'fill': new templates.Attribute('#979797')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-snooze:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-snooze')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'fill': new templates.Attribute('#7D8F95'), 'd': new templates.Attribute('M5.07559127,1.51768124 C5.18671943,1.62854806 5.27954989,1.75246298 5.3545156,1.88688555 L0.888976184,6.34192319 C0.754236749,6.26713378 0.630029722,6.17452163 0.518901561,6.06365482 C-0.377179046,5.16968155 -0.08354615,3.42732233 1.17474903,2.17198633 C2.43304421,0.916650329 4.17951066,0.62370798 5.07559127,1.51768124 Z M7.95937135,12.6343148 C10.2404202,12.6343148 12.0895754,10.7895083 12.0895754,8.51382388 C12.0895754,6.23813948 10.2404202,4.39333298 7.95937135,4.39333298 C5.67832253,4.39333298 3.8291673,6.23813948 3.8291673,8.51382388 C3.8291673,10.7895083 5.67832253,12.6343148 7.95937135,12.6343148 Z M15.4810984,6.06365482 C15.3699703,6.17452163 15.2457633,6.26713378 15.1110238,6.34192319 L10.6454844,1.88688555 C10.7204501,1.75246298 10.8132806,1.62854806 10.9244087,1.51768124 C11.8204893,0.62370798 13.5669558,0.916650329 14.825251,2.17198633 C16.0835462,3.42732233 16.377179,5.16968155 15.4810984,6.06365482 Z M7.95937135,14.4656441 C6.87006693,14.4656441 5.84895009,14.1743851 4.96998135,13.6656603 L3.90132048,14.731808 C3.54288827,15.0893973 2.96175481,15.0893973 2.60332257,14.7318081 C2.24489033,14.3742188 2.24489031,13.794452 2.60332252,13.4368627 L3.53540821,12.506969 C2.57718692,11.4510013 1.99352105,10.0504136 1.99352105,8.51382388 C1.99352105,5.22672419 4.66452305,2.56200369 7.95937135,2.56200369 C11.2542197,2.56200369 13.9252216,5.22672419 13.9252216,8.51382388 C13.9252216,10.0137487 13.3690774,11.3840845 12.4512852,12.4307929 L13.4597264,13.4368627 C13.8181586,13.794452 13.8181586,14.3742188 13.4597264,14.7318081 C13.1012941,15.0893973 12.5201607,15.0893973 12.1617285,14.731808 L11.0394053,13.6121241 C10.1403093,14.1538999 9.08633204,14.4656441 7.95937135,14.4656441 Z M7.38618005,8.53126085 L7.38618005,6.36415805 C7.38618005,6.11130424 7.59164176,5.90632573 7.84509162,5.90632573 C8.09854147,5.90632573 8.30400318,6.11130424 8.30400318,6.36415805 L8.30400318,8.238968 L10.0566159,9.02858351 C10.2874619,9.13296513 10.389782,9.40428072 10.2851544,9.63458383 C10.1805267,9.86488695 9.90857152,9.96696649 9.67772551,9.86258487 L7.65564645,8.94826153 C7.49157247,8.87407222 7.38618005,8.71097689 7.38618005,8.53126085 Z M7.38618005,8.53126085')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-source:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-source')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8,0 C12.4182782,0 16,3.58172178 16,8 C16,8.22438702 15.9907619,8.44661636 15.9726454,8.66632846 C15.9906359,8.77401137 16,8.88460994 16,8.9973917 L16,14.0026083 C16,15.1041422 15.1057373,16 14.0026083,16 L8.9973917,16 C8.88466474,16 8.77409177,15.9906346 8.66641248,15.9726385 C8.44667302,15.9907596 8.22441562,16 8,16 C3.58172178,16 0,12.4182782 0,8 C0,3.58172178 3.58172178,0 8,0 Z M12,8 C12,5.79086089 10.2091391,4 8,4 C5.79086089,4 4,5.79086089 4,8 C4,10.2091391 5.79086089,12 8,12 C10.2091391,12 12,10.2091391 12,8 Z M12,8'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-strikethrough:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-strikethrough')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M5.566,9c0.602,0.367,1.401,0.594,2.295,0.797\nc1.235,0.287,1.534,0.494,1.534,0.871v0.025c0,0.391-0.362,0.625-1.04,0.625c-1.054,0-2.055-0.377-2.951-1.092L4,11.902\nc1.118,1.002,2.652,1.51,4.262,1.511c2.21,0,3.679-1.106,3.679-2.965v-0.025c0-0.584-0.152-1.048-0.438-1.423H14V8h-3.996\nC9.578,7.839,9.09,7.707,8.548,7.589C7.287,7.302,6.975,7.12,6.975,6.704V6.679c0-0.326,0.3-0.586,0.91-0.586\nc0.807,0,1.717,0.312,2.549,0.897l1.262-1.781C10.707,4.416,9.498,4,7.951,4C5.767,4,4.428,5.222,4.428,6.912v0.026\nc0,0.415,0.073,0.764,0.208,1.062H2v1H5.566L5.566,9z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-tag:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-tag')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8.57543251,0.570992566 C9.33518071,-0.188997532 10.5632763,-0.190232657 11.319981,0.56671304 L15.4317057,4.6797468 C16.193772,5.44205578 16.186495,6.66585997 15.4274275,7.42516918 L8.58346121,14.2713145 C8.53876079,14.3160292 8.49243912,14.3581173 8.44468758,14.397579 C7.55790567,15.3814977 6.27370542,16 4.84509211,16 C2.1692215,16 -5.5067062e-14,13.8300878 -5.5067062e-14,11.1533652 C-5.5067062e-14,9.71244038 0.628607895,8.41838161 1.62646849,7.53062665 C1.65970295,7.49177765 1.69470286,7.45391301 1.73146623,7.41713792 L8.57543251,0.570992566 Z M6.46898462,11.4441633 C6.46898462,10.3734743 5.60129602,9.50550942 4.53094777,9.50550942 C3.46059953,9.50550942 2.59291093,10.3734743 2.59291093,11.4441633 C2.59291093,12.5148524 3.46059953,13.3828172 4.53094777,13.3828172 C5.60129602,13.3828172 6.46898462,12.5148524 6.46898462,11.4441633 Z M6.46898462,11.4441633'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-underline:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-underline')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M4,7.396V3h2.203v4.351c0,1.13,0.57,1.667,1.443,1.667\nc0.872,0,1.442-0.515,1.442-1.608V3.001h2.203V7.34c0,2.528-1.441,3.637-3.668,3.637C5.397,10.977,4,9.846,4,7.396L4,7.396L4,7.396z\nM4,12v1h8v-1H4L4,12z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-undo:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-undo')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M4.164,3.904C3.551,4.479,3.072,5.145,2.73,5.867L0,3v7h6.666 L4.368,7.587C4.554,6.733,5,5.948,5.673,5.318C6.579,4.467,7.784,4,9.066,4c1.281,0,2.486,0.468,3.394,1.318 s1.405,1.979,1.405,3.182s-0.498,2.332-1.405,3.182c-0.417,0.392-0.417,1.023,0,1.414c0.208,0.195,0.481,0.293,0.755,0.293 s0.547-0.098,0.754-0.293C15.279,11.868,16,10.236,16,8.5c0-1.737-0.721-3.368-2.031-4.596C12.659,2.677,10.919,2,9.066,2 C7.213,2,5.473,2.677,4.164,3.904z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('icon-download:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-download')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M8,15.5974351 C6.8314209,15.5974349 4.82369258,12.189232 2.62719727,12.189232 L0,12.189232 L0,13.6900647 C0,15.0703167 1.12508893,16.189232 2.5,16.189232 L13.5,16.189232 C14.8807119,16.189232 16,15.075009 16,13.6900647 L16,12.189232 L13.0529785,12.189232 C11.4468363,12.189232 9.1685791,15.5974353 8,15.5974351 Z M2.20243693,6.45473355 L7.29170396,12.6332592 C7.68218504,13.1073152 8.3177251,13.1084476 8.70913897,12.6332592 L13.798406,6.45473355 C14.1888871,5.9806776 13.9951847,5.59432885 13.3636761,5.59432885 L9.42057903,5.59432885 L9.42057895,1.13612873 C9.42057894,0.583087823 8.96627878,0.134759583 8.42253633,0.134759583 L7.15134966,0.134759583 C6.60014595,0.134759583 6.15330706,0.58153905 6.15330707,1.13612873 L6.15330714,5.59432885 L2.63716686,5.59432885 C2.00386029,5.59432885 1.81102306,5.97954515 2.20243693,6.45473355 Z M2.20243693,6.45473355'), 'fill': new templates.Attribute('#3F484B')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('meta:index').template = new templates.Template([new templates.ConditionalBlock([new expressions.AttributePathExpression('mobile', [], new expressions.ExpressionMeta('if @mobile', 'if'))], [
    [new templates.Element('meta', {'name': new templates.Attribute('viewport'), 'content': new templates.Attribute('width=device-width, initial-scale=1.0, user-scalable=yes')}, null, void 0, false)]
  ]), new templates.Element('meta', {'id': new templates.Attribute('lever-env'), 'content': new templates.DynamicAttribute(new expressions.PathExpression(['_session', 'leverEnv'], new expressions.ExpressionMeta('_session.leverEnv')))}, null, void 0, false), new templates.Element('link', {'rel': new templates.Attribute('apple-touch-icon'), 'href': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.img')], void 0, new expressions.ExpressionMeta('url(\'hire.img\')'))), new templates.Text('/lever-ios-icon-152.png')]))}, null, void 0, false), new templates.Element('link', {'rel': new templates.Attribute('chrome-webstore-item'), 'href': new templates.Attribute('https://chrome.google.com/webstore/detail/dgbcohbjchndmjocioegkgdniaffcaia')}, null, void 0, false)]);
  views.register('page:index', null, {'attributes': 'page-nav'}).template = new templates.Template([new templates.ViewInstance('d-before-unload', {}), new templates.ViewInstance('connection-alert', {}), new templates.Element('div', {'id': new templates.Attribute('page')}, [new templates.Element('header', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.PathExpression(['_session', 'leverUserId']), new expressions.OperatorExpression('!U', [new expressions.PathExpression(['_session', 'demo'])])], void 0, new expressions.ExpressionMeta('if _session.leverUserId && !_session.demo', 'if'))], [
    [new templates.Text('face-off')]
  ]))}, [new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.PathExpression(['_session', 'leverUserId']), new expressions.OperatorExpression('!U', [new expressions.PathExpression(['_session', 'demo'])])], void 0, new expressions.ExpressionMeta('if _session.leverUserId && !_session.demo', 'if'))], [
    [new templates.Element('div', {'style': new templates.Attribute('position: absolute; top: 18px; font-size: 26px; width: 100%; text-align: center; color: white')}, [new templates.Text('Faced off as '), new templates.DynamicText(new expressions.PathExpression(['_session', 'user', 'name'], new expressions.ExpressionMeta('_session.user.name'))), new templates.Text(' ('), new templates.DynamicText(new expressions.PathExpression(['_session', 'account', 'name'], new expressions.ExpressionMeta('_session.account.name'))), new templates.Text(')')], void 0, false)]
  ]), new templates.ViewInstance('page:app-nav', {}), new templates.DynamicText(new expressions.AttributePathExpression('pageNav', [], new expressions.ExpressionMeta('@pageNav'))), new templates.Element('div', {'class': new templates.Attribute('header-nav-right')}, [new templates.ConditionalBlock([new expressions.PathExpression(['_session', 'hasAccess', 'limited'], new expressions.ExpressionMeta('if _session.hasAccess.limited', 'if'))], [
    [new templates.ViewInstance('search-box', {})]
  ]), new templates.ViewInstance('l-identicon', {'class': 'user-icon', 'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['_session', 'user'], new expressions.ExpressionMeta('_session.user'))), new expressions.PathExpression(['_session', 'user'], new expressions.ExpressionMeta('_session.user')))}), new templates.ViewInstance('l-popup', {'hoverTarget': '.header-nav-right .identicon', 'class': 'user-settings-menu has-menu tall-option caps-option', 'position': 'bottom-right', 'margin': 26, 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.Element('li', {'class': new templates.Attribute('header-nav-name')}, [new templates.DynamicText(new expressions.PathExpression(['_session', 'user', 'email'], new expressions.ExpressionMeta('_session.user.email')))], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('https://lever.co/help.html'), 'target': new templates.Attribute('_blank'), 'title': new templates.Attribute('Find answers to common questions')}, [new templates.Text('Help & tips')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'id': new templates.Attribute('IntercomButton'), 'href': new templates.Attribute('mailto:support@lever.co'), 'target': new templates.Attribute('_blank')}, [new templates.Text('Contact support')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('javascript:chrome.webstore.install()')}, [new templates.Text('Install extension')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option signout-option has-icon')}, [new templates.Element('a', {'class': new templates.Attribute('has-icon'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.auth.logout')], void 0, new expressions.ExpressionMeta('url(\'hire.auth.logout\')')))}, [new templates.Text('Sign out'), new templates.ViewInstance('icon-logout', {})], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['_session', 'leverUserId'], new expressions.ExpressionMeta('if _session.leverUserId', 'if'))], [
    [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.faceoff.return')], void 0, new expressions.ExpressionMeta('url(\'hire.faceoff.return\')')))}, [new templates.Text('Face on')], void 0, false)], void 0, false)]
  ])], void 0, false)]))})], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['_page', 'loading'], new expressions.ExpressionMeta('if _page.loading', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('content page-loading')}, [new templates.Element('div', {'class': new templates.Attribute('loading-indicator fadein')}, [], void 0, false)], void 0, false)],
    [new templates.DynamicViewInstance(new expressions.PathExpression(['$render', 'ns'], new expressions.ExpressionMeta('$render.ns')), {}, [new templates.MarkupAs(['page', 'component'])])]
  ])], void 0, false), new templates.ViewInstance('notifications', {}, [new templates.MarkupAs(['page', 'notifications'])]), new templates.ViewInstance('hire-modal', {}), new templates.ViewInstance('l-tip', {'selector': '.has-tip'})]);
  views.register('page:app-nav').template = new templates.Template([new templates.ConditionalBlock([new expressions.PathExpression(['_session', 'hasAccess', 'limited'], new expressions.ExpressionMeta('if _session.hasAccess.limited', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('l-popup', {'class': 'app-nav-popup darker tall-option has-menu has-icon caps-option', 'position': 'none', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.home')], void 0, new expressions.ExpressionMeta('url(\'hire.home\')')))}, [new templates.ViewInstance('icon-mine-list', {}), new templates.Text('Home')], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['_session', 'hasAccess', 'candidates'], new expressions.ExpressionMeta('if _session.hasAccess.candidates', 'if'))], [
      [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.postings.list')], void 0, new expressions.ExpressionMeta('url(\'hire.postings.list\')')))}, [new templates.ViewInstance('icon-postings', {}), new templates.Text('Postings')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index')], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\')')))}, [new templates.Text('Reports'), new templates.ViewInstance('icon-reports', {})], void 0, false)], void 0, false)]
    ]), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.interviews.list')], void 0, new expressions.ExpressionMeta('url(\'hire.interviews.list\')')))}, [new templates.ViewInstance('icon-reactions-list', {}), new templates.Text('Interviews')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.index')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.index\')')))}, [new templates.ViewInstance('icon-settings', {}), new templates.Text('Settings')], void 0, false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['appNavPopup'])]), new templates.Element('a', {'class': new templates.Attribute('app-nav'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-logo-lever', {}), new templates.ViewInstance('icon-caret-down', {})], [new templates.ElementOn('click', new expressions.FnExpression(['appNavPopup', 'toggle'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('div', {'class': new templates.Attribute('app-nav nav-disabled')}, [new templates.ViewInstance('icon-logo-lever', {})], void 0, false)]
  ])]);
  views.register('track:index').template = new templates.Template([new templates.Element('script', {'type': new templates.Attribute('text/javascript')}, [new templates.Text('window.analytics=window.analytics||[],window.analytics.methods=["identify","group","track","page","pageview","alias","ready","on","once","off","trackLink","trackForm","trackClick","trackSubmit"],window.analytics.factory=function(t){return function(){var a=Array.prototype.slice.call(arguments);return a.unshift(t),window.analytics.push(a),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var key=window.analytics.methods[i];window.analytics[key]=window.analytics.factory(key)}window.analytics.load=function(t){if(!document.getElementById("analytics-js")){var a=document.createElement("script");a.type="text/javascript",a.id="analytics-js",a.async=!0,a.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.io/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(a,n)}},window.analytics.SNIPPET_VERSION="2.0.9",window.analytics.load("'), new templates.DynamicText(new expressions.PathExpression(['_session', 'segment'], new expressions.ExpressionMeta('_session.segment'))), new templates.Text('");window.analytics.page();')], void 0, false)]);
  views.register('partials:timezone').template = new templates.Template([new templates.Element('span', {'class': new templates.Attribute('timezone has-tip'), 'title': new templates.DynamicAttribute(new expressions.FnExpression(['displayTimezone'], [new expressions.AttributePathExpression('timezone', [])], void 0, new expressions.ExpressionMeta('displayTimezone(@timezone)')))}, [new templates.DynamicText(new expressions.FnExpression(['displayTimezoneAbbreviation'], [new expressions.AttributePathExpression('timezone', [])], void 0, new expressions.ExpressionMeta('displayTimezoneAbbreviation(@timezone)')))], void 0, false)]);
  views.register('lists:candidates:Title').template = new templates.Template([new templates.ConditionalBlock([new expressions.PathExpression(['$render', 'params', 'profileId'], new expressions.ExpressionMeta('if $render.params.profileId', 'if'))], [
    [new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['profiles']), new expressions.RelativePathExpression([]), ['names', 0], new expressions.ExpressionMeta('profiles[this].names[0]'))), new templates.Text(' – ')]
  ]), new templates.Text('Lever Hire')]);
  views.register('lists:candidates:index').template = new templates.Template([new templates.Comment('lists:candidates:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('content')}, [new templates.ConditionalBlock([new expressions.PathExpression(['loading'], new expressions.ExpressionMeta('if loading', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('infinite-scroll')}, [new templates.Element('div', {'class': new templates.Attribute('list-content')}, [new templates.Element('div', {'class': new templates.Attribute('no-candidates')}, [new templates.Element('div', {'class': new templates.Attribute('loading-indicator fadein')}, [], void 0, false)], void 0, false)], void 0, false)], void 0, false)],
    [new templates.ViewInstance('infinite-scroll', {'stop': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stop'], new expressions.ExpressionMeta('stop'))), new expressions.PathExpression(['stop'], new expressions.ExpressionMeta('stop'))), 'content': new templates.ParentWrapper(new templates.Template([new templates.DynamicViewInstance(new expressions.OperatorExpression('?', [new expressions.AliasPathExpression('#root', ['$render', 'query', 'onlySnoozed']), new expressions.LiteralExpression('profile-list-snoozed'), new expressions.LiteralExpression('profile-list-by-stage')], void 0, new expressions.ExpressionMeta('#root.$render.query.onlySnoozed ? \'profile-list-snoozed\' : \'profile-list-by-stage\'')), {'stop': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stop'], new expressions.ExpressionMeta('stop'))), new expressions.PathExpression(['stop'], new expressions.ExpressionMeta('stop'))), 'profilesFilter': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profilesFilter'], new expressions.ExpressionMeta('profilesFilter'))), new expressions.PathExpression(['profilesFilter'], new expressions.ExpressionMeta('profilesFilter'))), 'profilesFields': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['profilesFields'], new expressions.ExpressionMeta('profilesFields'))), new expressions.PathExpression(['profilesFields'], new expressions.ExpressionMeta('profilesFields'))), 'diffList': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['diffList'], new expressions.ExpressionMeta('diffList'))), new expressions.PathExpression(['diffList'], new expressions.ExpressionMeta('diffList'))), 'selectMode': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['listSelectMode'], new expressions.ExpressionMeta('listSelectMode'))), new expressions.PathExpression(['listSelectMode'], new expressions.ExpressionMeta('listSelectMode')))}, [new templates.MarkupAs(['profileList']), new templates.ComponentOn('create', new expressions.FnExpression(['listNav', 'initList'], []))]), new templates.ConditionalBlock([new expressions.PathExpression(['loadingMore'], new expressions.ExpressionMeta('if loadingMore', 'if'))], [
      [new templates.Element('div', {'class': new templates.Attribute('loading-more')}, [new templates.Element('div', {'class': new templates.Attribute('loading-indicator')}, [], void 0, false)], void 0, false)]
    ])]))}, [new templates.MarkupAs(['infiniteScroll']), new templates.ComponentOn('scroll', new expressions.FnExpression(['listHeader', 'scroll'], [])), new templates.ComponentOn('more', new expressions.FnExpression(['more'], []))])]
  ]), new templates.ViewInstance('list-header', {'collapsableHeight': 156, 'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('lists:list-title', {'content': new templates.ParentWrapper(new templates.Template([new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['$render', 'query', 'onlyArchived'], new expressions.ExpressionMeta('if #root.$render.query.onlyArchived', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('h1', void 0, [new templates.Element('a', {'href': new templates.Attribute('?onlyArchived=true')}, [new templates.Text('Archive')], void 0, false)], void 0, false)],
    [new templates.Element('h1', void 0, [new templates.Element('a', {'href': new templates.Attribute('?')}, [new templates.Text('Candidates')], void 0, false)], void 0, false)]
  ]), new templates.ViewInstance('view-toggle', {})]))}), new templates.ViewInstance('pipeline', {}), new templates.ViewInstance('list-controls', {'diffList': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['diffList'], new expressions.ExpressionMeta('diffList'))), new expressions.PathExpression(['diffList'], new expressions.ExpressionMeta('diffList'))), 'selectMode': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['listSelectMode'], new expressions.ExpressionMeta('listSelectMode'))), new expressions.PathExpression(['listSelectMode'], new expressions.ExpressionMeta('listSelectMode'))), 'activeActions': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('lists:bulk-actions', {})])), 'defaultActions': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('lists:list-actions', {})]))}, [new templates.MarkupAs(['listControls'])])]))}, [new templates.MarkupAs(['listHeader'])]), new templates.Element('div', {'class': new templates.Attribute('sidebar')}, [new templates.ViewInstance('filtervis', {})], void 0, false), new templates.ViewInstance('profile-flyover', {'nav': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav'))), new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav')))}, [new templates.MarkupAs(['page', 'profileFlyover'])]), new templates.ViewInstance('list-nav', {'nav': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav'))), new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav')))}, [new templates.MarkupAs(['listNav'])])], void 0, false)]);
  views.register('lists:search:Title').template = new templates.Template([new templates.ConditionalBlock([new expressions.PathExpression(['$render', 'params', 'profileId'], new expressions.ExpressionMeta('if $render.params.profileId', 'if'))], [
    [new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['profiles']), new expressions.RelativePathExpression([]), ['names', 0], new expressions.ExpressionMeta('profiles[this].names[0]'))), new templates.Text(' – ')]
  ]), new templates.DynamicText(new expressions.PathExpression(['$render', 'query', 'q'], new expressions.ExpressionMeta('$render.query.q'))), new templates.Text(' – Lever Hire')]);
  views.register('lists:search:index').template = new templates.Template([new templates.Comment('lists:search:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('content')}, [new templates.ConditionalBlock([new expressions.PathExpression(['loading'], new expressions.ExpressionMeta('if loading', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('div', {'class': new templates.Attribute('infinite-scroll')}, [new templates.Element('div', {'class': new templates.Attribute('list-content')}, [new templates.Element('div', {'class': new templates.Attribute('no-candidates')}, [new templates.Element('div', {'class': new templates.Attribute('loading-indicator fadein')}, [], void 0, false)], void 0, false)], void 0, false)], void 0, false)],
    [new templates.ViewInstance('infinite-scroll', {'stop': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stop'], new expressions.ExpressionMeta('stop'))), new expressions.PathExpression(['stop'], new expressions.ExpressionMeta('stop'))), 'content': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('profile-list-search', {'query': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['query'], new expressions.ExpressionMeta('query'))), new expressions.PathExpression(['query'], new expressions.ExpressionMeta('query'))), 'diffList': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['diffList'], new expressions.ExpressionMeta('diffList'))), new expressions.PathExpression(['diffList'], new expressions.ExpressionMeta('diffList'))), 'selectMode': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['listSelectMode'], new expressions.ExpressionMeta('listSelectMode'))), new expressions.PathExpression(['listSelectMode'], new expressions.ExpressionMeta('listSelectMode')))}, [new templates.MarkupAs(['profileList']), new templates.ComponentOn('create', new expressions.FnExpression(['listNav', 'initList'], []))]), new templates.ConditionalBlock([new expressions.PathExpression(['loadingMore'], new expressions.ExpressionMeta('if loadingMore', 'if'))], [
      [new templates.Element('div', {'class': new templates.Attribute('loading-more')}, [new templates.Element('div', {'class': new templates.Attribute('loading-indicator')}, [], void 0, false)], void 0, false)]
    ])]))}, [new templates.MarkupAs(['infiniteScroll']), new templates.ComponentOn('more', new expressions.FnExpression(['more'], []))])]
  ]), new templates.Element('div', {'class': new templates.Attribute('list-header')}, [new templates.ViewInstance('lists:list-title', {'content': new templates.ParentWrapper(new templates.Template([new templates.Element('h1', void 0, [new templates.Text('‘'), new templates.DynamicText(new expressions.AliasPathExpression('#root', ['$render', 'query', 'q'], new expressions.ExpressionMeta('#root.$render.query.q'))), new templates.Text('’')], void 0, false), new templates.Element('h4', {'class': new templates.Attribute('results-count')}, [new templates.Element('span', {'class': new templates.Attribute('numbers')}, [new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'facets', 'profiles', 'total'], new expressions.ExpressionMeta('#root._page.facets.profiles.total')))], void 0, false), new templates.Text(' results')], void 0, false)]))}), new templates.ViewInstance('list-controls', {'diffList': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['diffList'], new expressions.ExpressionMeta('diffList'))), new expressions.PathExpression(['diffList'], new expressions.ExpressionMeta('diffList'))), 'selectMode': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['listSelectMode'], new expressions.ExpressionMeta('listSelectMode'))), new expressions.PathExpression(['listSelectMode'], new expressions.ExpressionMeta('listSelectMode'))), 'activeActions': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('lists:bulk-actions', {})]))}, [new templates.MarkupAs(['listControls'])])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('sidebar')}, [new templates.ViewInstance('filtervis', {})], void 0, false), new templates.ViewInstance('profile-flyover', {'nav': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav'))), new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav')))}, [new templates.MarkupAs(['page', 'profileFlyover'])]), new templates.ViewInstance('list-nav', {'nav': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav'))), new expressions.PathExpression(['nav'], new expressions.ExpressionMeta('nav')))}, [new templates.MarkupAs(['listNav'])])], void 0, false)]);
  views.register('lists:list-title').template = new templates.Template([new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('list-title '), new templates.ConditionalBlock([new expressions.PathExpression(['breadcrumbs'], new expressions.ExpressionMeta('if breadcrumbs', 'if'))], [
    [new templates.Text('breadcrumbs')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('list-title-wrapper')}, [new templates.DynamicText(new expressions.AttributePathExpression('content', [], new expressions.ExpressionMeta('@content')))], void 0, false), new templates.ViewInstance('breadcrumbs', {'breadcrumbs': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['breadcrumbs'], new expressions.ExpressionMeta('breadcrumbs'))), new expressions.PathExpression(['breadcrumbs'], new expressions.ExpressionMeta('breadcrumbs')))})], void 0, false)]);
  views.register('lists:list-actions').template = new templates.Template([]);
  views.register('lists:bulk-actions').template = new templates.Template([new templates.Element('li', void 0, [new templates.ViewInstance('bulk-stage-change', {})], void 0, false), new templates.Element('li', void 0, [new templates.ViewInstance('bulk-archive', {}, [new templates.MarkupAs(['bulkArchive'])])], void 0, false), new templates.Element('li', void 0, [new templates.ViewInstance('bulk-tag', {})], void 0, false), new templates.Element('li', void 0, [new templates.ViewInstance('bulk-share', {})], void 0, false), new templates.Element('li', void 0, [new templates.ViewInstance('bulk-email', {})], void 0, false), new templates.Element('li', void 0, [new templates.ViewInstance('bulk-delete', {}, [new templates.MarkupAs(['bulkDelete'])])], void 0, false)]);
  views.register('postings:list:Title').template = new templates.Template([new templates.Text('Postings – Lever Hire')]);
  views.register('postings:list:index').template = new templates.Template([new templates.Comment('postings:list:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('content')}, [new templates.Element('h1', void 0, [new templates.Text('Postings')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('postings-public-url')}, [new templates.Element('a', {'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('postings.postings.list'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('shortUrl'), new expressions.PathExpression(['siteUrl'])])], void 0, new expressions.ExpressionMeta('url(\'postings.postings.list\', {shortUrl: siteUrl})')))}, [new templates.DynamicText(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('postings.postings.list'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('shortUrl'), new expressions.PathExpression(['siteUrl'])])], void 0, new expressions.ExpressionMeta('url(\'postings.postings.list\', {shortUrl: siteUrl})')))], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('postings-listbar section')}, [new templates.Element('div', {'class': new templates.Attribute('postings-addnew')}, [new templates.Element('a', {'class': new templates.Attribute('btn has-icon'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.postings.new')], void 0, new expressions.ExpressionMeta('url(\'hire.postings.new\')')))}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('Add new posting')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('postings-sorts')}, [new templates.Element('div', {'class': new templates.Attribute('sort-label')}, [new templates.Text('Sort by:')], void 0, false), new templates.Element('a', {'href': new templates.Attribute('?sort=location'), 'class': new templates.Attribute('sort-option')}, [new templates.ViewInstance('icon-location', {}), new templates.Text(' Location')], void 0, false), new templates.Element('a', {'href': new templates.Attribute('?sort=commitment'), 'class': new templates.Attribute('sort-option border')}, [new templates.ViewInstance('icon-settings', {}), new templates.Text(' Commitment')], void 0, false), new templates.Element('a', {'href': new templates.Attribute('?sort=team'), 'class': new templates.Attribute('sort-option')}, [new templates.ViewInstance('icon-tag', {}), new templates.Text(' Team')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('clear')}, [], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('postings-list')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.AliasPathExpression('#root', ['postings_base'])], void 0, new expressions.ExpressionMeta('if !#root.postings_base', 'if'))], [
    [new templates.Text('You don\'t have any postings. '), new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.postings.new')], void 0, new expressions.ExpressionMeta('url(\'hire.postings.new\')')))}, [new templates.Text('Create your first posting')], void 0, false)]
  ]), new templates.Element('table', {'class': new templates.Attribute('postings-table')}, [new templates.EachBlock(new expressions.PathExpression(['postingsDisplay'], new expressions.ExpressionMeta('each postingsDisplay as #group', 'each', void 0, '#group')), [new templates.Element('tbody', void 0, [new templates.Element('tr', void 0, [new templates.Element('th', {'colspan': new templates.Attribute('5')}, [new templates.Element('h4', {'class': new templates.Attribute('group-header')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['groupBy']), new expressions.LiteralExpression('location')], void 0, new expressions.ExpressionMeta('if groupBy === \'location\'', 'if'))], [
    [new templates.ViewInstance('icon-location', {})]
  ]), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['groupBy']), new expressions.LiteralExpression('commitment')], void 0, new expressions.ExpressionMeta('if groupBy === \'commitment\'', 'if'))], [
    [new templates.ViewInstance('icon-settings', {})]
  ]), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['groupBy']), new expressions.LiteralExpression('team')], void 0, new expressions.ExpressionMeta('if groupBy === \'team\'', 'if'))], [
    [new templates.ViewInstance('icon-tag', {})]
  ]), new templates.DynamicText(new expressions.AliasPathExpression('#group', ['tagText'], new expressions.ExpressionMeta('#group.tagText')))], void 0, false)], void 0, false)], void 0, false), new templates.EachBlock(new expressions.AliasPathExpression('#group', ['postingList'], new expressions.ExpressionMeta('each #group.postingList as #item', 'each', void 0, '#item')), [new templates.Element('tr', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('postings-row '), new templates.DynamicText(new expressions.AliasPathExpression('#item', ['state'], new expressions.ExpressionMeta('#item.state')))]))}, [new templates.Element('td', {'class': new templates.Attribute('postings-list-active'), 'x-bind': new templates.Attribute('click')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['state']), new expressions.LiteralExpression('draft')], void 0, new expressions.ExpressionMeta('if #item.state === \'draft\'', 'if')), new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['state']), new expressions.LiteralExpression('closed')], void 0, new expressions.ExpressionMeta('else if #item.state === \'closed\'', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', void 0, [new templates.ViewInstance('icon-edit', {})], void 0, false)],
    [new templates.Element('a', void 0, [new templates.ViewInstance('icon-closed', {})], void 0, false)],
    [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.postings.edit'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('postingId'), new expressions.AliasPathExpression('#item', ['id'])])], void 0, new expressions.ExpressionMeta('url(\'hire.postings.edit\', {postingId: #item.id})')))}, [new templates.ViewInstance('icon-indicator-dot', {'class': new templates.ParentWrapper(new templates.ConditionalBlock([new expressions.AliasPathExpression('#item', ['active'], new expressions.ExpressionMeta('if #item.active', 'if'))], [
      [new templates.Text('on')]
    ]))})], void 0, false)]
  ])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('postings-list-link')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['state']), new expressions.LiteralExpression('active')]), new expressions.AliasPathExpression('#item', ['active'])], void 0, new expressions.ExpressionMeta('if #item.state === \'active\' && #item.active', 'if'))], [
    [new templates.Element('a', {'class': new templates.Attribute('has-tip'), 'title': new templates.Attribute('Link to job posting'), 'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('postings.postings.show'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('shortUrl'), new expressions.PathExpression(['siteUrl']), new expressions.LiteralExpression('posting'), new expressions.AliasPathExpression('#item', ['id'])])], void 0, new expressions.ExpressionMeta('url(\'postings.postings.show\', {shortUrl: siteUrl, posting: #item.id})')))}, [new templates.ViewInstance('icon-link', {})], void 0, false)]
  ])], void 0, false), new templates.Element('td', {'class': new templates.Attribute('postings-list-text')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.postings.edit'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('postingId'), new expressions.AliasPathExpression('#item', ['id'])])], void 0, new expressions.ExpressionMeta('url(\'hire.postings.edit\', {postingId: #item.id})')))}, [new templates.Element('span', {'class': new templates.Attribute('title')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['state']), new expressions.LiteralExpression('draft')], void 0, new expressions.ExpressionMeta('if #item.state === \'draft\'', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('postings-label draft')}, [new templates.Text('Draft')], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#item', ['state']), new expressions.LiteralExpression('closed')], void 0, new expressions.ExpressionMeta('if #item.state === \'closed\'', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('postings-label closed')}, [new templates.Text('Closed')], void 0, false)]
  ])], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('postings-list-tags')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.postings.edit'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('postingId'), new expressions.AliasPathExpression('#item', ['id'])])], void 0, new expressions.ExpressionMeta('url(\'hire.postings.edit\', {postingId: #item.id})')))}, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#item', ['categories', 'location'], new expressions.ExpressionMeta('if #item.categories.location', 'if'))], [
    [new templates.Element('span', {'class': new templates.Attribute('category')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['categories', 'location'], new expressions.ExpressionMeta('#item.categories.location')))], void 0, false), new templates.Text('⋅')]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#item', ['categories', 'commitment'], new expressions.ExpressionMeta('if #item.categories.commitment', 'if'))], [
    [new templates.Element('span', {'class': new templates.Attribute('category')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['categories', 'commitment'], new expressions.ExpressionMeta('#item.categories.commitment')))], void 0, false), new templates.Text('⋅')]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#item', ['categories', 'team'], new expressions.ExpressionMeta('if #item.categories.team', 'if'))], [
    [new templates.Element('span', {'class': new templates.Attribute('category')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['categories', 'team'], new expressions.ExpressionMeta('#item.categories.team')))], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.AliasPathExpression('#item', ['tagsText'], new expressions.ExpressionMeta('if #item.tagsText', 'if'))], [
    [new templates.Text('⋅')]
  ]), new templates.Element('span', {'class': new templates.Attribute('tags')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['tagsText'], new expressions.ExpressionMeta('#item.tagsText')))], void 0, false)], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('postings-list-applied')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['postingSearchUrl'], [new expressions.AliasPathExpression('#item', ['id'])], void 0, new expressions.ExpressionMeta('postingSearchUrl(#item.id)'))), 'class': new templates.Attribute('has-tip'), 'title': new templates.Attribute('Click to see current candidates')}, [new templates.DynamicText(new expressions.AliasPathExpression('#item', ['count'], new expressions.ExpressionMeta('#item.count'))), new templates.Text(' Applied')], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('postings-list-owner')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.postings.edit'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('postingId'), new expressions.AliasPathExpression('#item', ['id'])])], void 0, new expressions.ExpressionMeta('url(\'hire.postings.edit\', {postingId: #item.id})')))}, [new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#item', ['ownerId']), void 0, new expressions.ExpressionMeta('#root.users_base[#item.ownerId]'))), new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#item', ['ownerId']), void 0, new expressions.ExpressionMeta('#root.users_base[#item.ownerId]')))})], void 0, false)], void 0, false)], void 0, false)])], void 0, false)])], void 0, false)], void 0, false)], void 0, false)]);
  views.register('postings:edit:Title').template = new templates.Template([new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.PathExpression(['_page', 'postingTitle']), new expressions.LiteralExpression('New posting')], void 0, new expressions.ExpressionMeta('_page.postingTitle || \'New posting\''))), new templates.Text(' – Postings – Lever Hire')]);
  views.register('postings:edit:index').template = new templates.Template([new templates.Comment('postings:edit:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('content')}, [new templates.Element('div', {'class': new templates.Attribute('postings-nav section')}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.postings.list')], void 0, new expressions.ExpressionMeta('url(\'hire.postings.list\')')))}, [new templates.Text('<< Back to postings')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('postings-title section split-width-container')}, [new templates.ViewInstance('postings:edit:state-menu', {}), new templates.ViewInstance('postings:edit:confirm-delete', {}), new templates.Element('div', {'class': new templates.Attribute('right-float')}, [new templates.Element('div', {'class': new templates.Attribute('postings-toggle')}, [new templates.Element('div', {'class': new templates.Attribute('toggle-label')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('||', [new expressions.OperatorExpression('!U', [new expressions.PathExpression(['posting', 'state'])]), new expressions.OperatorExpression('===', [new expressions.PathExpression(['posting', 'state']), new expressions.LiteralExpression('active')])], void 0, new expressions.ExpressionMeta('if !posting.state || posting.state === \'active\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ConditionalBlock([new expressions.PathExpression(['posting', 'active'], new expressions.ExpressionMeta('if posting.active', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Text('Published')],
      [new templates.Text('Internal')]
    ]), new templates.Element('button', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('toggle-slider '), new templates.ConditionalBlock([new expressions.PathExpression(['posting', 'active'], new expressions.ExpressionMeta('if posting.active', 'if'))], [
      [new templates.Text('on')]
    ])]))}, [new templates.Element('div', {'class': new templates.Attribute('ball')}, [], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['toggleActive'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('postings-status-change postings-state-settings'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-settings', {})], [new templates.MarkupAs(['stateMenuToggle']), new templates.ElementOn('click', new expressions.FnExpression(['stateMenu', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('a', {'class': new templates.Attribute('postings-status-change postings-state-settings'), 'href': new templates.Attribute('#')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['posting', 'state']), new expressions.LiteralExpression('draft')], void 0, new expressions.ExpressionMeta('if posting.state === \'draft\'', 'if')), new expressions.OperatorExpression('===', [new expressions.PathExpression(['posting', 'state']), new expressions.LiteralExpression('closed')], void 0, new expressions.ExpressionMeta('else if posting.state === \'closed\'', 'else if'))], [
      [new templates.Text('Draft'), new templates.ViewInstance('icon-edit', {})],
      [new templates.Text('Closed'), new templates.ViewInstance('icon-closed', {})]
    ]), new templates.ViewInstance('icon-settings', {})], [new templates.MarkupAs(['stateMenuToggle']), new templates.ElementOn('click', new expressions.FnExpression(['stateMenu', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('last-updated small-label')}, [new templates.ConditionalBlock([new expressions.PathExpression(['posting', 'updatedAt'], new expressions.ExpressionMeta('if posting.updatedAt', 'if'))], [
    [new templates.Text('Last saved at '), new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['posting', 'updatedAt']), new expressions.PathExpression(['_session', 'timezoneName'])], void 0, new expressions.ExpressionMeta('formatTime(posting.updatedAt, _session.timezoneName)')))], void 0, false)]
  ])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('left-block')}, [new templates.Element('input', {'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['pending', 'text'], new expressions.ExpressionMeta('pending.text'))), 'placeholder': new templates.Attribute('Posting title'), 'class': new templates.Attribute('title-input')}, null, void 0, false)], void 0, false)], void 0, false), new templates.ViewInstance('postings:edit:categories', {}), new templates.ViewInstance('postings:edit:description', {}), new templates.ViewInstance('postings:edit:requirements', {}), new templates.ViewInstance('postings:edit:closing', {}), new templates.ViewInstance('postings:edit:tags', {}), new templates.ViewInstance('postings:edit:owner', {}), new templates.ViewInstance('postings:edit:forms', {}), new templates.Element('div', {'class': new templates.Attribute('postings-buttons section')}, [new templates.ConditionalBlock([new expressions.PathExpression(['categoryWarning'], new expressions.ExpressionMeta('if categoryWarning', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('inline-warning')}, [new templates.Element('p', void 0, [new templates.Text('You haven’t added a \''), new templates.DynamicText(new expressions.PathExpression(['categoryWarning', 'text'], new expressions.ExpressionMeta('categoryWarning.text'))), new templates.Text('\' category to this posting yet. Are you sure you want to leave it uncategorized?'), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Add category')], [new templates.ElementOn('click', new expressions.FnExpression(['clickCategory'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]
  ]), new templates.ConditionalBlock([new expressions.OperatorExpression('||', [new expressions.OperatorExpression('===', [new expressions.PathExpression(['posting', 'state']), new expressions.LiteralExpression('draft')]), new expressions.OperatorExpression('===', [new expressions.PathExpression(['posting', 'state']), new expressions.LiteralExpression('active')])], void 0, new expressions.ExpressionMeta('if posting.state === \'draft\' || posting.state === \'active\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Publish posting')], [new templates.ElementOn('click', new expressions.FnExpression(['publish'], []))], false), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.PathExpression(['posting', 'state']), new expressions.LiteralExpression('active')]), new expressions.PathExpression(['posting', 'active'])])], void 0, new expressions.ExpressionMeta('if !(posting.state === \'active\' && posting.active)', 'if'))], [
      [new templates.Element('a', {'class': new templates.Attribute('save-unpublished'), 'href': new templates.Attribute('#')}, [new templates.Text('Or, save changes')], [new templates.ElementOn('click', new expressions.FnExpression(['save'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
    ])],
    [new templates.Element('button', {'class': new templates.Attribute('submit')}, [new templates.Text('Save posting')], [new templates.ElementOn('click', new expressions.FnExpression(['save'], []))], false)]
  ])], void 0, false)], void 0, false)]);
  views.register('postings:edit:categories').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('postings-details section')}, [new templates.ViewInstance('l-suggest', {'placeholder': 'Add location', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['categorySuggestions', 'location'], new expressions.ExpressionMeta('categorySuggestions.location'))), new expressions.PathExpression(['categorySuggestions', 'location'], new expressions.ExpressionMeta('categorySuggestions.location'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['categoriesByName', 'location'], new expressions.ExpressionMeta('categoriesByName.location'))), new expressions.PathExpression(['categoriesByName', 'location'], new expressions.ExpressionMeta('categoriesByName.location')))}, [new templates.MarkupAs(['categorySuggest', 'location'])]), new templates.ViewInstance('l-suggest', {'placeholder': 'Full-time/part-time?', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['categorySuggestions', 'commitment'], new expressions.ExpressionMeta('categorySuggestions.commitment'))), new expressions.PathExpression(['categorySuggestions', 'commitment'], new expressions.ExpressionMeta('categorySuggestions.commitment'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['categoriesByName', 'commitment'], new expressions.ExpressionMeta('categoriesByName.commitment'))), new expressions.PathExpression(['categoriesByName', 'commitment'], new expressions.ExpressionMeta('categoriesByName.commitment')))}, [new templates.MarkupAs(['categorySuggest', 'commitment'])]), new templates.ViewInstance('l-suggest', {'placeholder': 'Add team / department', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['categorySuggestions', 'team'], new expressions.ExpressionMeta('categorySuggestions.team'))), new expressions.PathExpression(['categorySuggestions', 'team'], new expressions.ExpressionMeta('categorySuggestions.team'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['categoriesByName', 'team'], new expressions.ExpressionMeta('categoriesByName.team'))), new expressions.PathExpression(['categoriesByName', 'team'], new expressions.ExpressionMeta('categoriesByName.team')))}, [new templates.MarkupAs(['categorySuggest', 'team'])])], void 0, false)]);
  views.register('postings:edit:description').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('postings-description section')}, [new templates.Element('h4', void 0, [new templates.Text('Job Description')], void 0, false), new templates.Element('textarea', {'placeholder': new templates.Attribute('Add a description...')}, [new templates.DynamicText(new expressions.PathExpression(['pending', 'description'], new expressions.ExpressionMeta('pending.description')))], void 0, false)], void 0, false)]);
  views.register('postings:edit:requirements').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('postings-description section')}, [new templates.Element('h4', void 0, [new templates.Text('Lists '), new templates.Element('span', {'class': new templates.Attribute('postings-subheader')}, [new templates.Text('(for requirements, responsibilities, etc.)')], void 0, false)], void 0, false), new templates.EachBlock(new expressions.PathExpression(['pending', 'lists'], new expressions.ExpressionMeta('each pending.lists as #list, #index', 'each', void 0, '#list', '#index')), [new templates.Element('div', {'class': new templates.Attribute('requirements-list-wrapper')}, [new templates.Element('input', {'type': new templates.Attribute('text'), 'class': new templates.Attribute('requirements-list-header classic-input'), 'placeholder': new templates.Attribute('Title this list'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#list', ['text'], new expressions.ExpressionMeta('#list.text')))}, null, void 0, false), new templates.Element('a', {'class': new templates.Attribute('requirements-list-remove'), 'tabindex': new templates.Attribute('-1'), 'href': new templates.Attribute('#')}, [new templates.Text('Remove this section')], [new templates.ElementOn('click', new expressions.FnExpression(['removeList'], [new expressions.AliasPathExpression('#list', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('div', {'class': new templates.Attribute('requirements-list'), 'contenteditable': new templates.Attribute('true'), 'placeholder': new templates.Attribute('Requirements')}, [new templates.DynamicHtml(new expressions.AliasPathExpression('#list', ['content'], new expressions.ExpressionMeta('unbound unescaped #list.content', void 0, void 0, void 0, void 0, true, 'unbound')))], [new templates.ElementOn('input', new expressions.FnExpression(['listInput'], [new expressions.PathExpression(['$element']), new expressions.AliasPathExpression('#index', [])]))], false)], void 0, false)]), new templates.Element('a', {'class': new templates.Attribute('btn postings-list-add'), 'href': new templates.Attribute('#')}, [new templates.Text('Add a list')], [new templates.ElementOn('click', new expressions.FnExpression(['newList'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]);
  views.register('postings:edit:closing').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('postings-description section')}, [new templates.Element('h4', void 0, [new templates.Text('Closing '), new templates.Element('span', {'class': new templates.Attribute('postings-subheader')}, [new templates.Text('(optional)')], void 0, false)], void 0, false), new templates.Element('textarea', {'placeholder': new templates.Attribute('Add a closing...')}, [new templates.DynamicText(new expressions.PathExpression(['pending', 'additional'], new expressions.ExpressionMeta('pending.additional')))], void 0, false)], void 0, false)]);
  views.register('postings:edit:tags').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('postings-tags section')}, [new templates.Element('h4', void 0, [new templates.ViewInstance('icon-logo-lever-dark', {}), new templates.Text(' For importing into Lever')], void 0, false), new templates.Element('p', {'class': new templates.Attribute('postings-microcopy')}, [new templates.Text('These tags will be applied to each applicant.')], void 0, false), new templates.Element('div', void 0, [new templates.ViewInstance('l-multi-suggest', {'inherit': true, 'placeholder': 'Add tag', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), new expressions.AliasPathExpression('#root', ['tags'], new expressions.ExpressionMeta('#root.tags'))), 'ids': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pending', 'tagIds'], new expressions.ExpressionMeta('pending.tagIds'))), new expressions.PathExpression(['pending', 'tagIds'], new expressions.ExpressionMeta('pending.tagIds'))), 'filter': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), new expressions.PathExpression(['filter'], new expressions.ExpressionMeta('filter'))), 'sort': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), new expressions.PathExpression(['sort'], new expressions.ExpressionMeta('sort'))), 'class': 'tags', 'label': new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#item', ['text'], new expressions.ExpressionMeta('#item.text')))]), 'prepend': new templates.Template([new templates.Element('span', {'class': new templates.Attribute('count')}, [new templates.DynamicText(new expressions.AliasPathExpression('#result', ['option', 'count'], new expressions.ExpressionMeta('#result.option.count')))], void 0, false)])}, [new templates.MarkupAs(['tagsSuggest'])])], void 0, false)], void 0, false)]);
  views.register('postings:edit:owner').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('postings-owner section')}, [new templates.Element('h4', void 0, [new templates.Text('Posting owner')], void 0, false), new templates.Element('p', {'class': new templates.Attribute('postings-microcopy')}, [new templates.Text('Who will own the candidates that apply to this job?')], void 0, false), new templates.ViewInstance('l-user-picker', {'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pending', 'ownerId'], new expressions.ExpressionMeta('pending.ownerId'))), new expressions.PathExpression(['pending', 'ownerId'], new expressions.ExpressionMeta('pending.ownerId'))), 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), new expressions.AliasPathExpression('#root', ['users_base'], new expressions.ExpressionMeta('#root.users_base'))), 'clearable': 'true'})], void 0, false)]);
  views.register('postings:edit:forms').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('postings-custom section')}, [new templates.Element('h4', void 0, [new templates.Text('Add custom questions to application')], void 0, false), new templates.Element('br', void 0, null, void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['cardTemplateOptions'], new expressions.ExpressionMeta('if cardTemplateOptions', 'if'))], [
    [new templates.Element('button', {'class': new templates.Attribute('btn')}, [new templates.Text('Choose custom questions')], [new templates.ElementOn('click', new expressions.FnExpression(['cardTemplateMenu', 'toggle'], [new expressions.PathExpression(['$element'])]))], false), new templates.ViewInstance('l-popup', {'class': 'has-menu', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['cardTemplateOptions'], new expressions.ExpressionMeta('each cardTemplateOptions as #template', 'each', void 0, '#template')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#template', ['text'], new expressions.ExpressionMeta('#template.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['selectTemplate'], [new expressions.AliasPathExpression('#template', ['id'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false)]))}, [new templates.MarkupAs(['cardTemplateMenu'])]), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.PathExpression(['pendingTemplate'])], void 0, new expressions.ExpressionMeta('if !pendingTemplate', 'if'))], [
      [new templates.Element('span', {'class': new templates.Attribute('postings-custom-options-divider')}, [new templates.Text(' or ')], void 0, false)]
    ])]
  ]), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.PathExpression(['pendingTemplate'])], void 0, new expressions.ExpressionMeta('if !pendingTemplate', 'if'))], [
    [new templates.Element('button', {'class': new templates.Attribute('btn has-icon postings-card-add')}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('Create new questions')], [new templates.ElementOn('click', new expressions.FnExpression(['cardEditor', 'newCard'], []))], false)]
  ]), new templates.ViewInstance('card-editor', {'pending': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pendingTemplate'], new expressions.ExpressionMeta('pendingTemplate'))), new expressions.PathExpression(['pendingTemplate'], new expressions.ExpressionMeta('pendingTemplate'))), 'mode': 'user'}, [new templates.MarkupAs(['cardEditor']), new templates.ComponentOn('submit', new expressions.FnExpression(['submitCard'], []))]), new templates.Element('div', {'class': new templates.Attribute('postings-custom-form-unit-wrapper')}, [new templates.EachBlock(new expressions.PathExpression(['additionalCards'], new expressions.ExpressionMeta('each additionalCards as #template', 'each', void 0, '#template')), [new templates.Element('div', {'class': new templates.Attribute('postings-custom-form-unit link-bar')}, [new templates.Element('h3', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#template', ['text'], new expressions.ExpressionMeta('#template.text')))], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Remove')], [new templates.ElementOn('click', new expressions.FnExpression(['removeTemplate'], [new expressions.AliasPathExpression('#template', ['id'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Edit')], [new templates.ElementOn('click', new expressions.FnExpression(['cardEditor', 'openCard'], [new expressions.AliasPathExpression('#template', ['id'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('postings:edit:state-menu').template = new templates.Template([new templates.ViewInstance('l-popup', {'class': 'tall-option caps-option has-menu has-icon', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-indicator-dot', {'class': 'on'}), new templates.Text(' Published')], [new templates.ElementOn('click', new expressions.FnExpression(['setState'], [new expressions.LiteralExpression('published')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-indicator-dot', {}), new templates.Text(' Internal')], [new templates.ElementOn('click', new expressions.FnExpression(['setState'], [new expressions.LiteralExpression('internal')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('divider')}, [], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option divider-top')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-edit', {}), new templates.Text(' Draft')], [new templates.ElementOn('click', new expressions.FnExpression(['setState'], [new expressions.LiteralExpression('draft')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-closed', {}), new templates.Text(' Closed')], [new templates.ElementOn('click', new expressions.FnExpression(['setState'], [new expressions.LiteralExpression('closed')])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('divider')}, [], void 0, false), new templates.Element('li', {'class': new templates.Attribute('option secondary')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {}), new templates.Text(' Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['showDelete'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['stateMenu'])])]);
  views.register('postings:edit:confirm-delete').template = new templates.Template([new templates.ViewInstance('l-popup', {'class': 'delete-confirm-popup darker', 'position': 'bottom', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('div', {'class': new templates.Attribute('posting-delete-confirm')}, [new templates.ConditionalBlock([new expressions.PathExpression(['postingCount'], new expressions.ExpressionMeta('if postingCount', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('p', {'class': new templates.Attribute('larger white')}, [new templates.Text('Be VERY careful! The job posting will be removed from '), new templates.DynamicText(new expressions.PathExpression(['postingCount'], new expressions.ExpressionMeta('postingCount'))), new templates.Text(' candidates. Also, ALL data about this job posting will be deleted. Make sure you are ABSOLUTELY certain before deleting this posting.')], void 0, false)],
    [new templates.Element('p', {'class': new templates.Attribute('larger white')}, [new templates.Text('All data about this job posting will be deleted.')], void 0, false), new templates.Element('p', {'class': new templates.Attribute('larger')}, [new templates.Text('(No candidates have applied to this job yet.)')], void 0, false)]
  ]), new templates.Element('p', {'class': new templates.Attribute('secondary')}, [new templates.Text('This cannot be undone.'), new templates.Element('br', void 0, null, void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteConfirm', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('dark-button transparent')}, [new templates.Text('Delete posting')], [new templates.ElementOn('click', new expressions.FnExpression(['deletePosting'], []))], false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['deleteConfirm'])])]);
  views.register('profiles:print:Title').template = new templates.Template([new templates.Text('Interview feedback')]);
  views.register('profiles:print:Body').template = new templates.Template([new templates.ViewInstance('profiles:print:feedback', {}, [new templates.MarkupAs(['page', 'component'])])]);
  views.register('profiles:print:feedback').template = new templates.Template([new templates.Comment('profiles:print:feedback', [new templates.ComponentMarker()]), new templates.Element('div', {'style': new templates.Attribute('max-width:800px;width:90%;padding:0 30px 0 30px;font-family:\'Meta\',sans-serif;margin: 0 auto'), 'class': new templates.Attribute('content')}, [new templates.ViewInstance('profiles:print:summary-header', {}), new templates.ConditionalBlock([new expressions.PathExpression(['interviewCards'], new expressions.ExpressionMeta('if interviewCards', 'if'))], [
    [new templates.Element('div', {'style': new templates.Attribute('border:40px solid #dcdcdc; border-top-width: 0px; border-bottom-width: 0px; height:1px; width:100%'), 'class': new templates.Attribute('spaced-divider')}, [], void 0, false), new templates.ViewInstance('profiles:print:interview-cards', {})]
  ]), new templates.Element('div', {'class': new templates.Attribute('profiles-summary-export')}, [new templates.Text('  '), new templates.ConditionalBlock([new expressions.PathExpression(['referralCards'], new expressions.ExpressionMeta('if referralCards', 'if'))], [
    [new templates.Element('div', {'style': new templates.Attribute('border:40px solid #dcdcdc; border-top-width: 0px; border-bottom-width: 0px; height:1px; width:100%'), 'class': new templates.Attribute('spaced-divider')}, [], void 0, false), new templates.ViewInstance('profiles:print:referral-cards', {})]
  ]), new templates.ConditionalBlock([new expressions.OperatorExpression('||', [new expressions.PathExpression(['profile', 'schools']), new expressions.PathExpression(['profile', 'positions'])], void 0, new expressions.ExpressionMeta('if profile.schools || profile.positions', 'if'))], [
    [new templates.ViewInstance('profiles:print:schools-positions', {})]
  ])], void 0, false), new templates.Text('  ')], void 0, false)]);
  views.register('profiles:print:summary-header').template = new templates.Template([new templates.Element('div', {'style': new templates.Attribute('margin:20px 0'), 'class': new templates.Attribute('section summary-header')}, [new templates.Element('h1', {'style': new templates.Attribute('padding: 8px 0')}, [new templates.Element('a', {'style': new templates.Attribute('color:inherit;text-decoration:none'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.profiles.history'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('profileId'), new expressions.PathExpression(['profile', 'id'])])], void 0, new expressions.ExpressionMeta('url(\'hire.profiles.history\', {profileId: profile.id})')))}, [new templates.DynamicText(new expressions.PathExpression(['profile', 'names', 0], new expressions.ExpressionMeta('profile.names[0]')))], void 0, false)], void 0, false), new templates.Element('div', {'style': new templates.Attribute('padding: 8px 0'), 'class': new templates.Attribute('current-position position')}, [new templates.Element('h3', {'class': new templates.Attribute('current-title')}, [new templates.DynamicText(new expressions.PathExpression(['profile', 'positions', 0, 'title'], new expressions.ExpressionMeta('profile.positions[0].title')))], void 0, false), new templates.Element('h4', {'style': new templates.Attribute('margin-top: 8px'), 'class': new templates.Attribute('current-company')}, [new templates.DynamicText(new expressions.PathExpression(['profile', 'positions', 0, 'org'], new expressions.ExpressionMeta('profile.positions[0].org')))], void 0, false)], void 0, false), new templates.Element('div', {'style': new templates.Attribute('padding: 8px 0;'), 'class': new templates.Attribute('current-tags')}, [new templates.EachBlock(new expressions.PathExpression(['profile', 'tagIds'], new expressions.ExpressionMeta('each profile.tagIds as #tagId', 'each', void 0, '#tagId')), [new templates.Element('span', {'style': new templates.Attribute('margin-right: 8px; margin-left:0'), 'class': new templates.Attribute('tag-unit')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['tags']), new expressions.AliasPathExpression('#tagId', []), ['text'], new expressions.ExpressionMeta('#root.tags[#tagId].text')))], void 0, false)])], void 0, false)], void 0, false)]);
  views.register('profiles:print:interview-cards').template = new templates.Template([new templates.Element('div', {'style': new templates.Attribute('margin:20px 0'), 'class': new templates.Attribute('section summary-feedback')}, [new templates.Element('h2', {'style': new templates.Attribute('margin-top: 40px'), 'class': new templates.Attribute('profile-section-header')}, [new templates.Text('Feedback')], void 0, false), new templates.EachBlock(new expressions.PathExpression(['interviewCards'], new expressions.ExpressionMeta('each interviewCards as #profileCard', 'each', void 0, '#profileCard')), [new templates.Element('table', {'style': new templates.Attribute('width: 100%; margin:20px 0'), 'class': new templates.Attribute('summary-feedback-table')}, [new templates.Element('thead', void 0, [new templates.Element('tr', void 0, [new templates.Element('td', {'style': new templates.Attribute('padding: 8px 10px; width: 100%; vertical-align: bottom; background-color:#7D8F95; color:#ffffff; border-top-left-radius:3px; border-top-right-radius:3px'), 'colspan': new templates.Attribute('2')}, [new templates.Element('span', {'class': new templates.Attribute('summary-feedback-stage')}, [new templates.DynamicText(new expressions.FnExpression(['cardTitle'], [new expressions.AliasPathExpression('#profileCard', [])], void 0, new expressions.ExpressionMeta('cardTitle(#profileCard)')))], void 0, false), new templates.Element('span', {'class': new templates.Attribute('summary-feedback-spacer')}, [new templates.Text(' – ')], void 0, false), new templates.Element('span', {'class': new templates.Attribute('summary-feedback-interviewer')}, [new templates.DynamicText(new expressions.BracketsExpression(new expressions.AliasPathExpression('#root', ['users_base']), new expressions.AliasPathExpression('#profileCard', ['userId']), ['name'], new expressions.ExpressionMeta('#root.users_base[#profileCard.userId].name')))], void 0, false), new templates.Element('span', {'style': new templates.Attribute('float: right; font-size: 13px'), 'class': new templates.Attribute('summary-feedback-date dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.AliasPathExpression('#profileCard', ['interviewDate']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('default')], void 0, new expressions.ExpressionMeta('formatTime(#profileCard.interviewDate, #root._session.timezoneName, \'default\')')))], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#profileCard', ['fields'], new expressions.ExpressionMeta('each #profileCard.fields as #field', 'each', void 0, '#field')), [new templates.Element('tr', void 0, [new templates.Element('td', {'style': new templates.Attribute('width: 20%; vertical-align: top; padding: 8px 10px; border: 1px solid #ebebeb'), 'class': new templates.Attribute('summary-feedback-prompt desktop-only')}, [new templates.Element('h5', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false)], void 0, false), new templates.Element('td', {'style': new templates.Attribute('vertical-align: top; padding: 8px 10px; border: 1px solid #ebebeb')}, [new templates.Element('div', {'style': new templates.Attribute('white-space:pre-wrap')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false)])], void 0, false)]);
  views.register('profiles:print:referral-cards').template = new templates.Template([new templates.Element('div', {'style': new templates.Attribute('margin:20px 0'), 'class': new templates.Attribute('section summary-feedback')}, [new templates.Element('h2', {'style': new templates.Attribute('margin-top: 40px'), 'class': new templates.Attribute('profile-section-header')}, [new templates.Text('Referrals')], void 0, false), new templates.EachBlock(new expressions.PathExpression(['referralCards'], new expressions.ExpressionMeta('each referralCards as #profileCard', 'each', void 0, '#profileCard')), [new templates.Element('table', {'style': new templates.Attribute('width: 100%; margin:20px 0'), 'class': new templates.Attribute('summary-feedback-table')}, [new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#profileCard', ['fields'], new expressions.ExpressionMeta('each #profileCard.fields as #field', 'each', void 0, '#field')), [new templates.Element('tr', void 0, [new templates.Element('td', {'style': new templates.Attribute('width: 20%; vertical-align: top; padding: 8px 10px; border: 1px solid #ebebeb'), 'class': new templates.Attribute('summary-feedback-prompt desktop-only')}, [new templates.Element('h5', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['text'], new expressions.ExpressionMeta('#field.text')))], void 0, false)], void 0, false), new templates.Element('td', {'style': new templates.Attribute('vertical-align: top; padding: 8px 10px; border: 1px solid #ebebeb')}, [new templates.Element('div', {'style': new templates.Attribute('white-space:pre-wrap')}, [new templates.DynamicText(new expressions.AliasPathExpression('#field', ['value'], new expressions.ExpressionMeta('#field.value')))], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false)])], void 0, false)]);
  views.register('profiles:print:schools-positions').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('spaced-divider')}, [], void 0, false), new templates.Element('div', {'style': new templates.Attribute('padding: 20px 0 120px 0'), 'class': new templates.Attribute('section experience')}, [new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'positions'], new expressions.ExpressionMeta('if profile.positions', 'if'))], [
    [new templates.Element('h2', {'style': new templates.Attribute('margin-top: 40px'), 'class': new templates.Attribute('profile-section-header')}, [new templates.Text('Experience')], void 0, false), new templates.EachBlock(new expressions.PathExpression(['profile', 'positions'], new expressions.ExpressionMeta('each profile.positions as #position', 'each', void 0, '#position')), [new templates.Element('div', {'class': new templates.Attribute('position'), 'style': new templates.Attribute('padding: 16px 0 8px 0')}, [new templates.Element('h3', {'style': new templates.Attribute('margin: 16px 0 8px 0')}, [new templates.DynamicText(new expressions.AliasPathExpression('#position', ['title'], new expressions.ExpressionMeta('#position.title')))], void 0, false), new templates.Element('h4', {'style': new templates.Attribute('margin: 8px 0')}, [new templates.DynamicText(new expressions.AliasPathExpression('#position', ['org'], new expressions.ExpressionMeta('#position.org')))], void 0, false), new templates.Element('h5', {'style': new templates.Attribute('margin: 8px 0')}, [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.FnExpression(['sparseDateRange'], [new expressions.AliasPathExpression('#position', ['start']), new expressions.AliasPathExpression('#position', ['end'])], void 0, new expressions.ExpressionMeta('sparseDateRange(#position.start, #position.end)')))], void 0, false), new templates.Element('span', void 0, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#position', ['location', 'name'], new expressions.ExpressionMeta('if #position.location.name', 'if'))], [
      [new templates.Text(', '), new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))]
    ])], void 0, false)], void 0, false), new templates.Element('p', {'class': new templates.Attribute('positionSummary')}, [new templates.DynamicText(new expressions.AliasPathExpression('#position', ['summary'], new expressions.ExpressionMeta('#position.summary')))], void 0, false)], void 0, false)])]
  ]), new templates.Element('div', {'style': new templates.Attribute('border:40px solid #dcdcdc; border-top-width: 0px; border-bottom-width: 0px; height:1px; width:100%; margin: 20px 0'), 'class': new templates.Attribute('spaced-divider')}, [], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['profile', 'schools', 'length'], new expressions.ExpressionMeta('if profile.schools.length', 'if'))], [
    [new templates.Element('h2', {'style': new templates.Attribute('margin-top: 40px'), 'class': new templates.Attribute('profile-section-header')}, [new templates.Text('Education')], void 0, false), new templates.EachBlock(new expressions.PathExpression(['profile', 'schools'], new expressions.ExpressionMeta('each profile.schools as #school', 'each', void 0, '#school')), [new templates.Element('div', {'class': new templates.Attribute('position'), 'style': new templates.Attribute('padding: 16px 0 8px 0')}, [new templates.Element('h3', {'style': new templates.Attribute('margin: 16px 0 8px 0')}, [new templates.DynamicText(new expressions.AliasPathExpression('#school', ['field'], new expressions.ExpressionMeta('#school.field')))], void 0, false), new templates.Element('h4', {'style': new templates.Attribute('margin: 8px 0')}, [new templates.DynamicText(new expressions.AliasPathExpression('#school', ['org'], new expressions.ExpressionMeta('#school.org')))], void 0, false), new templates.Element('h5', {'style': new templates.Attribute('margin: 8px 0'), 'class': new templates.Attribute('current-duration')}, [new templates.Element('span', void 0, [new templates.DynamicText(new expressions.FnExpression(['sparseDateRange'], [new expressions.AliasPathExpression('#school', ['start']), new expressions.AliasPathExpression('#school', ['end'])], void 0, new expressions.ExpressionMeta('sparseDateRange(#school.start, #school.end)')))], void 0, false), new templates.Element('span', void 0, [new templates.ConditionalBlock([new expressions.AliasPathExpression('#school', ['location', 'name'], new expressions.ExpressionMeta('if #school.location.name', 'if'))], [
      [new templates.Text(', '), new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))]
    ])], void 0, false)], void 0, false), new templates.Element('p', {'class': new templates.Attribute('positionSummary')}, [new templates.DynamicText(new expressions.AliasPathExpression('#school', ['summary'], new expressions.ExpressionMeta('#school.summary')))], void 0, false)], void 0, false)])]
  ])], void 0, false)]);
  views.register('settings:nav:index').template = new templates.Template([new templates.Comment('settings:nav:index', [new templates.ComponentMarker()]), new templates.Element('ul', {'id': new templates.Attribute('settings-nav')}, [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('me'), new templates.ConditionalBlock([new expressions.FnExpression(['isCurrUrl'], [new expressions.LiteralExpression('hire.settings.index'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('if isCurrUrl(\'hire.settings.index\', #root.$render.url)', 'if'))], [
    [new templates.Text(' active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.index')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.index\')')))}, [new templates.Text('My account')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('team'), new templates.ConditionalBlock([new expressions.FnExpression(['isCurrUrl'], [new expressions.LiteralExpression('hire.settings.team'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('if isCurrUrl(\'hire.settings.team\', #root.$render.url)', 'if'))], [
    [new templates.Text(' active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.team')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.team\')')))}, [new templates.Text('Team')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('email-templates'), new templates.ConditionalBlock([new expressions.FnExpression(['isCurrUrl'], [new expressions.LiteralExpression('hire.settings.emailTemplates'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('if isCurrUrl(\'hire.settings.emailTemplates\', #root.$render.url)', 'if'))], [
    [new templates.Text(' active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.emailTemplates')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.emailTemplates\')')))}, [new templates.Text('Email Templates')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('forms'), new templates.ConditionalBlock([new expressions.FnExpression(['isCurrUrl'], [new expressions.LiteralExpression('hire.settings.forms'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('if isCurrUrl(\'hire.settings.forms\', #root.$render.url)', 'if'))], [
    [new templates.Text(' active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.forms')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.forms\')')))}, [new templates.Text('Feedback forms')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('site'), new templates.ConditionalBlock([new expressions.FnExpression(['isCurrUrl'], [new expressions.LiteralExpression('hire.settings.site'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('if isCurrUrl(\'hire.settings.site\', #root.$render.url)', 'if'))], [
    [new templates.Text(' active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.site')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.site\')')))}, [new templates.Text('Job site')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('blacklist'), new templates.ConditionalBlock([new expressions.FnExpression(['isCurrUrl'], [new expressions.LiteralExpression('hire.settings.blacklist'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('if isCurrUrl(\'hire.settings.blacklist\', #root.$render.url)', 'if'))], [
    [new templates.Text(' active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.blacklist')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.blacklist\')')))}, [new templates.Text('Email blacklist')], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.AliasPathExpression('#root', ['_session', 'leverUserId'], new expressions.ExpressionMeta('if #root._session.leverUserId', 'if'))], [
    [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('import'), new templates.ConditionalBlock([new expressions.FnExpression(['isCurrUrl'], [new expressions.LiteralExpression('hire.settings.import'), new expressions.AliasPathExpression('#root', ['$render', 'url'])], void 0, new expressions.ExpressionMeta('if isCurrUrl(\'hire.settings.import\', #root.$render.url)', 'if'))], [
      [new templates.Text(' active')]
    ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.settings.import')], void 0, new expressions.ExpressionMeta('url(\'hire.settings.import\')')))}, [new templates.Text('Imports')], void 0, false)], void 0, false)]
  ])], void 0, false)]);
  views.register('settings:me:Title').template = new templates.Template([new templates.Text('My Account – Lever Settings')]);
  views.register('settings:me:index').template = new templates.Template([new templates.Comment('settings:me:index', [new templates.ComponentMarker()]), new templates.Element('div', {'id': new templates.Attribute('user-settings'), 'class': new templates.Attribute('content')}, [new templates.Element('h1', {'class': new templates.Attribute('settings-headline')}, [new templates.Text('Settings')], void 0, false), new templates.ViewInstance('settings:nav', {}), new templates.Element('div', {'class': new templates.Attribute('nav-content')}, [new templates.Element('h3', void 0, [new templates.Text('Permissions')], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['scopeMismatch'], new expressions.ExpressionMeta('if scopeMismatch', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('permissions-error')}, [new templates.Element('p', void 0, [new templates.Text('Your settings don\'t match your Google sign in. Please reset them for all Lever features to work correctly.')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar left')}, [new templates.Element('a', {'class': new templates.Attribute('btn submit'), 'href': new templates.Attribute('#')}, [new templates.Text('Reset sign in')], [new templates.ElementOn('click', new expressions.FnExpression(['saveGoogleScopes'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]
  ]), new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Lever integrates with Google Apps. Work with candidates across the products you already live in.')], void 0, false), new templates.Element('ul', {'id': new templates.Attribute('google-permissions-list'), 'class': new templates.Attribute('settings-list')}, [new templates.Element('li', void 0, [new templates.Element('label', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.OperatorExpression('!=', [new expressions.BracketsExpression(new expressions.PathExpression(['draftGoogleScopes']), new expressions.AliasPathExpression('#root', ['_session', 'userId']), ['contacts']), new expressions.BracketsExpression(new expressions.PathExpression(['googleScopes']), new expressions.AliasPathExpression('#root', ['_session', 'userId']), ['contacts'])], void 0, new expressions.ExpressionMeta('if draftGoogleScopes[#root._session.userId].contacts != googleScopes[#root._session.userId].contacts', 'if'))], [
    [new templates.Text('draft')]
  ]))}, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.BracketsExpression(new expressions.PathExpression(['draftGoogleScopes']), new expressions.AliasPathExpression('#root', ['_session', 'userId']), ['contacts'], new expressions.ExpressionMeta('draftGoogleScopes[#root._session.userId].contacts')))}, null, void 0, false), new templates.Text('Google Contacts'), new templates.Element('p', void 0, [new templates.Text('Share candidates with anyone in your company.')], void 0, false)], void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('label', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.OperatorExpression('!=', [new expressions.BracketsExpression(new expressions.PathExpression(['draftGoogleScopes']), new expressions.AliasPathExpression('#root', ['_session', 'userId']), ['gcal']), new expressions.BracketsExpression(new expressions.PathExpression(['googleScopes']), new expressions.AliasPathExpression('#root', ['_session', 'userId']), ['gcal'])], void 0, new expressions.ExpressionMeta('if draftGoogleScopes[#root._session.userId].gcal != googleScopes[#root._session.userId].gcal', 'if'))], [
    [new templates.Text('draft')]
  ]))}, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.BracketsExpression(new expressions.PathExpression(['draftGoogleScopes']), new expressions.AliasPathExpression('#root', ['_session', 'userId']), ['gcal'], new expressions.ExpressionMeta('draftGoogleScopes[#root._session.userId].gcal')))}, null, void 0, false), new templates.Text('Google Calendar'), new templates.Element('p', void 0, [new templates.Text('Create calendar notifications and schedule interviews.')], void 0, false)], void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('label', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.OperatorExpression('!=', [new expressions.BracketsExpression(new expressions.PathExpression(['draftGoogleScopes']), new expressions.AliasPathExpression('#root', ['_session', 'userId']), ['gmail']), new expressions.BracketsExpression(new expressions.PathExpression(['googleScopes']), new expressions.AliasPathExpression('#root', ['_session', 'userId']), ['gmail'])], void 0, new expressions.ExpressionMeta('if draftGoogleScopes[#root._session.userId].gmail != googleScopes[#root._session.userId].gmail', 'if'))], [
    [new templates.Text('draft')]
  ]))}, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.BracketsExpression(new expressions.PathExpression(['draftGoogleScopes']), new expressions.AliasPathExpression('#root', ['_session', 'userId']), ['gmail'], new expressions.ExpressionMeta('draftGoogleScopes[#root._session.userId].gmail')))}, null, void 0, false), new templates.Text('Gmail'), new templates.Element('p', void 0, [new templates.Text('Sync email and send messages from your email address. '), new templates.Element('a', {'href': new templates.Attribute('https://help.lever.co/questions/80615-Gmail-sync-overview'), 'target': new templates.Attribute('_blank')}, [new templates.Text('Learn more.')], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.FnExpression(['deepEqual'], [new expressions.PathExpression(['draftGoogleScopes']), new expressions.PathExpression(['googleScopes'])])], void 0, new expressions.ExpressionMeta('if !deepEqual(draftGoogleScopes, googleScopes)', 'if'))], [
    [new templates.Element('a', {'class': new templates.Attribute('btn submit'), 'href': new templates.Attribute('#')}, [new templates.Text('Save changes')], [new templates.ElementOn('click', new expressions.FnExpression(['saveGoogleScopes'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('p', {'class': new templates.Attribute('google-reauth-prelude')}, [new templates.Text('You\'ll be taken to Google to update your permissions.')], void 0, false)]
  ]), new templates.Element('h3', void 0, [new templates.Text('Email notifications')], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('settings-list')}, [new templates.Element('li', void 0, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.AliasPathExpression('#root', ['_session', 'user', 'notifications', 'posting'], new expressions.ExpressionMeta('#root._session.user.notifications.posting')))}, null, void 0, false), new templates.Text('New application'), new templates.Element('p', void 0, [new templates.Text('Candidate applies to my job posting.')], void 0, false)], void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.AliasPathExpression('#root', ['_session', 'user', 'notifications', 'referral'], new expressions.ExpressionMeta('#root._session.user.notifications.referral')))}, null, void 0, false), new templates.Text('New referral'), new templates.Element('p', void 0, [new templates.Text('Co-worker refers candidate to my job posting.')], void 0, false)], void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.AliasPathExpression('#root', ['_session', 'user', 'notifications', 'archive'], new expressions.ExpressionMeta('#root._session.user.notifications.archive')))}, null, void 0, false), new templates.Text('Archiving'), new templates.Element('p', void 0, [new templates.Text('Co-worker archives a candidate or job application.'), new templates.Element('span', {'class': new templates.Attribute('what-is-this has-tip'), 'title': new templates.Attribute('You will be notified if you own the candidate or a job posting the candidate applied to.')}, [new templates.Text(' [?]')], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.Element('h3', void 0, [new templates.Text('Avatar')], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('settings-list')}, [new templates.Element('li', void 0, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.FnExpression(['disableOrEnablePicture'], [new expressions.AliasPathExpression('#root', ['_session', 'user'])], void 0, new expressions.ExpressionMeta('disableOrEnablePicture(#root._session.user)')))}, null, void 0, false), new templates.Text('Use gravatar image'), new templates.Element('p', void 0, [new templates.Text('Change your avatar with '), new templates.Element('a', {'href': new templates.Attribute('http://en.gravatar.com/'), 'target': new templates.Attribute('_blank')}, [new templates.Text('Gravatar')], void 0, false), new templates.Text('.'), new templates.Element('span', {'class': new templates.Attribute('what-is-this has-tip'), 'title': new templates.Attribute('Gravatar is a service for hosting your avatar. Make sure you set up Gravatar with the same email as the one you use in Lever. May take up to 24 hours to update.')}, [new templates.Text(' [?]')], void 0, false)], void 0, false), new templates.ViewInstance('l-identicon', {'user': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'user'], new expressions.ExpressionMeta('#root._session.user'))), new expressions.AliasPathExpression('#root', ['_session', 'user'], new expressions.ExpressionMeta('#root._session.user'))), 'class': 'x-large avatar'})], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.Text(' ')], void 0, false)]);
  views.register('settings:team:Title').template = new templates.Template([new templates.Text('Team – Lever Settings')]);
  views.register('settings:team:index').template = new templates.Template([new templates.Comment('settings:team:index', [new templates.ComponentMarker()]), new templates.Element('div', {'id': new templates.Attribute('team-settings'), 'class': new templates.Attribute('content')}, [new templates.Element('h1', {'class': new templates.Attribute('settings-headline')}, [new templates.Text('Settings')], void 0, false), new templates.ViewInstance('settings:nav', {}), new templates.Element('div', {'class': new templates.Attribute('nav-content')}, [new templates.Element('h3', void 0, [new templates.Text('Invite team members ')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('invite-user')}, [new templates.ViewInstance('invite-user', {'inviter': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'user'], new expressions.ExpressionMeta('#root._session.user'))), new expressions.AliasPathExpression('#root', ['_session', 'user'], new expressions.ExpressionMeta('#root._session.user'))), 'account': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'account'], new expressions.ExpressionMeta('#root._session.account'))), new expressions.AliasPathExpression('#root', ['_session', 'account'], new expressions.ExpressionMeta('#root._session.account')))})], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('settings-section '), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.PathExpression(['invites'])], void 0, new expressions.ExpressionMeta('if !invites', 'if'))], [
    [new templates.Text('hidden')]
  ])]))}, [new templates.Element('h4', void 0, [new templates.Text('Pending Invitations')], void 0, false), new templates.ViewInstance('pending-invites', {'invites': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['invites'], new expressions.ExpressionMeta('invites'))), new expressions.PathExpression(['invites'], new expressions.ExpressionMeta('invites'))), 'account': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_session', 'account'], new expressions.ExpressionMeta('#root._session.account'))), new expressions.AliasPathExpression('#root', ['_session', 'account'], new expressions.ExpressionMeta('#root._session.account')))})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('settings-section')}, [new templates.Element('h4', void 0, [new templates.Text('Team')], void 0, false), new templates.ViewInstance('team-list', {'suggestedTags': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#root', ['_page', 'allSuggestedTags'], new expressions.ExpressionMeta('#root._page.allSuggestedTags'))), new expressions.AliasPathExpression('#root', ['_page', 'allSuggestedTags'], new expressions.ExpressionMeta('#root._page.allSuggestedTags')))})], void 0, false)], void 0, false)], void 0, false)]);
  views.register('settings:team:403').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('settings-error')}, [new templates.Text('Only admins can view this page')], void 0, false)]);
  views.register('settings:email-templates:Title').template = new templates.Template([new templates.Text('Email Templates – Lever Settings')]);
  views.register('settings:email-templates:index').template = new templates.Template([new templates.Comment('settings:email-templates:index', [new templates.ComponentMarker()]), new templates.Element('div', {'id': new templates.Attribute('email-settings'), 'class': new templates.Attribute('content')}, [new templates.Element('h1', {'class': new templates.Attribute('settings-headline')}, [new templates.Text('Settings')], void 0, false), new templates.ViewInstance('settings:nav', {}), new templates.Element('div', {'class': new templates.Attribute('nav-content')}, [new templates.Element('div', {'class': new templates.Attribute('email-template-wrapper')}, [new templates.Element('h3', void 0, [new templates.Text('Email templates')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-template-header mine-group')}, [new templates.Element('h5', void 0, [new templates.Text('My templates')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-template-list-controls')}, [new templates.Element('a', {'class': new templates.Attribute('add-new-template btn-invisible'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('New')], [new templates.ElementOn('click', new expressions.FnExpression(['newUserTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-template-list')}, [new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['templates', 'user'], new expressions.ExpressionMeta('each templates.user as #template', 'each', void 0, '#template')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['pendingTemplate', 'id']), new expressions.AliasPathExpression('#template', ['id'])], void 0, new expressions.ExpressionMeta('if pendingTemplate.id === #template.id', 'if'))], [
    [new templates.Text('selected')]
  ]))}, [new templates.Element('span', {'class': new templates.Attribute('caret')}, [new templates.ViewInstance('icon-double-caret-right', {})], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#template', ['text'], new expressions.ExpressionMeta('#template.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['editTemplate'], [new expressions.AliasPathExpression('#template', [])]))], false)])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-template-header team-group')}, [new templates.Element('h5', void 0, [new templates.Text('Team templates')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-template-list-controls')}, [new templates.Element('a', {'class': new templates.Attribute('add-new-template btn-invisible'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('New')], [new templates.ElementOn('click', new expressions.FnExpression(['newTeamTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-template-list')}, [new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['templates', 'team'], new expressions.ExpressionMeta('each templates.team as #template', 'each', void 0, '#template')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['pendingTemplate', 'id']), new expressions.AliasPathExpression('#template', ['id'])], void 0, new expressions.ExpressionMeta('if pendingTemplate.id === #template.id', 'if'))], [
    [new templates.Text('selected')]
  ]))}, [new templates.Element('span', {'class': new templates.Attribute('caret')}, [new templates.ViewInstance('icon-double-caret-right', {})], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#template', ['text'], new expressions.ExpressionMeta('#template.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['editTemplate'], [new expressions.AliasPathExpression('#template', [])]))], false)])], void 0, false)], void 0, false)], void 0, false), new templates.Text(' '), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('settings-flyover '), new templates.ConditionalBlock([new expressions.PathExpression(['pendingTemplate'], new expressions.ExpressionMeta('if pendingTemplate', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('email-template-functions')}, [new templates.Element('a', {'class': new templates.Attribute('settings-flyover-close'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-flyover-close', {})], [new templates.ElementOn('click', new expressions.FnExpression(['closePendingTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('email-function duplicate has-tip'), 'title': new templates.Attribute('Duplicate'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-copy', {})], [new templates.ElementOn('click', new expressions.FnExpression(['duplicateTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('email-function reset has-tip'), 'title': new templates.Attribute('Reset'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-undo', {})], [new templates.ElementOn('click', new expressions.FnExpression(['resetPendingTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['pendingTemplate', 'type']), new expressions.LiteralExpression('private')], void 0, new expressions.ExpressionMeta('if pendingTemplate.type === \'private\'', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.Attribute('email-function has-tip move-group'), 'title': new templates.Attribute('Share with team'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-all-list', {})], [new templates.ElementOn('click', new expressions.FnExpression(['toggleGroup'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['pendingTemplate', 'userId']), new expressions.AliasPathExpression('#root', ['_session', 'userId'])], void 0, new expressions.ExpressionMeta('if pendingTemplate.userId == #root._session.userId', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Element('a', {'class': new templates.Attribute('email-function has-tip move-group'), 'title': new templates.Attribute('Make template mine'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-mine-list', {})], [new templates.ElementOn('click', new expressions.FnExpression(['toggleGroup'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
      [new templates.Element('span', {'class': new templates.Attribute('email-function has-tip move-group disabled'), 'title': new templates.Attribute('Can\'t make mine - you didn\'t create this template')}, [new templates.ViewInstance('icon-mine-list', {})], void 0, false)]
    ])]
  ]), new templates.Element('a', {'class': new templates.Attribute('email-function delete has-tip'), 'title': new templates.Attribute('Delete'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['deleteTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-template-compose')}, [new templates.Element('input', {'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['pendingTemplate', 'text'], new expressions.ExpressionMeta('pendingTemplate.text'))), 'placeholder': new templates.Attribute('New template title'), 'class': new templates.Attribute('title-input')}, null, void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-template-content')}, [new templates.Element('div', {'class': new templates.Attribute('email-token')}, [new templates.Element('a', {'class': new templates.Attribute('has-tip mail-merge'), 'title': new templates.Attribute('Add auto-text/mail merge tags'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-email-token', {})], [new templates.ElementOn('click', new expressions.FnExpression(['tokenMenu', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ViewInstance('l-popup', {'class': 'has-menu darker tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.PathExpression(['templateTokens'], new expressions.ExpressionMeta('each templateTokens as #token', 'each', void 0, '#token')), [new templates.Element('li', {'class': new templates.Attribute('option')}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#token', ['text'], new expressions.ExpressionMeta('#token.text')))], [new templates.ElementOn('click', new expressions.FnExpression(['insertToken'], [new expressions.AliasPathExpression('#token', ['value'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false)]))}, [new templates.MarkupAs(['tokenMenu'])])], void 0, false), new templates.Element('input', {'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['pendingTemplate', 'subject'], new expressions.ExpressionMeta('pendingTemplate.subject'))), 'placeholder': new templates.Attribute('Write subject line'), 'class': new templates.Attribute('no-input subject-input')}, null, [new templates.ElementOn('blur', new expressions.FnExpression(['inputBlurred'], [new expressions.PathExpression(['$element'])]))], false), new templates.Element('div', {'class': new templates.Attribute('email-sending-settings')}, [new templates.Element('div', {'class': new templates.Attribute('label')}, [new templates.Text('From')], void 0, false), new templates.Block(new expressions.PathExpression(['pendingTemplate', 'fromType'], new expressions.ExpressionMeta('on pendingTemplate.fromType as #fromType', 'on', void 0, '#fromType')), [new templates.ViewInstance('l-dropdown', {'buttonClass': 'btn-no-style', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.AliasPathExpression('#fromType', [], new expressions.ExpressionMeta('#fromType'))), new expressions.AliasPathExpression('#fromType', [], new expressions.ExpressionMeta('#fromType'))), 'options': [
    {'value': 'user email', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Sender\'s email')]))},
    {'value': 'no-reply', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('From no-reply')]))}
  ]})]), new templates.Element('div', {'class': new templates.Attribute('email-additional-settings')}, [new templates.Element('div', {'class': new templates.Attribute('email-cc-bcc')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.PathExpression(['showCC'])], void 0, new expressions.ExpressionMeta('if !showCC', 'if'))], [
    [new templates.Element('a', {'href': new templates.Attribute('#'), 'class': new templates.Attribute('has-tip cc-bcc'), 'title': new templates.Attribute('Add default CC and BCC')}, [new templates.Text('cc/bcc')], [new templates.ElementOn('click', new expressions.FnExpression(['addCC'], []))], false)]
  ])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-upload has-tip'), 'title': new templates.Attribute('Add attachment')}, [new templates.ViewInstance('file-attachment', {'fileIds': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pendingTemplate', 'fileIds'], new expressions.ExpressionMeta('pendingTemplate.fileIds'))), new expressions.PathExpression(['pendingTemplate', 'fileIds'], new expressions.ExpressionMeta('pendingTemplate.fileIds'))), 'directory': 'uploads'})], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-delay-settings has-tip delay-sending'), 'title': new templates.Attribute('Delay sending')}, [new templates.ViewInstance('l-dropdown', {'buttonClass': 'btn-no-style', 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pendingTemplate', 'delay'], new expressions.ExpressionMeta('pendingTemplate.delay'))), new expressions.PathExpression(['pendingTemplate', 'delay'], new expressions.ExpressionMeta('pendingTemplate.delay'))), 'label': new templates.ParentWrapper(new templates.Template([new templates.ViewInstance('icon-clock', {}), new templates.Text(' '), new templates.DynamicText(new expressions.PathExpression(['pendingTemplate', 'delay'], new expressions.ExpressionMeta('pendingTemplate.delay')))])), 'options': [
    {'value': null, 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Send now')]))},
    {'value': '1 day', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Tomorrow')]))},
    {'value': '4 days', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('4 days')]))},
    {'value': '1 weekday', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('Next weekday')]))},
    {'value': '1 week', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('1 week')]))},
    {'value': '2 weeks', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('2 weeks')]))},
    {'value': '1 month', 'content': new templates.ParentWrapper(new templates.Template([new templates.Text('1 month')]))}
  ]})], void 0, false)], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['showCC'], new expressions.ExpressionMeta('if showCC', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('cc-bcc-row')}, [new templates.Element('span', {'class': new templates.Attribute('cc-bcc-label')}, [new templates.Text('CC')], void 0, false), new templates.Element('input', {'class': new templates.Attribute('no-input cc-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['pendingTemplate', 'cc'], new expressions.ExpressionMeta('pendingTemplate.cc'))), 'placeholder': new templates.Attribute('Write address')}, null, void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('cc-bcc-row')}, [new templates.Element('span', {'class': new templates.Attribute('cc-bcc-label')}, [new templates.Text('BCC')], void 0, false), new templates.Element('input', {'class': new templates.Attribute('no-input bcc-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['pendingTemplate', 'bcc'], new expressions.ExpressionMeta('pendingTemplate.bcc'))), 'placeholder': new templates.Attribute('Write address')}, null, void 0, false)], void 0, false)]
  ])], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['files'], new expressions.ExpressionMeta('if files', 'if'))], [
    [new templates.Element('div', {'class': new templates.Attribute('label')}, [new templates.Text('Attachments')], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('file-attachment-list')}, [new templates.EachBlock(new expressions.PathExpression(['files'], new expressions.ExpressionMeta('each files as #file', 'each', void 0, '#file')), [new templates.Element('div', {'class': new templates.Attribute('file')}, [new templates.Element('a', {'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.downloadFile'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('fileId'), new expressions.AliasPathExpression('#file', ['id']), new expressions.LiteralExpression('fileName'), new expressions.AliasPathExpression('#file', ['name']), new expressions.LiteralExpression('directory'), new expressions.AttributePathExpression('directory', [])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.downloadFile\', {fileId: #file.id, fileName: #file.name, directory: @directory})'))), 'class': new templates.Attribute('link has-icon')}, [new templates.ViewInstance('icon-paperclip', {}), new templates.DynamicText(new expressions.AliasPathExpression('#file', ['name'], new expressions.ExpressionMeta('#file.name')))], void 0, false), new templates.Element('a', {'class': new templates.Attribute('content-remove has-tip'), 'title': new templates.Attribute('Delete'), 'tabindex': new templates.Attribute('-1'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['removeFile'], [new expressions.AliasPathExpression('#file', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('email-template-body '), new templates.ConditionalBlock([new expressions.PathExpression(['showCC'], new expressions.ExpressionMeta('if showCC', 'if'))], [
    [new templates.Text('cc-shown')]
  ])]))}, [new templates.Element('textarea', {'rows': new templates.Attribute('19'), 'placeholder': new templates.Attribute('Email message'), 'class': new templates.Attribute('no-input')}, [new templates.DynamicText(new expressions.PathExpression(['pendingTemplate', 'body'], new expressions.ExpressionMeta('pendingTemplate.body')))], [new templates.MarkupAs(['body']), new templates.ElementOn('blur', new expressions.FnExpression(['inputBlurred'], []))], false)], void 0, false)], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('email-template-buttons')}, [new templates.Element('button', {'class': new templates.Attribute('submit-large')}, [new templates.Text('Save changes')], [new templates.ElementOn('click', new expressions.FnExpression(['savePendingTemplate'], []))], false)], void 0, false)], void 0, false), new templates.Text(' ')], void 0, false)], void 0, false)]);
  views.register('settings:email-templates:403').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('settings-error')}, [new templates.Text('Only admins can view this page')], void 0, false)]);
  views.register('settings:forms:icon-undeleteable:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-undeleteable')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12,13.5c0,0.275-0.225,0.5-0.5,0.5S11,13.775,11,13.5v-2.764l-2,1V13.5\nC9,13.775,8.775,14,8.5,14C8.225,14,8,13.775,8,13.5v-1.264l-2,1V13.5C6,13.775,5.775,14,5.5,14c-0.199,0-0.372-0.118-0.453-0.287\nL3,14.736V15.5C3,15.775,3.225,16,3.5,16h10c0.275,0,0.5-0.225,0.5-0.5V9.236l-2,1V13.5L12,13.5z M15.553,3.105l-0.564,0.283\nC14.936,3.167,14.736,3,14.5,3H12V2c0-2-1-2-2-2H7C5,0,5,1,5,2v1H2.5C2.225,3,2,3.225,2,3.5v1C2,4.775,2.225,5,2.5,5S3,5.225,3,5.5\nv3.882l-3,1.493v0.891l15.105-7.555L16,3.766V2.875L15.553,3.105L15.553,3.105z M6,7.882l-1,0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\nS6,5.811,6,6.086V7.882L6,7.882z M9,6.382l-1,0.5V6.086c0-0.275,0.225-0.5,0.5-0.5c0.275,0,0.5,0.225,0.5,0.5V6.382L9,6.382z M10,3\nH7V2h3V3L10,3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('settings:forms:Title').template = new templates.Template([new templates.Text('Forms – Lever Settings')]);
  views.register('settings:forms:index').template = new templates.Template([new templates.Comment('settings:forms:index', [new templates.ComponentMarker()]), new templates.Element('div', {'id': new templates.Attribute('form-settings'), 'class': new templates.Attribute('content')}, [new templates.Element('h1', {'class': new templates.Attribute('settings-headline')}, [new templates.Text('Settings')], void 0, false), new templates.ViewInstance('settings:nav', {}), new templates.Element('div', {'class': new templates.Attribute('nav-content')}, [new templates.Element('div', {'class': new templates.Attribute('card-template-wrapper')}, [new templates.Element('h3', void 0, [new templates.Text('Feedback forms')], void 0, false), new templates.EachBlock(new expressions.PathExpression(['templateGroups'], new expressions.ExpressionMeta('each templateGroups as #group', 'each', void 0, '#group')), [new templates.Element('div', {'class': new templates.Attribute('card-template-header mine-group')}, [new templates.Element('h5', void 0, [new templates.DynamicText(new expressions.AliasPathExpression('#group', ['text'], new expressions.ExpressionMeta('#group.text'))), new templates.Text(' forms')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-template-list-controls')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#group', ['value']), new expressions.LiteralExpression('referral')], void 0, new expressions.ExpressionMeta('unless #group.value == \'referral\'', 'unless'))], [
    [new templates.Element('a', {'class': new templates.Attribute('add-new-template btn-invisible'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('New')], [new templates.ElementOn('click', new expressions.FnExpression(['cardEditor', 'newCard'], [new expressions.AliasPathExpression('#group', ['value'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
  ])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-template-list')}, [new templates.Element('ul', void 0, [new templates.EachBlock(new expressions.AliasPathExpression('#group', ['templates'], new expressions.ExpressionMeta('each #group.templates as #template', 'each', void 0, '#template')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['pendingTemplate', 'id']), new expressions.AliasPathExpression('#template', ['id'])], void 0, new expressions.ExpressionMeta('if pendingTemplate.id === #template.id', 'if'))], [
    [new templates.Text('selected')]
  ]))}, [new templates.Element('span', {'class': new templates.Attribute('caret')}, [new templates.ViewInstance('icon-double-caret-right', {})], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#template', ['text'], new expressions.ExpressionMeta('#template.text')))], void 0, false)], [new templates.ElementOn('click', new expressions.FnExpression(['cardEditor', 'openCard'], [new expressions.AliasPathExpression('#template', ['id'])]))], false)])], void 0, false)], void 0, false)])], void 0, false), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('settings-flyover '), new templates.ConditionalBlock([new expressions.PathExpression(['pendingTemplate'], new expressions.ExpressionMeta('if pendingTemplate', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('div', {'class': new templates.Attribute('card-template-functions')}, [new templates.Element('a', {'class': new templates.Attribute('settings-flyover-close'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-flyover-close', {})], [new templates.ElementOn('click', new expressions.FnExpression(['cardEditor', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Block(new expressions.BracketsExpression(new expressions.PathExpression(['templateTypesByValue']), new expressions.PathExpression(['pendingTemplate', 'type']), void 0, new expressions.ExpressionMeta('with templateTypesByValue[pendingTemplate.type] as #group', 'with', void 0, '#group')), [new templates.ConditionalBlock([new expressions.AliasPathExpression('#group', ['editable'], new expressions.ExpressionMeta('if #group.editable', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.Attribute('card-function duplicate has-tip'), 'title': new templates.Attribute('Duplicate'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-copy', {})], [new templates.ElementOn('click', new expressions.FnExpression(['duplicateTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('a', {'class': new templates.Attribute('card-function duplicate has-tip disabled'), 'title': new templates.Attribute('Cannot create more than 1 referral card')}, [new templates.ViewInstance('icon-copy', {})], void 0, false)]
  ]), new templates.Element('a', {'class': new templates.Attribute('card-function reset has-tip'), 'title': new templates.Attribute('Reset'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-undo', {})], [new templates.ElementOn('click', new expressions.FnExpression(['cardEditor', 'resetTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.PathExpression(['pendingTemplate', 'type']), new expressions.LiteralExpression('interview')], void 0, new expressions.ExpressionMeta('if pendingTemplate.type == \'interview\'', 'if')), new expressions.AliasPathExpression('#group', ['editable'], new expressions.ExpressionMeta('else if #group.editable', 'else if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('a', {'class': new templates.Attribute('card-function delete has-tip'), 'title': new templates.Attribute('Delete'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['deleteConfirm', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('a', {'class': new templates.Attribute('card-function delete has-tip'), 'title': new templates.Attribute('Delete'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['deleteTemplate'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
    [new templates.Element('a', {'class': new templates.Attribute('card-function delete has-tip disabled'), 'title': new templates.Attribute('This form is required by Lever and cannot be deleted')}, [new templates.ViewInstance('settings:forms:icon-undeleteable', {})], void 0, false)]
  ])])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-template-compose')}, [new templates.ViewInstance('card-editor', {'pending': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['pendingTemplate'], new expressions.ExpressionMeta('pendingTemplate'))), new expressions.PathExpression(['pendingTemplate'], new expressions.ExpressionMeta('pendingTemplate'))), 'mode': 'settings'}, [new templates.MarkupAs(['cardEditor'])])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('card-template-buttons')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('!==', [new expressions.PathExpression(['pendingTemplate', 'type']), new expressions.LiteralExpression('interview')]), new expressions.BracketsExpression(new expressions.PathExpression(['templateStages']), new expressions.PathExpression(['pendingTemplate', 'id']))], void 0, new expressions.ExpressionMeta('if pendingTemplate.type !== \'interview\' && templateStages[pendingTemplate.id]', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('button', {'class': new templates.Attribute('submit-large')}, [new templates.Text('Save changes')], [new templates.ElementOn('click', new expressions.FnExpression(['saveConfirm', 'toggle'], [new expressions.PathExpression(['$element'])]))], false)],
    [new templates.Element('button', {'class': new templates.Attribute('submit-large')}, [new templates.Text('Save changes')], [new templates.ElementOn('click', new expressions.FnExpression(['cardEditor', 'saveTemplate'], []))], false)]
  ]), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['pendingTemplate', 'type']), new expressions.LiteralExpression('interview')], void 0, new expressions.ExpressionMeta('if pendingTemplate.type === \'interview\'', 'if'))], [
    [new templates.Element('p', {'class': new templates.Attribute('card-template-buttons-subtext label')}, [new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['templateStages']), new expressions.PathExpression(['pendingTemplate', 'id']), void 0, new expressions.ExpressionMeta('if templateStages[pendingTemplate.id]', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
      [new templates.Text('Default for "'), new templates.DynamicText(new expressions.RelativePathExpression(['text'], new expressions.ExpressionMeta('this.text'))), new templates.Text('" '), new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Change?')], [new templates.ElementOn('click', new expressions.FnExpression(['setDefaults', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)],
      [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Make default for a stage')], [new templates.ElementOn('click', new expressions.FnExpression(['setDefaults', 'toggle'], [new expressions.PathExpression(['$element'])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)]
    ])], void 0, false)]
  ])], void 0, false)], void 0, false)], void 0, false), new templates.Text(' ')], void 0, false), new templates.ViewInstance('l-popup', {'class': 'darker has-icon tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('div', void 0, [new templates.Element('p', {'class': new templates.Attribute('white')}, [new templates.Text('This form is the default form for "'), new templates.DynamicText(new expressions.BracketsExpression(new expressions.PathExpression(['templateStages']), new expressions.PathExpression(['pendingTemplate', 'id']), ['text'], new expressions.ExpressionMeta('templateStages[pendingTemplate.id].text'))), new templates.Text('".'), new templates.Element('br', void 0, null, void 0, false), new templates.Text('Are you sure you want to change to not be an interview form?')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['saveConfirm', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('dark-button transparent')}, [new templates.Text('Yes, save')], [new templates.ElementOn('click', new expressions.FnExpression(['cardEditor', 'saveTemplate'], []))], false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['saveConfirm'])]), new templates.ViewInstance('l-popup', {'class': 'darker has-icon tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('div', void 0, [new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['templateStages']), new expressions.PathExpression(['pendingTemplate', 'id']), void 0, new expressions.ExpressionMeta('if templateStages[pendingTemplate.id]', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('p', {'class': new templates.Attribute('white')}, [new templates.Text('This form is the default form for "'), new templates.DynamicText(new expressions.RelativePathExpression(['text'], new expressions.ExpressionMeta('this.text'))), new templates.Text('".'), new templates.Element('br', void 0, null, void 0, false), new templates.Text('Are you sure you want to delete it?')], void 0, false)],
    [new templates.Element('p', {'class': new templates.Attribute('white')}, [new templates.Text('Are you sure you want to delete this interview feedback form?')], void 0, false)]
  ]), new templates.Element('div', {'class': new templates.Attribute('link-bar right')}, [new templates.Element('a', {'class': new templates.Attribute('link dark'), 'href': new templates.Attribute('#')}, [new templates.Text('Cancel')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteConfirm', 'close'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('button', {'class': new templates.Attribute('dark-button transparent')}, [new templates.Text('Yes, Delete')], [new templates.ElementOn('click', new expressions.FnExpression(['deleteTemplate'], []))], false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['deleteConfirm'])]), new templates.ViewInstance('l-popup', {'class': 'darker has-icon tall-option caps-option', 'content': new templates.ParentWrapper(new templates.Template([new templates.Element('h3', {'class': new templates.Attribute('popup-headline')}, [new templates.Text('Defaults')], void 0, false), new templates.ConditionalBlock([new expressions.BracketsExpression(new expressions.PathExpression(['templateStages']), new expressions.PathExpression(['pendingTemplate', 'id']), void 0, new expressions.ExpressionMeta('if templateStages[pendingTemplate.id]', 'if'))], [
    [new templates.Element('p', void 0, [new templates.Element('small', void 0, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.Text('Remove as default for "'), new templates.DynamicText(new expressions.RelativePathExpression(['text'], new expressions.ExpressionMeta('this.text'))), new templates.Text('"')], [new templates.ElementOn('click', new expressions.FnExpression(['selectStageDefault'], [new expressions.LiteralExpression()])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]
  ]), new templates.Element('table', {'class': new templates.Attribute('popup-set-defaults')}, [new templates.Element('tbody', void 0, [new templates.Element('tr', {'class': new templates.Attribute('set-defaults-option')}, [new templates.Element('td', {'class': new templates.Attribute('label')}, [new templates.Element('h4', void 0, [new templates.Text('Stage')], void 0, false)], void 0, false), new templates.Element('td', {'class': new templates.Attribute('value')}, [new templates.ViewInstance('l-picker', {'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stageOptions'], new expressions.ExpressionMeta('stageOptions'))), new expressions.PathExpression(['stageOptions'], new expressions.ExpressionMeta('stageOptions'))), 'prompt': 'Select one'}, [new templates.ComponentOn('select', new expressions.FnExpression(['selectStageDefault'], []))])], void 0, false)], void 0, false)], void 0, false)], void 0, false)]))}, [new templates.MarkupAs(['setDefaults'])])]);
  views.register('settings:blacklist:Title').template = new templates.Template([new templates.Text('Email Blacklist – Lever Settings')]);
  views.register('settings:blacklist:index').template = new templates.Template([new templates.Comment('settings:blacklist:index', [new templates.ComponentMarker()]), new templates.Element('div', {'id': new templates.Attribute('email-blacklist'), 'class': new templates.Attribute('content')}, [new templates.Element('h1', {'class': new templates.Attribute('settings-headline')}, [new templates.Text('Settings')], void 0, false), new templates.ViewInstance('settings:nav', {}), new templates.Element('div', {'class': new templates.Attribute('nav-content')}, [new templates.Element('h3', void 0, [new templates.Text('Email blacklist')], void 0, false), new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Add recruiting agencies\' domains to this list to prevent them from being added to candidates you add via email. '), new templates.Element('span', {'class': new templates.Attribute('example label')}, [new templates.Text('(E.g. abc-recruiting.com)')], void 0, false)], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('email-blacklist settings-list')}, [new templates.EachBlock(new expressions.AliasPathExpression('#root', ['_session', 'account', 'blacklistDomains'], new expressions.ExpressionMeta('each #root._session.account.blacklistDomains as #domain', 'each', void 0, '#domain')), [new templates.Element('li', {'class': new templates.Attribute('blacklist-item')}, [new templates.DynamicText(new expressions.AliasPathExpression('#domain', [], new expressions.ExpressionMeta('#domain'))), new templates.Text(' '), new templates.Element('a', {'class': new templates.Attribute('delete-blacklist-item'), 'title': new templates.Attribute('Delete'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['deleteBlacklistDomain'], [new expressions.AliasPathExpression('#domain', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]), new templates.ConditionalBlock([new expressions.PathExpression(['newBlacklistDomain'], new expressions.ExpressionMeta('if newBlacklistDomain', 'if'))], [
    [new templates.Element('li', {'class': new templates.Attribute('blacklist-item')}, [new templates.Element('input', {'class': new templates.Attribute('hoverable-input blacklist-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['newBlacklistDomainText'], new expressions.ExpressionMeta('newBlacklistDomainText')))}, null, [new templates.MarkupAs(['blacklistInput']), new templates.ElementOn('blur', new expressions.FnExpression(['saveBlacklistDomain'], []))], false), new templates.Element('a', {'class': new templates.Attribute('delete-blacklist-item'), 'title': new templates.Attribute('Delete'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['cancelBlacklistDomain'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]
  ])], void 0, false), new templates.Element('a', {'class': new templates.Attribute('link has-icon'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('Add domain')], [new templates.ElementOn('click', new expressions.FnExpression(['addBlacklistDomain'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)]);
  views.register('settings:blacklist:403').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('settings-error')}, [new templates.Text('Only admins can view this page')], void 0, false)]);
  views.register('settings:site:icon-undeleteable:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-undeleteable')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M12,13.5c0,0.275-0.225,0.5-0.5,0.5S11,13.775,11,13.5v-2.764l-2,1V13.5\nC9,13.775,8.775,14,8.5,14C8.225,14,8,13.775,8,13.5v-1.264l-2,1V13.5C6,13.775,5.775,14,5.5,14c-0.199,0-0.372-0.118-0.453-0.287\nL3,14.736V15.5C3,15.775,3.225,16,3.5,16h10c0.275,0,0.5-0.225,0.5-0.5V9.236l-2,1V13.5L12,13.5z M15.553,3.105l-0.564,0.283\nC14.936,3.167,14.736,3,14.5,3H12V2c0-2-1-2-2-2H7C5,0,5,1,5,2v1H2.5C2.225,3,2,3.225,2,3.5v1C2,4.775,2.225,5,2.5,5S3,5.225,3,5.5\nv3.882l-3,1.493v0.891l15.105-7.555L16,3.766V2.875L15.553,3.105L15.553,3.105z M6,7.882l-1,0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\nS6,5.811,6,6.086V7.882L6,7.882z M9,6.382l-1,0.5V6.086c0-0.275,0.225-0.5,0.5-0.5c0.275,0,0.5,0.225,0.5,0.5V6.382L9,6.382z M10,3\nH7V2h3V3L10,3z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('settings:site:icon-delete:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-delete')])), 'width': new templates.Attribute('16px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 16')}, [new templates.Element('path', {'d': new templates.Attribute('M14,3h-2.5V2c0-2-1-2-2-2h-3c-2,0-2,1-2,2v1H2C1.725,3,1.5,3.225,1.5,3.5v1C1.5,4.775,1.725,5,2,5\ns0.5,0.225,0.5,0.5v10C2.5,15.774,2.725,16,3,16h10c0.275,0,0.5-0.226,0.5-0.5v-10C13.5,5.225,13.725,5,14,5s0.5-0.225,0.5-0.5v-1\nC14.5,3.225,14.275,3,14,3z M5.5,13.5C5.5,13.774,5.275,14,5,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M8.5,13.5C8.5,13.774,8.275,14,8,14s-0.5-0.226-0.5-0.5V6.086c0-0.275,0.225-0.5,0.5-0.5\ns0.5,0.225,0.5,0.5V13.5z M9.5,3h-3V2h3V3z M11.5,13.5c0,0.274-0.225,0.5-0.5,0.5s-0.5-0.226-0.5-0.5V6.086\nc0-0.275,0.225-0.5,0.5-0.5s0.5,0.225,0.5,0.5V13.5z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('settings:site:icon-arrow-up:index').template = new templates.Template([new templates.Element('svg', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' icon icon-arrow-up')])), 'width': new templates.Attribute('15px'), 'height': new templates.Attribute('16px'), 'viewBox': new templates.Attribute('0 0 16 15')}, [new templates.Element('path', {'d': new templates.Attribute('M6.791 5.414L6.307 5.864C5.61 6.486 5.039 7.006 4.583 7.429 4.312 7.681 4.141 7.843 4.062 7.92L3 7.052C3.023 7.03 3.067 6.987 3.135 6.922c0.111-0.105 0.248-0.233 0.41-0.384 0.461-0.429 1.04-0.955 1.744-1.583l1.683-1.502L7.48 3 7.99 3.454 12 7.032 10.981 7.94 8.23 5.487V13h-1.44V5.414z')}, [], void 0, false, null, 'http://www.w3.org/2000/svg')], void 0, false, null, 'http://www.w3.org/2000/svg')]);
  views.register('settings:site:Title').template = new templates.Template([new templates.Text('Job site – Lever Settings')]);
  views.register('settings:site:index').template = new templates.Template([new templates.Comment('settings:site:index', [new templates.ComponentMarker()]), new templates.Element('div', {'id': new templates.Attribute('site-settings'), 'class': new templates.Attribute('content')}, [new templates.Element('h1', {'class': new templates.Attribute('settings-headline')}, [new templates.Text('Settings')], void 0, false), new templates.ViewInstance('settings:nav', {}), new templates.Element('div', {'class': new templates.Attribute('nav-content')}, [new templates.Element('h3', void 0, [new templates.Text('Job site')], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.PathExpression(['site'])], void 0, new expressions.ExpressionMeta('if !site', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('p', void 0, [new templates.Text('Your job site hasn\'t been created yet.'), new templates.Element('br', void 0, null, void 0, false), new templates.Text('Please contact '), new templates.Element('a', {'href': new templates.Attribute('mailto:support@lever.co')}, [new templates.Text('support@lever.co')], void 0, false), new templates.Text(' to set up your site')], void 0, false)],
    [new templates.ViewInstance('settings:site:site-settings', {}), new templates.ViewInstance('settings:site:site-application', {}), new templates.Element('div', {'class': new templates.Attribute('link-bar left')}, [new templates.Element('button', {'class': new templates.Attribute('submit'), 'disabled': new templates.DynamicAttribute(new expressions.PathExpression(['disableSave'], new expressions.ExpressionMeta('disableSave')))}, [new templates.Text('Save changes')], [new templates.ElementOn('click', new expressions.FnExpression(['save'], []))], false), new templates.Element('small', {'class': new templates.Attribute('label')}, [new templates.Text('This will affect all job postings.')], void 0, false)], void 0, false)]
  ])], [new templates.MarkupAs(['contentArea'])], false)], void 0, false)]);
  views.register('settings:site:403').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('settings-error')}, [new templates.Text('Only admins can view this page')], void 0, false)]);
  views.register('settings:site:site-settings').template = new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('site-url-list')}, [new templates.Element('li', void 0, [new templates.Element('p', {'class': new templates.Attribute('label')}, [new templates.Text('Company name'), new templates.Element('span', {'class': new templates.Attribute('what-is-this has-tip'), 'title': new templates.Attribute('The way you spell your company name. This appears in the title tab of your job site and on the bottom of each page.')}, [new templates.Text('[?]')], void 0, false)], void 0, false), new templates.Element('input', {'class': new templates.Attribute('large-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['site', 'text'], new expressions.ExpressionMeta('site.text'))), 'placeholder': new templates.Attribute('Company name')}, null, void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('p', {'class': new templates.Attribute('label')}, [new templates.Text('Job site address'), new templates.Element('span', {'class': new templates.Attribute('what-is-this has-tip'), 'title': new templates.Attribute('The address to your Lever-hosted job site. Contact us if you want to change it')}, [new templates.Text('[?]')], void 0, false), new templates.Text('  '), new templates.Element('a', {'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('postings.postings.list'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('shortUrl'), new expressions.PathExpression(['site', 'shortUrl'])])], void 0, new expressions.ExpressionMeta('url(\'postings.postings.list\', {shortUrl: site.shortUrl})')))}, [new templates.Text('Open in new window')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('site-address-root')}, [new templates.Text('jobs.lever.co/')], void 0, false), new templates.Element('input', {'class': new templates.Attribute('large-input site-address-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['site', 'shortUrl'], new expressions.ExpressionMeta('site.shortUrl'))), 'placeholder': new templates.Attribute('Job site title'), 'disabled': new templates.Attribute(true)}, null, void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('p', {'class': new templates.Attribute('label')}, [new templates.Text('Company website'), new templates.Element('span', {'class': new templates.Attribute('what-is-this has-tip'), 'title': new templates.Attribute('The URL to your company\'s main home page. Appears on the bottom of each page.')}, [new templates.Text('[?]')], void 0, false)], void 0, false), new templates.Element('input', {'class': new templates.Attribute('large-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['site', 'companyUrl'], new expressions.ExpressionMeta('site.companyUrl'))), 'placeholder': new templates.Attribute('Company URL')}, null, void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('p', {'class': new templates.Attribute('label')}, [new templates.Text('Logo image links to this address  - optional'), new templates.Element('span', {'class': new templates.Attribute('what-is-this has-tip'), 'title': new templates.Attribute('Make the logo in the top left corner of the job link to any page you like.')}, [new templates.Text('[?]')], void 0, false)], void 0, false), new templates.Element('input', {'class': new templates.Attribute('large-input'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['site', 'header', 'link'], new expressions.ExpressionMeta('site.header.link'))), 'placeholder': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('postings.postings.list'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('shortUrl'), new expressions.PathExpression(['site', 'shortUrl'])])], void 0, new expressions.ExpressionMeta('url(\'postings.postings.list\', {shortUrl: site.shortUrl})')))}, null, void 0, false)], void 0, false)], void 0, false)]);
  views.register('settings:site:site-application').template = new templates.Template([new templates.Element('h3', void 0, [new templates.Text('Application forms')], void 0, false), new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Set defaults for application forms on your job site.')], void 0, false), new templates.Element('h4', void 0, [new templates.Text('Personal information')], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('application-question-list')}, [new templates.Element('li', void 0, [new templates.Element('div', {'class': new templates.Attribute('question-name')}, [new templates.Text('Resume')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('question-options')}, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('required-checkbox'), 'checked': new templates.DynamicAttribute(new expressions.PathExpression(['site', 'required', 'resume'], new expressions.ExpressionMeta('site.required.resume')))}, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('label')}, [new templates.Text('Required')], void 0, false)], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#'), 'class': new templates.Attribute('question-remove has-tip'), 'title': new templates.Attribute('This question can\'t be deleted')}, [new templates.ViewInstance('settings:site:icon-undeleteable', {})], void 0, false)], void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('div', {'class': new templates.Attribute('question-name')}, [new templates.Text('Full name')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('question-options')}, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('required-checkbox'), 'checked': new templates.Attribute(true), 'disabled': new templates.Attribute(true)}, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('label')}, [new templates.Text('Required')], void 0, false)], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#'), 'class': new templates.Attribute('question-remove has-tip'), 'title': new templates.Attribute('This question can\'t be deleted')}, [new templates.ViewInstance('settings:site:icon-undeleteable', {})], void 0, false)], void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('div', {'class': new templates.Attribute('question-name')}, [new templates.Text('Email')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('question-options')}, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('required-checkbox'), 'checked': new templates.Attribute(true), 'disabled': new templates.Attribute(true)}, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('label')}, [new templates.Text('Required')], void 0, false)], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#'), 'class': new templates.Attribute('question-remove has-tip'), 'title': new templates.Attribute('This question can\'t be deleted')}, [new templates.ViewInstance('settings:site:icon-undeleteable', {})], void 0, false)], void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('div', {'class': new templates.Attribute('question-name')}, [new templates.Text('Phone')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('question-options')}, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('required-checkbox'), 'checked': new templates.DynamicAttribute(new expressions.PathExpression(['site', 'required', 'phone'], new expressions.ExpressionMeta('site.required.phone')))}, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('label')}, [new templates.Text('Required')], void 0, false)], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#'), 'class': new templates.Attribute('question-remove has-tip'), 'title': new templates.Attribute('This question can\'t be deleted')}, [new templates.ViewInstance('settings:site:icon-undeleteable', {})], void 0, false)], void 0, false)], void 0, false), new templates.Element('li', void 0, [new templates.Element('div', {'class': new templates.Attribute('question-name')}, [new templates.Text('Current company')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('question-options')}, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('required-checkbox'), 'checked': new templates.DynamicAttribute(new expressions.PathExpression(['site', 'required', 'org'], new expressions.ExpressionMeta('site.required.org')))}, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('label')}, [new templates.Text('Required')], void 0, false)], void 0, false), new templates.Element('a', {'href': new templates.Attribute('#'), 'class': new templates.Attribute('question-remove has-tip'), 'title': new templates.Attribute('This question can\'t be deleted')}, [new templates.ViewInstance('settings:site:icon-undeleteable', {})], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.Element('h4', void 0, [new templates.Text('Links')], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['site', 'additionalUrls'], new expressions.ExpressionMeta('unless site.additionalUrls', 'unless'))], [
    [new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('There are no link questions on your application forms.')], void 0, false)]
  ]), new templates.Element('ul', {'class': new templates.Attribute('application-question-list')}, [new templates.EachBlock(new expressions.PathExpression(['site', 'additionalUrls'], new expressions.ExpressionMeta('each site.additionalUrls as #additionalUrl, #i', 'each', void 0, '#additionalUrl', '#i')), [new templates.Element('li', void 0, [new templates.Element('div', {'class': new templates.Attribute('question-name')}, [new templates.Element('input', {'class': new templates.Attribute('hoverable-input'), 'type': new templates.Attribute('text'), 'value': new templates.DynamicAttribute(new expressions.AliasPathExpression('#additionalUrl', ['value'], new expressions.ExpressionMeta('#additionalUrl.value'))), 'placeholder': new templates.Attribute('Link name')}, null, void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('question-options')}, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'class': new templates.Attribute('required-checkbox'), 'checked': new templates.DynamicAttribute(new expressions.AliasPathExpression('#additionalUrl', ['required'], new expressions.ExpressionMeta('#additionalUrl.required')))}, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('label')}, [new templates.Text('Required')], void 0, false)], void 0, false), new templates.Element('a', {'class': new templates.Attribute('question-remove has-tip'), 'title': new templates.Attribute('Remove question'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('settings:site:icon-delete', {})], [new templates.ElementOn('click', new expressions.FnExpression(['removeAdditionalUrl'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('a', {'class': new templates.Attribute('question-move has-tip'), 'title': new templates.Attribute('Move up'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('settings:site:icon-arrow-up', {})], [new templates.ElementOn('click', new expressions.FnExpression(['moveAdditionalUrl'], [new expressions.AliasPathExpression('#i', []), new expressions.LiteralExpression(-1)])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)], void 0, false)])], void 0, false), new templates.Element('a', {'class': new templates.Attribute('link has-icon'), 'href': new templates.Attribute('#')}, [new templates.ViewInstance('icon-plus', {}), new templates.Text('Add link question')], [new templates.ElementOn('click', new expressions.FnExpression(['addAdditionalUrl'], [])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false), new templates.Element('h3', void 0, [new templates.Text('Equal employment opportunity')], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('settings-list')}, [new templates.Element('li', void 0, [new templates.Element('label', void 0, [new templates.Element('input', {'type': new templates.Attribute('checkbox'), 'checked': new templates.DynamicAttribute(new expressions.PathExpression(['site', 'showEEO'], new expressions.ExpressionMeta('site.showEEO')))}, null, void 0, false), new templates.Text('Show EEO questions'), new templates.Element('p', {'class': new templates.Attribute('label')}, [new templates.Text('Will only appear for applicants with US IP addresses.')], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('settings:403:Title').template = new templates.Template([new templates.Text('Team – Lever Settings')]);
  views.register('settings:403:Body').template = new templates.Template([new templates.Element('div', {'id': new templates.Attribute('team-settings class=content')}, [new templates.Element('h1', {'class': new templates.Attribute('settings-headline')}, [new templates.Text('Settings')], void 0, false), new templates.ViewInstance('settings:nav', {}), new templates.Element('div', {'class': new templates.Attribute('nav-content')}, [new templates.Element('div', {'class': new templates.Attribute('settings-error')}, [new templates.Text('Only admins can view this page')], void 0, false)], void 0, false)], void 0, false)]);
  views.register('accounts:pay:Head').template = new templates.Template([new templates.Element('script', {'type': new templates.Attribute('text/javascript'), 'src': new templates.Attribute('https://js.stripe.com/v2/')}, [], void 0, false), new templates.ViewInstance('meta', {})]);
  views.register('accounts:pay:index').template = new templates.Template([new templates.Comment('accounts:pay:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('content payment')}, [new templates.Element('div', {'class': new templates.Attribute('payment-headline')}, [new templates.Element('h1', void 0, [new templates.Text('Billing')], void 0, false), new templates.Element('p', void 0, [new templates.Text('Set up recurring credit card billing by filling in the information below.')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('nav-content')}, [new templates.ViewInstance('accounts:pay:plan-info', {}), new templates.ViewInstance('accounts:pay:credit-info', {}), new templates.Element('div', {'class': new templates.Attribute('payment-divider')}, [], void 0, false), new templates.ViewInstance('accounts:pay:additional-info', {})], void 0, false)], void 0, false)]);
  views.register('accounts:pay:plan-info').template = new templates.Template([new templates.Element('h4', void 0, [new templates.Text('Your plan')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('plan-container')}, [new templates.Element('h3', {'class': new templates.Attribute('plan-price')}, [new templates.Element('span', {'class': new templates.Attribute('denomination')}, [new templates.Text('$')], void 0, false), new templates.DynamicText(new expressions.PathExpression(['billing', 'plan', 'amount'], new expressions.ExpressionMeta('billing.plan.amount'))), new templates.Text(' / '), new templates.DynamicText(new expressions.PathExpression(['billing', 'plan', 'period'], new expressions.ExpressionMeta('billing.plan.period')))], void 0, false), new templates.Element('h4', void 0, [new templates.Text('Lever Beta account')], void 0, false), new templates.Element('p', void 0, [new templates.Text('Unlimited usage and unlimited users')], void 0, false)], void 0, false)]);
  views.register('accounts:pay:credit-info').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('credit-card-info')}, [new templates.Element('h2', void 0, [new templates.Text('Set up recurring payment')], void 0, false), new templates.ConditionalBlock([new expressions.PathExpression(['stripeError'], new expressions.ExpressionMeta('if stripeError', 'if'))], [
    [new templates.Element('div', {'id': new templates.Attribute('payment-errors')}, [new templates.DynamicText(new expressions.RelativePathExpression([], new expressions.ExpressionMeta('this')))], void 0, false), new templates.Element('br', void 0, null, void 0, false)]
  ]), new templates.Element('form', {'action': new templates.Attribute(''), 'method': new templates.Attribute('POST'), 'id': new templates.Attribute('payment-form')}, [new templates.Element('div', {'class': new templates.Attribute('form-row')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'id': new templates.Attribute('cc-number'), 'type': new templates.Attribute('text'), 'placeholder': new templates.Attribute('Card Number'), 'size': new templates.Attribute('20'), 'data-stripe': new templates.Attribute('number'), 'autocomplete': new templates.Attribute('cc-number')}, null, void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('form-row')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'size': new templates.Attribute('4'), 'placeholder': new templates.Attribute('CVC'), 'data-stripe': new templates.Attribute('cvc')}, null, void 0, false), new templates.Element('span', {'id': new templates.Attribute('cc-expiry')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'size': new templates.Attribute('2'), 'placeholder': new templates.Attribute('MM'), 'data-stripe': new templates.Attribute('exp-month')}, null, void 0, false), new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'size': new templates.Attribute('4'), 'placeholder': new templates.Attribute('YYYY'), 'data-stripe': new templates.Attribute('exp-year')}, null, void 0, false)], void 0, false), new templates.Element('button', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('submit '), new templates.ConditionalBlock([new expressions.PathExpression(['creatingStripeToken'], new expressions.ExpressionMeta('if creatingStripeToken', 'if'))], [
    [new templates.Text('disabled')]
  ])])), 'type': new templates.Attribute('submit'), 'disabled': new templates.DynamicAttribute(new expressions.PathExpression(['creatingStripeToken'], new expressions.ExpressionMeta('creatingStripeToken')))}, [new templates.ConditionalBlock([new expressions.PathExpression(['creatingStripeToken'], new expressions.ExpressionMeta('if creatingStripeToken', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Text('Sending...')],
    [new templates.Text('Send payment')]
  ])], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('stripe-icon')}, [new templates.Element('a', {'href': new templates.Attribute('http://www.stripe.com'), 'target': new templates.Attribute('_blank')}, [new templates.Element('img', {'src': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.img')], void 0, new expressions.ExpressionMeta('url(\'hire.img\')'))), new templates.Text('/stripe-icon.png')]))}, null, void 0, false)], void 0, false)], void 0, false)], [new templates.ElementOn('submit', new expressions.FnExpression(['createSingleUserToken'], [new expressions.PathExpression(['$event']), new expressions.PathExpression(['$element'])])), new templates.ElementOn('submit', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)]);
  views.register('accounts:pay:additional-info').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('additional-info')}, [new templates.Element('h4', void 0, [new templates.Text('Other options')], void 0, false), new templates.ViewInstance('accounts:pay:billing-info', {}), new templates.ViewInstance('accounts:pay:ach-info', {}), new templates.Element('div', {'class': new templates.Attribute('support-info')}, [new templates.Element('h3', void 0, [new templates.Text('Questions? Changes?')], void 0, false), new templates.Element('p', void 0, [new templates.Text('Contact '), new templates.Element('a', {'href': new templates.Attribute('mailto:billing@lever.co')}, [new templates.Text('billing@lever.co')], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('accounts:pay:billing-info').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('billing-info')}, [new templates.Element('h2', void 0, [new templates.Text('Update Billing Contact')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('form-row')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'placeholder': new templates.Attribute('Name'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['billingContact', 'name'], new expressions.ExpressionMeta('billingContact.name')))}, null, void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('form-row')}, [new templates.Element('input', {'class': new templates.Attribute('classic-input'), 'type': new templates.Attribute('text'), 'placeholder': new templates.Attribute('Email'), 'value': new templates.DynamicAttribute(new expressions.PathExpression(['billingContact', 'email'], new expressions.ExpressionMeta('billingContact.email')))}, null, void 0, false)], void 0, false), new templates.Element('button', {'class': new templates.Attribute('submit'), 'type': new templates.Attribute('submit')}, [new templates.Text('Save changes')], [new templates.ElementOn('click', new expressions.FnExpression(['updateBillingContact'], []))], false)], void 0, false)]);
  views.register('accounts:pay:ach-info').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('ach-info')}, [new templates.Element('h2', void 0, [new templates.Text('Pay via Automated Clearing House (ACH)')], void 0, false), new templates.Element('button', {'class': new templates.Attribute('btn')}, [new templates.Text('Request ACH payments')], [new templates.ElementOn('click', new expressions.FnExpression(['requestAch'], []))], false), new templates.Element('p', {'class': new templates.Attribute('label')}, [new templates.Text('Only available in the United States')], void 0, false)], void 0, false)]);
  views.register('accounts:thanks:index').template = new templates.Template([new templates.Comment('accounts:thanks:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('content payment')}, [new templates.Element('div', {'class': new templates.Attribute('payment-headline')}, [new templates.Element('h1', void 0, [new templates.Text('Thank you')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('nav-content thank-you')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['_page', 'action']), new expressions.LiteralExpression('ach')], void 0, new expressions.ExpressionMeta('if #root._page.action === \'ach\'', 'if')), new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['_page', 'action']), new expressions.LiteralExpression('contact')], void 0, new expressions.ExpressionMeta('else if #root._page.action === \'contact\'', 'else if'))], [
    [new templates.ViewInstance('accounts:thanks:thank-ach', {})],
    [new templates.ViewInstance('accounts:thanks:thank-contact', {})]
  ])], void 0, false)], void 0, false)]);
  views.register('accounts:thanks:thank-ach').template = new templates.Template([new templates.Element('h3', void 0, [new templates.Text('ACH Payment requested')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('settings-divider')}, [], void 0, false), new templates.Element('p', void 0, [new templates.Text('We\'ve notified our billing team about your request. Expect to hear from us soon.')], void 0, false), new templates.Element('a', {'href': new templates.Attribute('/pay'), 'class': new templates.Attribute('submit')}, [new templates.Text('Return to payments')], void 0, false)]);
  views.register('accounts:thanks:thank-contact').template = new templates.Template([new templates.Element('h3', void 0, [new templates.Text('Billing contact updated')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('settings-divider')}, [], void 0, false), new templates.Element('p', void 0, [new templates.Text('We’ve updated your contact information. All future billing notifications will be sent to '), new templates.DynamicText(new expressions.PathExpression(['billing', 'billingContact', 'name'], new expressions.ExpressionMeta('billing.billingContact.name'))), new templates.Text(', '), new templates.DynamicText(new expressions.PathExpression(['billing', 'billingContact', 'email'], new expressions.ExpressionMeta('billing.billingContact.email')))], void 0, false), new templates.Element('a', {'href': new templates.Attribute('/pay'), 'class': new templates.Attribute('submit')}, [new templates.Text('Return to payments')], void 0, false)]);
  views.register('accounts:thankyouforpaying:index').template = new templates.Template([new templates.Comment('accounts:thankyouforpaying:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('content payment')}, [new templates.Element('div', {'class': new templates.Attribute('payment-headline')}, [new templates.Element('h1', void 0, [new templates.Text('Thank you for paying!')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('nav-content thank-you')}, [new templates.Element('h3', void 0, [new templates.Text('Summary')], void 0, false), new templates.Element('p', void 0, [new templates.Text('Your payment information has been received. You will be charged $'), new templates.DynamicText(new expressions.PathExpression(['billing', 'plan', 'amount'], new expressions.ExpressionMeta('billing.plan.amount'))), new templates.Text(' every '), new templates.DynamicText(new expressions.PathExpression(['billing', 'plan', 'period'], new expressions.ExpressionMeta('billing.plan.period'))), new templates.Text('.')], void 0, false), new templates.Element('h4', void 0, [new templates.Text('Your plan')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('plan-container')}, [new templates.Element('h3', {'class': new templates.Attribute('plan-price')}, [new templates.Element('span', {'class': new templates.Attribute('denomination')}, [new templates.Text('$')], void 0, false), new templates.DynamicText(new expressions.PathExpression(['billing', 'plan', 'amount'], new expressions.ExpressionMeta('billing.plan.amount'))), new templates.Text(' / '), new templates.DynamicText(new expressions.PathExpression(['billing', 'plan', 'period'], new expressions.ExpressionMeta('billing.plan.period')))], void 0, false), new templates.Element('h4', void 0, [new templates.Text('Lever Beta account')], void 0, false), new templates.Element('p', void 0, [new templates.Text('Unlimited usage and unlimited users')], void 0, false)], void 0, false), new templates.Element('br', void 0, null, void 0, false), new templates.Element('a', {'href': new templates.Attribute('/pay'), 'class': new templates.Attribute('btn submit')}, [new templates.Text('Return to payments')], void 0, false)], void 0, false)], void 0, false)]);
  views.register('reports:exports:interviews:Title').template = new templates.Template([new templates.Text('Lever reports - Export interviews')]);
  views.register('reports:exports:interviews:index').template = new templates.Template([new templates.Comment('reports:exports:interviews:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('reports content compact-report')}, [new templates.ViewInstance('reports:reportsNav', {}), new templates.Element('div', {'class': new templates.Attribute('reports-content')}, [new templates.Element('div', {'class': new templates.Attribute('report-toolbar')}, [new templates.Element('h1', {'class': new templates.Attribute('report-title')}, [new templates.Text('Export interviews')], void 0, false), new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Exports interview related data. Each row corresponds to one interviewer\'s interview (if 5 people participated in one interview, there will be 5 rows).')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('report-range')}, [new templates.Element('p', void 0, [new templates.Element('a', {'class': new templates.Attribute('download-item'), 'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.LiteralExpression('exports'), new expressions.LiteralExpression('fileName'), new expressions.LiteralExpression('interviews.latest.csv')])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', {\'accountId\': #root._session.accountId, \'userId\': #root._session.userId, \'fileId\': \'exports\', \'fileName\': \'interviews.latest.csv\'})')))}, [new templates.Text('interviews.csv')], void 0, false), new templates.Text(' ')], void 0, false), new templates.Element('p', void 0, [new templates.DynamicText(new expressions.PathExpression(['latestInterviewExport', 'interviews'], new expressions.ExpressionMeta('latestInterviewExport.interviews'))), new templates.Text(' rows - last generated at '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['latestInterviewExport', 'finishedAt']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('default')], void 0, new expressions.ExpressionMeta('formatTime(latestInterviewExport.finishedAt, #root._session.timezoneName, \'default\')'))), new templates.Element('br', void 0, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('label')}, [new templates.Text('Refreshes every 24 hours')], void 0, false)], void 0, false), new templates.Element('a', {'class': new templates.Attribute('btn has-icon'), 'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.LiteralExpression('exports'), new expressions.LiteralExpression('fileName'), new expressions.LiteralExpression('interviews.latest.csv')])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', {\'accountId\': #root._session.accountId, \'userId\': #root._session.userId, \'fileId\': \'exports\', \'fileName\': \'interviews.latest.csv\'})')))}, [new templates.ViewInstance('icon-download', {}), new templates.Text(' Download')], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('reports:exports:candidates:Title').template = new templates.Template([new templates.Text('Lever reports - Export candidates')]);
  views.register('reports:exports:candidates:index').template = new templates.Template([new templates.Comment('reports:exports:candidates:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('reports content compact-report')}, [new templates.ViewInstance('reports:reportsNav', {}), new templates.Element('div', {'class': new templates.Attribute('reports-content')}, [new templates.Element('div', {'class': new templates.Attribute('report-toolbar')}, [new templates.Element('h1', {'class': new templates.Attribute('report-title')}, [new templates.Text('Export candidates')], void 0, false), new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Exports pipeline history for every candidate considered in Lever. Each row corresponds to one application, with dates of stage changes and archivings as well as candidate summary data such as tags and contact info.')], void 0, false), new templates.Element('p', void 0, [new templates.Text('Also includes candidates in the system who are not applied to a specific job posting. Candidates may appear in multiple rows if they have applied (or been applied to) multiple job postings.')], void 0, false), new templates.Element('div', {'class': new templates.Attribute('report-range')}, [new templates.Element('p', void 0, [new templates.Element('a', {'class': new templates.Attribute('download-item'), 'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.LiteralExpression('exports'), new expressions.LiteralExpression('fileName'), new expressions.LiteralExpression('candidates.latest.csv')])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', { \'accountId\': #root._session.accountId, \'userId\': #root._session.userId, \'fileId\': \'exports\', \'fileName\': \'candidates.latest.csv\'})')))}, [new templates.Text('candidates.csv')], void 0, false)], void 0, false), new templates.Element('p', void 0, [new templates.DynamicText(new expressions.PathExpression(['latestCandidateExport', 'candidates'], new expressions.ExpressionMeta('latestCandidateExport.candidates'))), new templates.Text(' rows - last generated at '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['latestCandidateExport', 'finishedAt']), new expressions.PathExpression(['_session', 'timezoneName']), new expressions.LiteralExpression('default')], void 0, new expressions.ExpressionMeta('formatTime(latestCandidateExport.finishedAt, _session.timezoneName, \'default\')'))), new templates.Element('br', void 0, null, void 0, false), new templates.Element('span', {'class': new templates.Attribute('label')}, [new templates.Text('Refreshes every 24 hours')], void 0, false)], void 0, false), new templates.Element('a', {'class': new templates.Attribute('btn has-icon'), 'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.LiteralExpression('exports'), new expressions.LiteralExpression('fileName'), new expressions.LiteralExpression('candidates.latest.csv')])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', { \'accountId\': #root._session.accountId, \'userId\': #root._session.userId, \'fileId\': \'exports\', \'fileName\': \'candidates.latest.csv\'})')))}, [new templates.ViewInstance('icon-download', {}), new templates.Text(' Download')], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('reports:summary:Title').template = new templates.Template([new templates.Text('Lever reports - Summary')]);
  views.register('reports:summary:index').template = new templates.Template([new templates.Comment('reports:summary:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('reports content compact-report')}, [new templates.ViewInstance('reports:reportsNav', {}), new templates.Element('div', {'class': new templates.Attribute('reports-content')}, [new templates.Element('div', {'class': new templates.Attribute('report-toolbar')}, [new templates.Text('SUMMARY')], void 0, false)], void 0, false)], void 0, false)]);
  views.register('reports:pipeline:index').template = new templates.Template([new templates.Comment('reports:pipeline:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('reports content compact-report')}, [new templates.ViewInstance('reports:reportsNav', {}), new templates.Element('div', {'class': new templates.Attribute('reports-content')}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('reports:pipeline:'), new templates.DynamicText(new expressions.PathExpression(['name'], new expressions.ExpressionMeta('name')))]), {})], void 0, false)], void 0, false)]);
  views.register('reports:pipeline:reportToolbar', null, {'attributes': 'description'}).template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('report-toolbar')}, [new templates.Element('h1', {'class': new templates.Attribute('report-title')}, [new templates.DynamicText(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('report-actions')}, [new templates.ViewInstance('l-dropdown', {'class': 'reporting-period-dropdown caps-option tall-option', 'options': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['reportingPeriods'], new expressions.ExpressionMeta('reportingPeriods'))), new expressions.PathExpression(['reportingPeriods'], new expressions.ExpressionMeta('reportingPeriods'))), 'value': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['timePeriod'], new expressions.ExpressionMeta('timePeriod'))), new expressions.PathExpression(['timePeriod'], new expressions.ExpressionMeta('timePeriod')))}), new templates.Element('a', {'class': new templates.Attribute('btn has-icon'), 'target': new templates.Attribute('_blank'), 'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.files.download'), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('accountId'), new expressions.AliasPathExpression('#root', ['_session', 'accountId']), new expressions.LiteralExpression('userId'), new expressions.AliasPathExpression('#root', ['_session', 'userId']), new expressions.LiteralExpression('fileId'), new expressions.LiteralExpression('reports'), new expressions.LiteralExpression('fileName'), new expressions.OperatorExpression('+', [new expressions.OperatorExpression('+', [new expressions.OperatorExpression('+', [new expressions.PathExpression(['name']), new expressions.LiteralExpression('.')]), new expressions.PathExpression(['timePeriod'])]), new expressions.LiteralExpression('.csv')])])], void 0, new expressions.ExpressionMeta('url(\'hire.files.download\', {\'accountId\': #root._session.accountId, \'userId\': #root._session.userId, \'fileId\':\'reports\', \'fileName\': name+\'.\'+ timePeriod +\'.csv\'})')))}, [new templates.ViewInstance('icon-download', {}), new templates.Text('Download')], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('report-range')}, [new templates.ConditionalBlock([new expressions.OperatorExpression('||', [new expressions.OperatorExpression('==', [new expressions.PathExpression(['report']), new expressions.LiteralExpression()]), new expressions.OperatorExpression('===', [new expressions.PathExpression(['rows', 'length']), new expressions.LiteralExpression(0)])], void 0, new expressions.ExpressionMeta('if report == null || rows.length === 0', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('p', {'class': new templates.Attribute('notification')}, [new templates.Text('Oops! It looks like we don\'t have the data needed for this report. If you think this is an error, please let us know by reaching out '), new templates.Element('a', {'href': new templates.Attribute('mailto:support@lever.co')}, [new templates.Text('support@lever.co')], void 0, false)], void 0, false)],
    [new templates.Element('span', {'class': new templates.Attribute('dates')}, [new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['report', 'timePeriod', 'start']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('date')], void 0, new expressions.ExpressionMeta('formatTime(report.timePeriod.start, #root._session.timezoneName, \'date\')'))), new templates.Text(' - '), new templates.DynamicText(new expressions.FnExpression(['formatTime'], [new expressions.PathExpression(['report', 'timePeriod', 'end']), new expressions.AliasPathExpression('#root', ['_session', 'timezoneName']), new expressions.LiteralExpression('date')], void 0, new expressions.ExpressionMeta('formatTime(report.timePeriod.end, #root._session.timezoneName, \'date\')')))], void 0, false), new templates.ConditionalBlock([new expressions.AttributePathExpression('description', [], new expressions.ExpressionMeta('if @description', 'if'))], [
      [new templates.Element('br', void 0, null, void 0, false), new templates.DynamicText(new expressions.AttributePathExpression('description', [], new expressions.ExpressionMeta('@description')))]
    ])]
  ])], void 0, false)], void 0, false)]);
  views.register('reports:pipeline:pipeline-conversion-cellcontent').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('report-table-body-container cell-container')}, [new templates.Block(new expressions.BracketsExpression(new expressions.PathExpression(['summary', 'report']), new expressions.AliasPathExpression('#row', ['id']), void 0, new expressions.ExpressionMeta('with summary.report[#row.id] as #rowData', 'with', void 0, '#rowData')), [new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#rowData', ['stages']), new expressions.AliasPathExpression('#col', ['id']), void 0, new expressions.ExpressionMeta('with #rowData.stages[#col.id] as #cell', 'with', void 0, '#cell')), [new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === "activity"', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('single-stat report-value'), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.AliasPathExpression('#cell', ['numEntered'])], void 0, new expressions.ExpressionMeta('if !#cell.numEntered', 'if'))], [
      [new templates.Text(' zero')]
    ])]))}, [new templates.DynamicText(new expressions.FnExpression(['disp'], [new expressions.AliasPathExpression('#cell', ['numEntered'])], void 0, new expressions.ExpressionMeta('disp(#cell.numEntered)')))], [new templates.ElementOn('click', new expressions.FnExpression(['console', 'log'], [new expressions.AliasPathExpression('#cell', [])]))], false)],
    [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('single-stat report-value percent'), new templates.ConditionalBlock([new expressions.OperatorExpression('||', [new expressions.OperatorExpression('!U', [new expressions.AliasPathExpression('#cell', ['numExited'])]), new expressions.OperatorExpression('!U', [new expressions.AliasPathExpression('#cell', ['numIn'])])], void 0, new expressions.ExpressionMeta('if !#cell.numExited || !#cell.numIn', 'if'))], [
      [new templates.Text(' zero')]
    ])]))}, [new templates.DynamicText(new expressions.FnExpression(['disp'], [new expressions.FnExpression(['percent'], [new expressions.AliasPathExpression('#cell', ['numExited']), new expressions.AliasPathExpression('#cell', ['numIn'])]), new expressions.LiteralExpression(1)], void 0, new expressions.ExpressionMeta('disp(percent(#cell.numExited, #cell.numIn),1)')))], [new templates.ElementOn('click', new expressions.FnExpression(['console', 'log'], [new expressions.AliasPathExpression('#cell', [])]))], false)]
  ])])])], void 0, false)]);
  views.register('reports:pipeline:pipeline-speed-cellcontent').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('report-table-body-container cell-container')}, [new templates.Block(new expressions.BracketsExpression(new expressions.PathExpression(['summary', 'report']), new expressions.AliasPathExpression('#row', ['id']), void 0, new expressions.ExpressionMeta('with summary.report[#row.id] as #rowData', 'with', void 0, '#rowData')), [new templates.Block(new expressions.BracketsExpression(new expressions.AliasPathExpression('#rowData', ['stages']), new expressions.AliasPathExpression('#col', ['id']), void 0, new expressions.ExpressionMeta('with #rowData.stages[#col.id] as #cell', 'with', void 0, '#cell')), [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('single-stat report-value'), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.AliasPathExpression('#cell', ['averageTimeInStage'])], void 0, new expressions.ExpressionMeta('if !#cell.averageTimeInStage', 'if'))], [
    [new templates.Text(' zero')]
  ])]))}, [new templates.DynamicText(new expressions.FnExpression(['disp'], [new expressions.FnExpression(['days'], [new expressions.AliasPathExpression('#cell', ['averageTimeInStage'])]), new expressions.LiteralExpression(2)], void 0, new expressions.ExpressionMeta('disp(days(#cell.averageTimeInStage),2)')))], [new templates.ElementOn('click', new expressions.FnExpression(['console', 'log'], [new expressions.AliasPathExpression('#cell', [])]))], false)])])], void 0, false)]);
  views.register('reports:pipeline:pipeline-toplevel-cellcontent').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('report-table-body-container cell-container')}, [new templates.Block(new expressions.BracketsExpression(new expressions.PathExpression(['summary', 'report']), new expressions.AliasPathExpression('#row', ['id']), void 0, new expressions.ExpressionMeta('with summary.report[#row.id] as #rowData', 'with', void 0, '#rowData')), [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('single-stat report-value'), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.BracketsExpression(new expressions.AliasPathExpression('#rowData', []), new expressions.AliasPathExpression('#col', ['value']))], void 0, new expressions.ExpressionMeta('if !#rowData[#col.value]', 'if'))], [
    [new templates.Text(' zero')]
  ])]))}, [new templates.DynamicText(new expressions.FnExpression(['disp'], [new expressions.BracketsExpression(new expressions.AliasPathExpression('#rowData', []), new expressions.AliasPathExpression('#col', ['value']))], void 0, new expressions.ExpressionMeta('disp(#rowData[#col.value])')))], [new templates.ElementOn('click', new expressions.FnExpression(['console', 'log'], [new expressions.AliasPathExpression('#rowData', []), new expressions.AliasPathExpression('#col', [])]))], false)])], void 0, false)]);
  views.register('reports:pipeline:pipeline-conversion-posting').template = new templates.Template([new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === "activity"', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline candidates by posting', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('This report shows the number of candidates who entered a stage during the specified time period.')], void 0, false)]))})],
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline conversion by posting', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Percent conversion is calculated by dividing the number of candidates who exited a stage (advanced to the next stage or hired) by the number of candidates in it.')], void 0, false)]))})]
  ]), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-conversion-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-conversion-owner').template = new templates.Template([new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === "activity"', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline candidates by owner', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('This report shows the number of candidates who entered a stage during the specified time period by posting owner.')], void 0, false)]))})],
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline conversion by owner', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Percent conversion is calculated by dividing the number of candidates who exited a stage (advanced to the next stage or hired) by the number of candidates in it.')], void 0, false)]))})]
  ]), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-conversion-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-conversion-source').template = new templates.Template([new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === "activity"', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline candidates by source', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('This report shows the number of candidates who entered a stage during the specified time period.')], void 0, false)]))})],
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline conversion by source', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Percent conversion is calculated by dividing the number of candidates who exited a stage (advanced to the next stage or hired) by the number of candidates in it.')], void 0, false)]))})]
  ]), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-conversion-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-conversion-sourcer').template = new templates.Template([new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === "activity"', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline candidates by sourcer', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('This report shows the number of candidates who entered a stage during the specified time period.')], void 0, false)]))})],
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline conversion by sourcer', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Percent conversion is calculated by dividing the number of candidates who exited a stage (advanced to the next stage or hired) by the number of candidates in it.')], void 0, false)]))})]
  ]), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-conversion-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-conversion-team').template = new templates.Template([new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === "activity"', 'if')), new expressions.Expression(new expressions.ExpressionMeta('else', 'else'))], [
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline candidates by team', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('This report shows the number of candidates who entered a stage during the specified time period.')], void 0, false)]))})],
    [new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline conversion by team', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Percent conversion is calculated by dividing the number of candidates who exited a stage (advanced to the next stage or hired) by the number of candidates in it.')], void 0, false)]))})]
  ]), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-conversion-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-speed-posting').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline speed by posting', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Average days spent in each stage across all candidates who have had stage changes or been archived in the selected time period.')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-speed-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-speed-owner').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline speed by posting owner', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Average days spent in each stage across all candidates who have had stage changes or been archived in the selected time period.')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-speed-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-speed-source').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline speed by source', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Average days spent in each stage across all candidates who have had stage changes or been archived in the selected time period.')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-speed-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-speed-team').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Pipeline speed by team', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Average days spent in each stage across all candidates who have had stage changes or been archived in the selected time period.')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-speed-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-toplevel-posting').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Candidate stats by posting', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('This report shows by posting how many candidates entered the pipeline through available channels and how they exited the pipeline.')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['statColumns'], new expressions.ExpressionMeta('statColumns'))), new expressions.PathExpression(['statColumns'], new expressions.ExpressionMeta('statColumns'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-toplevel-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-toplevel-source').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Candidate stats by source', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('This report shows by source how many candidates total were added to the pipeline and how they exited the pipeline.')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sourceStatColumns'], new expressions.ExpressionMeta('sourceStatColumns'))), new expressions.PathExpression(['sourceStatColumns'], new expressions.ExpressionMeta('sourceStatColumns'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), new expressions.PathExpression(['sortedSources'], new expressions.ExpressionMeta('sortedSources'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-toplevel-cellcontent', {})])})]);
  views.register('reports:pipeline:pipeline-toplevel-team').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Candidate stats by team', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('This report shows by team how many candidates entered the pipeline through available channels and how they exited the pipeline.')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['statColumns'], new expressions.ExpressionMeta('statColumns'))), new expressions.PathExpression(['statColumns'], new expressions.ExpressionMeta('statColumns'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:pipeline:pipeline-toplevel-cellcontent', {})])})]);
  views.register('reports:interviews:index').template = new templates.Template([new templates.Comment('reports:interviews:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.Attribute('reports content compact-report')}, [new templates.ViewInstance('reports:reportsNav', {}), new templates.Element('div', {'class': new templates.Attribute('reports-content')}, [new templates.DynamicViewInstance(new templates.Template([new templates.Text('reports:interviews:'), new templates.DynamicText(new expressions.PathExpression(['name'], new expressions.ExpressionMeta('name')))]), {})], void 0, false)], void 0, false)]);
  views.register('reports:interviews:interviews-counts-cellcontent').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('report-table-body-container cell-container')}, [new templates.Block(new expressions.BracketsExpression(new expressions.BracketsExpression(new expressions.PathExpression(['summary', 'report']), new expressions.AliasPathExpression('#row', ['id']), ['stages']), new expressions.AliasPathExpression('#col', ['id']), void 0, new expressions.ExpressionMeta('with summary.report[#row.id].stages[#col.id] as #cell', 'with', void 0, '#cell')), [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('single-stat report-value '), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.AliasPathExpression('#cell', ['numInterviews'])], void 0, new expressions.ExpressionMeta('if !#cell.numInterviews', 'if'))], [
    [new templates.Text(' zero')]
  ])]))}, [new templates.DynamicText(new expressions.FnExpression(['disp'], [new expressions.AliasPathExpression('#cell', ['numInterviews'])], void 0, new expressions.ExpressionMeta('disp(#cell.numInterviews)')))], [new templates.ElementOn('click', new expressions.FnExpression(['console', 'log'], [new expressions.AliasPathExpression('#cell', [])]))], false)])], void 0, false)]);
  views.register('reports:interviews:interviews-toplevel-cellcontent').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('report-table-body-container cell-container')}, [new templates.Block(new expressions.BracketsExpression(new expressions.PathExpression(['summary', 'report']), new expressions.AliasPathExpression('#row', ['id']), void 0, new expressions.ExpressionMeta('with summary.report[#row.id] as #rowData', 'with', void 0, '#rowData')), [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('single-stat report-value '), new templates.ConditionalBlock([new expressions.OperatorExpression('!U', [new expressions.BracketsExpression(new expressions.BracketsExpression(new expressions.AliasPathExpression('#rowData', ['types']), new expressions.AliasPathExpression('#col', ['id'])), new expressions.AliasPathExpression('#col', ['reportType']))], void 0, new expressions.ExpressionMeta('if !#rowData.types[#col.id][#col.reportType]', 'if'))], [
    [new templates.Text(' zero')]
  ])]))}, [new templates.DynamicText(new expressions.FnExpression(['disp'], [new expressions.BracketsExpression(new expressions.BracketsExpression(new expressions.AliasPathExpression('#rowData', ['types']), new expressions.AliasPathExpression('#col', ['id'])), new expressions.AliasPathExpression('#col', ['reportType']))], void 0, new expressions.ExpressionMeta('disp(#rowData.types[#col.id][#col.reportType])')))], [new templates.ElementOn('click', new expressions.FnExpression(['console', 'log'], [new expressions.AliasPathExpression('#rowData', []), new expressions.AliasPathExpression('#col', [])]))], false)])], void 0, false)]);
  views.register('reports:interviews:interviews-toplevel-posting').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Interview types by posting', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Key metrics to know many of each type of interview occurred during the specified time period')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['interviewColumns'], new expressions.ExpressionMeta('interviewColumns'))), new expressions.PathExpression(['interviewColumns'], new expressions.ExpressionMeta('interviewColumns'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:interviews:interviews-toplevel-cellcontent', {})])})]);
  views.register('reports:interviews:interviews-toplevel-team').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Interview types by team', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Key metrics to know many of each type of interview occurred during the specified time period')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['interviewColumns'], new expressions.ExpressionMeta('interviewColumns'))), new expressions.PathExpression(['interviewColumns'], new expressions.ExpressionMeta('interviewColumns'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:interviews:interviews-toplevel-cellcontent', {})])})]);
  views.register('reports:interviews:interviews-counts-posting').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Interview counts by posting', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Count of how many interviews took place across the stages in your pipeline')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), new expressions.PathExpression(['postings'], new expressions.ExpressionMeta('postings'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:interviews:interviews-counts-cellcontent', {})])})]);
  views.register('reports:interviews:interviews-counts-owner').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Interview counts by posting', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Count of how many interviews took place across the stages in your pipeline')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), new expressions.PathExpression(['postingOwners'], new expressions.ExpressionMeta('postingOwners'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:interviews:interviews-counts-cellcontent', {})])})]);
  views.register('reports:interviews:interviews-counts-scheduler').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Interview counts by scheduler', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['schedulers'], new expressions.ExpressionMeta('schedulers'))), new expressions.PathExpression(['schedulers'], new expressions.ExpressionMeta('schedulers'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Count of how many interviews took place across the stages in your pipeline')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['schedulers'], new expressions.ExpressionMeta('schedulers'))), new expressions.PathExpression(['schedulers'], new expressions.ExpressionMeta('schedulers'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:interviews:interviews-counts-cellcontent', {})])})]);
  views.register('reports:interviews:interviews-counts-interviewer').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Interview counts by interviewer', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Count of how many interviews took place across the stages in your pipeline')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), new expressions.PathExpression(['sourcers'], new expressions.ExpressionMeta('sourcers'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:interviews:interviews-counts-cellcontent', {})])})]);
  views.register('reports:interviews:interviews-counts-team').template = new templates.Template([new templates.ViewInstance('reports:pipeline:reportToolbar', {'title': 'Interview counts by team', 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'description': new templates.ParentWrapper(new templates.Template([new templates.Element('p', {'class': new templates.Attribute('description')}, [new templates.Text('Count of how many interviews took place across the stages in your pipeline')], void 0, false)]))}), new templates.ViewInstance('report-table', {'summary': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), new expressions.PathExpression(['report'], new expressions.ExpressionMeta('report'))), 'columns': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), new expressions.PathExpression(['stages'], new expressions.ExpressionMeta('stages'))), 'rows': new templates.ParentWrapper(new templates.DynamicText(new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), new expressions.PathExpression(['teams'], new expressions.ExpressionMeta('teams'))), 'cellcontent': new templates.Template([new templates.ViewInstance('reports:interviews:interviews-counts-cellcontent', {})])})]);
  views.register('reports:403:Title').template = new templates.Template([new templates.Text('Lever Reports')]);
  views.register('reports:403:index').template = new templates.Template([new templates.Element('div', {'id': new templates.Attribute('reports'), 'class': new templates.Attribute('content')}, [new templates.Element('h1', {'class': new templates.Attribute('settings-headline')}, [new templates.Text('Reports')], void 0, false), new templates.ViewInstance('reports:reportsNav', {}), new templates.Element('div', {'class': new templates.Attribute('nav-content')}, [new templates.Element('div', {'class': new templates.Attribute('settings-error')}, [new templates.Text('Only admins can view this page')], void 0, false)], void 0, false)], void 0, false)]);
  views.register('reports:reportsNav').template = new templates.Template([new templates.Element('ul', {'class': new templates.Attribute('reports-nav')}, [new templates.Element('li', {'class': new templates.Attribute('reports-section')}, [new templates.Element('span', {'class': new templates.Attribute('nav-section-title')}, [new templates.Text('Reports')], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('reports-items')}, [new templates.Element('li', {'class': new templates.Attribute('reports-section')}, [new templates.Element('span', {'class': new templates.Attribute('nav-section-title')}, [new templates.Text('Candidate stats')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-toplevel-posting')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name == \'pipeline-toplevel-posting\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-toplevel-posting'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'name\': \'pipeline-toplevel-posting\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-toplevel-source')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name == \'pipeline-toplevel-source\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-toplevel-source'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'name\': \'pipeline-toplevel-source\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by source')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-toplevel-team')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name == \'pipeline-toplevel-team\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-toplevel-team'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'name\': \'pipeline-toplevel-team\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by team')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('reports-section')}, [new templates.Element('span', {'class': new templates.Attribute('nav-section-title')}, [new templates.Text('Pipeline candidates')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-posting')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'activity\' && #root.$render.params.query.name == \'pipeline-conversion-posting\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('activity'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-posting'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'activity\', \'name\': \'pipeline-conversion-posting\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-owner')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'activity\' && #root.$render.params.query.name == \'pipeline-conversion-owner\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('activity'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-owner'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'activity\', \'name\': \'pipeline-conversion-owner\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting owner')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-source')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'activity\' && #root.$render.params.query.name == \'pipeline-conversion-source\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('activity'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-source'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'activity\', \'name\': \'pipeline-conversion-source\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by source')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-sourcer')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'activity\' && #root.$render.params.query.name == \'pipeline-conversion-sourcer\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('activity'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-sourcer'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'activity\', \'name\': \'pipeline-conversion-sourcer\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by sourcer')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('activity')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-team')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'activity\' && #root.$render.params.query.name == \'pipeline-conversion-team\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('activity'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-team'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'activity\', \'name\': \'pipeline-conversion-team\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by team')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('reports-section')}, [new templates.Element('span', {'class': new templates.Attribute('nav-section-title')}, [new templates.Text('Conversion rate')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('rate')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-posting')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'rate\' && #root.$render.params.query.name == \'pipeline-conversion-posting\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('rate'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-posting'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'rate\', \'name\': \'pipeline-conversion-posting\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('rate')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-owner')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'rate\' && #root.$render.params.query.name == \'pipeline-conversion-owner\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('rate'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-owner'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'rate\', \'name\': \'pipeline-conversion-owner\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting owner')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('rate')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-source')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'rate\' && #root.$render.params.query.name == \'pipeline-conversion-source\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('rate'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-source'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'rate\', \'name\': \'pipeline-conversion-source\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by source')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('rate')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-sourcer')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'rate\' && #root.$render.params.query.name == \'pipeline-conversion-sourcer\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('rate'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-sourcer'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'rate\', \'name\': \'pipeline-conversion-sourcer\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by sourcer')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'section']), new expressions.LiteralExpression('rate')]), new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-conversion-team')])], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.section === \'rate\' && #root.$render.params.query.name == \'pipeline-conversion-team\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('section'), new expressions.LiteralExpression('rate'), new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-conversion-team'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'section\': \'rate\', \'name\': \'pipeline-conversion-team\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by team')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('reports-section')}, [new templates.Element('span', {'class': new templates.Attribute('nav-section-title')}, [new templates.Text('Pipeline speed')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-speed-posting')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name == \'pipeline-speed-posting\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-speed-posting'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'name\': \'pipeline-speed-posting\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-speed-owner')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name == \'pipeline-speed-owner\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-speed-owner'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'name\': \'pipeline-speed-owner\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting owner')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-speed-source')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name == \'pipeline-speed-source\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-speed-source'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'name\': \'pipeline-speed-source\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by source')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('pipeline-speed-team')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name == \'pipeline-speed-team\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.pipeline.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('pipeline-speed-team'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.pipeline.index\', {}, {\'name\': \'pipeline-speed-team\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by team')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('reports-section ')}, [new templates.Element('span', {'class': new templates.Attribute('nav-section-title')}, [new templates.Text('Interview types')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('interviews-toplevel-posting')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name === \'interviews-toplevel-posting\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.interviews.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('interviews-toplevel-posting'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.interviews.index\', {}, {\'name\': \'interviews-toplevel-posting\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('interviews-toplevel-team')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name === \'interviews-toplevel-team\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.interviews.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('interviews-toplevel-team'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.interviews.index\', {}, {\'name\': \'interviews-toplevel-team\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by team')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('reports-section ')}, [new templates.Element('span', {'class': new templates.Attribute('nav-section-title')}, [new templates.Text('Interview counts')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('interviews-counts-posting')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name === \'interviews-counts-posting\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.interviews.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('interviews-counts-posting'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.interviews.index\', {}, {\'name\': \'interviews-counts-posting\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('interviews-counts-owner')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name === \'interviews-counts-owner\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.interviews.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('interviews-counts-owner'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.interviews.index\', {}, {\'name\': \'interviews-counts-owner\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by posting owner')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('interviews-counts-scheduler')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name === \'interviews-counts-scheduler\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.interviews.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('interviews-counts-scheduler'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.interviews.index\', {}, {\'name\': \'interviews-counts-scheduler\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by scheduler')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('interviews-counts-interviewer')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name === \'interviews-counts-interviewer\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.interviews.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('interviews-counts-interviewer'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.interviews.index\', {}, {\'name\': \'interviews-counts-interviewer\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by interviewer')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'query', 'name']), new expressions.LiteralExpression('interviews-counts-team')], void 0, new expressions.ExpressionMeta('if #root.$render.params.query.name === \'interviews-counts-team\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.interviews.index'), new expressions.LiteralExpression({}), new expressions.OperatorExpression('{}', [new expressions.LiteralExpression('name'), new expressions.LiteralExpression('interviews-counts-team'), new expressions.LiteralExpression('timePeriod'), new expressions.PathExpression(['timePeriod'])])], void 0, new expressions.ExpressionMeta('url(\'hire.reports.interviews.index\', {}, {\'name\': \'interviews-counts-team\', \'timePeriod\': timePeriod})')))}, [new templates.Text('by team')], void 0, false)], void 0, false)], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.Attribute('reports-section export')}, [new templates.Element('span', {'class': new templates.Attribute('nav-section-title')}, [new templates.Text('Export Data')], void 0, false), new templates.Element('ul', {'class': new templates.Attribute('reports-items')}, [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'url']), new expressions.LiteralExpression('/reports/export/candidates')], void 0, new expressions.ExpressionMeta('if #root.$render.params.url == \'/reports/export/candidates\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.export.candidates')], void 0, new expressions.ExpressionMeta('url(\'hire.reports.export.candidates\')')))}, [new templates.Text('Candidates')], void 0, false)], void 0, false), new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('nested-report '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#root', ['$render', 'params', 'url']), new expressions.LiteralExpression('/reports/export/interviews')], void 0, new expressions.ExpressionMeta('if #root.$render.params.url == \'/reports/export/interviews\'', 'if'))], [
    [new templates.Text('active')]
  ])]))}, [new templates.Element('a', {'href': new templates.DynamicAttribute(new expressions.FnExpression(['url'], [new expressions.LiteralExpression('hire.reports.export.interviews')], void 0, new expressions.ExpressionMeta('url(\'hire.reports.export.interviews\')')))}, [new templates.Text('Interviews')], void 0, false)], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);
  views.register('report-table:index', null, {'attributes': 'cellcontent'}).template = new templates.Template([new templates.Comment('report-table:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.Text(' report-tables')]))}, [new templates.ConditionalBlock([new expressions.OperatorExpression('&&', [new expressions.OperatorExpression('!=', [new expressions.PathExpression(['summary']), new expressions.LiteralExpression()]), new expressions.OperatorExpression('!=', [new expressions.PathExpression(['rows', 'length']), new expressions.LiteralExpression(0)])], void 0, new expressions.ExpressionMeta('if summary != null && rows.length != 0', 'if'))], [
    [new templates.Element('table', {'class': new templates.Attribute('report-table-body')}, [new templates.Element('thead', void 0, [new templates.Element('tr', {'class': new templates.Attribute('header-row')}, [new templates.Element('th', void 0, [], void 0, false), new templates.EachBlock(new expressions.PathExpression(['columns'], new expressions.ExpressionMeta('each columns as #column', 'each', void 0, '#column')), [new templates.Element('th', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('report-cell '), new templates.ConditionalBlock([new expressions.AliasPathExpression('#column', ['divider'], new expressions.ExpressionMeta('if #column.divider', 'if'))], [
      [new templates.Text('hidden')]
    ])]))}, [new templates.Element('div', {'class': new templates.Attribute('report-table-header-container cell-container')}, [new templates.Element('div', {'class': new templates.Attribute('report-header-label')}, [new templates.Element('div', {'class': new templates.Attribute('label-text')}, [new templates.DynamicText(new expressions.AliasPathExpression('#column', ['text'], new expressions.ExpressionMeta('#column.text')))], void 0, false)], void 0, false)], void 0, false)], void 0, false)])], void 0, false)], void 0, false), new templates.Element('tbody', void 0, [new templates.EachBlock(new expressions.PathExpression(['rows'], new expressions.ExpressionMeta('each rows as #row,#i', 'each', void 0, '#row', '#i')), [new templates.Element('tr', {'class': new templates.Attribute('report-row')}, [new templates.Element('td', void 0, [new templates.Element('div', {'title': new templates.DynamicAttribute(new templates.Template([new templates.DynamicText(new expressions.AliasPathExpression('#row', ['text'], new expressions.ExpressionMeta('#row.text'))), new templates.Text(' '), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#row', ['state']), new expressions.LiteralExpression('closed')], void 0, new expressions.ExpressionMeta('if #row.state == \'closed\'', 'if'))], [
      [new templates.Text('Closed')]
    ])])), 'class': new templates.Attribute('report-table-sidebar-container cell-container')}, [new templates.Element('span', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('sidebar-label '), new templates.DynamicText(new expressions.AliasPathExpression('#row', ['state'], new expressions.ExpressionMeta('#row.state')))]))}, [new templates.DynamicText(new expressions.AliasPathExpression('#row', ['text'], new expressions.ExpressionMeta('#row.text')))], void 0, false), new templates.ConditionalBlock([new expressions.OperatorExpression('==', [new expressions.AliasPathExpression('#row', ['state']), new expressions.LiteralExpression('closed')], void 0, new expressions.ExpressionMeta('if #row.state == \'closed\'', 'if'))], [
      [new templates.Element('span', {'class': new templates.Attribute('postings-label closed')}, [new templates.Text('Closed')], void 0, false)]
    ])], void 0, false)], void 0, false), new templates.EachBlock(new expressions.PathExpression(['columns'], new expressions.ExpressionMeta('each columns as #col,#j', 'each', void 0, '#col', '#j')), [new templates.Element('td', {'title': new templates.DynamicAttribute(new expressions.AliasPathExpression('#col', ['text'], new expressions.ExpressionMeta('#col.text'))), 'class': new templates.Attribute('report-table-cell')}, [new templates.ConditionalBlock([new expressions.AttributePathExpression('cellcontent', [], new expressions.ExpressionMeta('if @cellcontent', 'if'))], [
      [new templates.DynamicText(new expressions.AttributePathExpression('cellcontent', [], new expressions.ExpressionMeta('@cellcontent')))]
    ])], void 0, false)])], void 0, false)])], void 0, false)], void 0, false), new templates.ViewInstance('l-tip', {'selector': 'td.report-table-cell'}), new templates.ViewInstance('l-tip', {'selector': 'div.report-table-sidebar-container'})]
  ])], [new templates.MarkupAs(['content'])], false)]);
};
/*DERBY_SERIALIZED_VIEWS_END*/